{"version":3,"file":"index-6be29916.js","sources":["../../../../packages/illa-public-component/publicConfig/resource/initConfig/neon.ts","../../../../packages/illa-public-component/ResourceGenerator/components/ConfigElements/NeonConfigElement/index.tsx"],"sourcesContent":["import { DbSSL } from \"@illa-public/public-types\"\n\nexport const neonSSLInitialValue: DbSSL = {\n  clientCert: \"\",\n  clientKey: \"\",\n  serverCert: \"\",\n  ssl: false,\n}\n\nexport const neonDefaultPort = \"5432\"\n","import { neonDefaultPort } from \"@illa-public/public-configs\"\nimport { NeonResource, Resource } from \"@illa-public/public-types\"\nimport { TextLink } from \"@illa-public/text-link\"\nimport { isCloudVersion, isURL } from \"@illa-public/utils\"\nimport { FC, useCallback, useContext } from \"react\"\nimport { Controller, useFormContext } from \"react-hook-form\"\nimport { Trans, useTranslation } from \"react-i18next\"\nimport {\n  Alert,\n  Button,\n  Input,\n  WarningCircleIcon,\n  getColor,\n} from \"@illa-design/react\"\nimport { ResourceGeneratorContext } from \"../../../provider\"\nimport {\n  isContainLocalPath,\n  urlValidate,\n  validateNotEmpty,\n} from \"../../../utils\"\nimport { ControlledElement } from \"../../ControlledElement\"\nimport { hostInputContainer } from \"../../ControlledElement/style\"\nimport { ResourceDivider } from \"../../ResourceDivider\"\nimport { BaseConfigElementProps } from \"../interface\"\nimport {\n  applyConfigItemLabelText,\n  configItem,\n  configItemTip,\n  connectType,\n  connectTypeStyle,\n  container,\n  errorIconStyle,\n  errorMsgStyle,\n  labelContainer,\n} from \"../style\"\n\nconst getParsedStringValue = (inputString: string) => {\n  const regex = /^(.*):\\/\\/(.*):(.*)@(.*?)(?::(\\d+))?\\/(.*)$/\n\n  const match = inputString.match(regex)\n  if (!match) {\n    return {\n      roleName: null,\n      password: null,\n      hostWithoutPort: null,\n      dbName: null,\n    }\n  }\n\n  return {\n    roleName: match[2] || null,\n    password: match[3] || null,\n    hostWithoutPort: match[4] || null,\n    dbName: match[6] || null,\n  }\n}\n\nconst handleConnectionStringValidate = (inputString: string) => {\n  if (!inputString) {\n    return \"\"\n  }\n  const errorMsg = \"editor.action.form.tips.neon.failed\"\n  const isPostgres = /^postgres:/i.test(inputString)\n  if (!isPostgres) {\n    return errorMsg\n  }\n  const { roleName, dbName, hostWithoutPort, password } =\n    getParsedStringValue(inputString)\n\n  if (\n    roleName === null ||\n    hostWithoutPort === null ||\n    (hostWithoutPort && !isURL(hostWithoutPort)) ||\n    dbName === null\n  ) {\n    return errorMsg\n  }\n  if (password === null) {\n    return \"editor.action.form.tips.neon.no_password\"\n  }\n  return \"\"\n}\n\nconst NeonConfigElement: FC<BaseConfigElementProps> = (props) => {\n  const { resourceID } = props\n\n  const { t } = useTranslation()\n  const { control, reset, getValues, formState, watch } = useFormContext()\n\n  const { getResourceByID } = useContext(ResourceGeneratorContext)\n  const findResource = getResourceByID(resourceID) as Resource<NeonResource>\n\n  const hostValue = watch(\"host\")\n  const connectionString = watch(\"connectionString\")\n  const showAlert = isContainLocalPath(hostValue ?? \"\")\n  const connectionStringErrorMsg =\n    handleConnectionStringValidate(connectionString)\n\n  const handleDocLinkClick = (link: string) => () => window.open(link, \"_blank\")\n\n  const handleConnectionStringParse = useCallback(() => {\n    const res = getParsedStringValue(connectionString)\n    const { resourceName } = getValues()\n    const { roleName, password, hostWithoutPort, dbName } = res\n    reset({\n      resourceName,\n      connectionString: \"\",\n      host: hostWithoutPort ?? \"\",\n      databaseName: dbName,\n      databaseUsername: roleName,\n      databasePassword: password,\n    })\n  }, [connectionString, reset, getValues])\n\n  const ConnectionStringTips = () => (\n    <Trans\n      i18nKey=\"editor.action.form.tips.neon.normal\"\n      t={t}\n      components={[\n        <TextLink\n          key=\"editor.action.form.tips.neon.normal\"\n          onClick={handleDocLinkClick(\n            \"https://console.neon.tech/app/projects/\",\n          )}\n        />,\n      ]}\n    />\n  )\n\n  return (\n    <>\n      <div css={container}>\n        <ControlledElement\n          controlledType=\"input\"\n          isRequired\n          title={t(\"editor.action.resource.db.label.name\")}\n          control={control}\n          defaultValue={findResource?.resourceName ?? \"\"}\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          placeholders={[t(\"editor.action.resource.db.placeholder.name\")]}\n          name=\"resourceName\"\n          tips={t(\"editor.action.resource.restapi.tip.name\")}\n        />\n        <ResourceDivider type=\"General Option\" />\n        <div css={configItem}>\n          <div css={labelContainer}>\n            <span css={applyConfigItemLabelText(getColor(\"grayBlue\", \"02\"))}>\n              {t(\"editor.action.form.option.neon.connection_string\")}\n            </span>\n          </div>\n          <div css={hostInputContainer}>\n            <Controller\n              control={control}\n              defaultValue=\"\"\n              rules={{\n                validate: () => {\n                  return !connectionStringErrorMsg\n                },\n              }}\n              render={({ field: { value, onChange, onBlur } }) => (\n                <Input\n                  w=\"100%\"\n                  onBlur={onBlur}\n                  onChange={onChange}\n                  error={!!connectionStringErrorMsg}\n                  value={value}\n                  colorScheme=\"techPurple\"\n                  placeholder=\"postgres://testUser:abcdefg@ep-restless-rice-862380.us-east-2.aws.neon.tech/neondb\"\n                />\n              )}\n              name=\"connectionString\"\n            />\n            <Button\n              disabled={!!connectionStringErrorMsg || !connectionString}\n              onClick={handleConnectionStringParse}\n              colorScheme=\"techPurple\"\n              h=\"32px\"\n            >\n              {t(\"editor.action.form.option.neon.parse\")}\n            </Button>\n          </div>\n        </div>\n        <div css={configItemTip}>\n          {!!connectionStringErrorMsg ? (\n            <div css={errorMsgStyle}>\n              <WarningCircleIcon css={errorIconStyle} />\n              <>{t(connectionStringErrorMsg)}</>\n            </div>\n          ) : (\n            <div>\n              <ConnectionStringTips />\n            </div>\n          )}\n        </div>\n\n        <ControlledElement\n          title={t(\"editor.action.resource.db.label.hostname_port\")}\n          defaultValue={[\n            findResource?.content.host,\n            +(findResource?.content.port ?? neonDefaultPort),\n          ]}\n          name={[\"host\", \"port\"]}\n          controlledType={[\"input\", \"number\"]}\n          control={control}\n          isRequired\n          rules={[\n            {\n              validate: urlValidate,\n            },\n            {\n              required: true,\n            },\n          ]}\n          styles={[\n            {\n              flex: 4,\n            },\n            {\n              flex: 1,\n            },\n          ]}\n          placeholders={[t(\"editor.action.resource.db.placeholder.hostname\")]}\n          tips={\n            formState.errors.host && !showAlert ? (\n              <div css={errorMsgStyle}>\n                <WarningCircleIcon css={errorIconStyle} />\n                <>{formState.errors.host.message}</>\n              </div>\n            ) : null\n          }\n        />\n\n        {showAlert && (\n          <ControlledElement\n            defaultValue=\"\"\n            name=\"\"\n            title=\"\"\n            controlledType=\"none\"\n            control={control}\n            tips={\n              <Alert\n                title={t(\"editor.action.form.tips.connect_to_local.title.tips\")}\n                closable={false}\n                content={\n                  isCloudVersion ? (\n                    <Trans\n                      i18nKey=\"editor.action.form.tips.connect_to_local.cloud\"\n                      t={t}\n                      components={[\n                        <TextLink\n                          key=\"editor.action.form.tips.connect_to_local.cloud\"\n                          onClick={handleDocLinkClick(\n                            \"https://www.illacloud.com/docs/illa-cli\",\n                          )}\n                        />,\n                      ]}\n                    />\n                  ) : (\n                    t(\"editor.action.form.tips.connect_to_local.selfhost\")\n                  )\n                }\n              />\n            }\n          />\n        )}\n\n        <ControlledElement\n          title={t(\"editor.action.resource.db.label.database\")}\n          defaultValue={findResource?.content.databaseName}\n          name=\"databaseName\"\n          controlledType=\"input\"\n          control={control}\n          isRequired\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          placeholders={[t(\"editor.action.resource.db.placeholder.database\")]}\n        />\n        <ControlledElement\n          title={t(\"editor.action.resource.db.label.username_password\")}\n          defaultValue={[\n            findResource?.content.databaseUsername,\n            findResource?.content.databasePassword,\n          ]}\n          name={[\"databaseUsername\", \"databasePassword\"]}\n          controlledType={[\"input\", \"password\"]}\n          control={control}\n          isRequired\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n            {\n              required: true,\n            },\n          ]}\n          placeholders={[\n            t(\"editor.action.resource.db.placeholder.username\"),\n            t(\"editor.action.resource.db.placeholder.password\"),\n          ]}\n        />\n\n        {isCloudVersion && (\n          <>\n            <div css={configItemTip}>\n              {t(\"editor.action.resource.db.tip.username_password\")}\n            </div>\n            <div css={connectType}>\n              <div css={labelContainer}>\n                <span\n                  css={applyConfigItemLabelText(getColor(\"grayBlue\", \"02\"))}\n                >\n                  {t(\"editor.action.resource.db.label.connect_type\")}\n                </span>\n              </div>\n              <span css={connectTypeStyle}>\n                {t(\"editor.action.resource.db.tip.connect_type\")}\n              </span>\n            </div>\n          </>\n        )}\n      </div>\n    </>\n  )\n}\nNeonConfigElement.displayName = \"NeonConfigElement\"\nexport default NeonConfigElement\n"],"names":["neonDefaultPort","getParsedStringValue","inputString","regex","match","handleConnectionStringValidate","errorMsg","roleName","dbName","hostWithoutPort","password","isURL","NeonConfigElement","props","resourceID","t","useTranslation","control","reset","getValues","formState","watch","useFormContext","getResourceByID","useContext","ResourceGeneratorContext","findResource","hostValue","connectionString","showAlert","isContainLocalPath","connectionStringErrorMsg","handleDocLinkClick","link","handleConnectionStringParse","useCallback","res","resourceName","ConnectionStringTips","jsx","Trans","TextLink","Fragment","jsxs","container","ControlledElement","validateNotEmpty","ResourceDivider","configItem","labelContainer","applyConfigItemLabelText","getColor","hostInputContainer","Controller","value","onChange","onBlur","Input","Button","configItemTip","errorMsgStyle","WarningCircleIcon","errorIconStyle","urlValidate","Alert","isCloudVersion"],"mappings":"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"}