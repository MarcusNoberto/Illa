{"version":3,"file":"index-3eb9d14e.js","sources":["../../../../packages/illa-public-component/publicConfig/resource/initConfig/mongodb.ts","../../../../packages/illa-public-component/ResourceGenerator/components/ConfigElements/MongoDbConfigElement/MongoDbGuiMode/index.tsx","../../../../packages/illa-public-component/ResourceGenerator/components/ConfigElements/MongoDbConfigElement/MongoDbUriMode/index.tsx","../../../../packages/illa-public-component/ResourceGenerator/components/ConfigElements/MongoDbConfigElement/index.tsx"],"sourcesContent":["import {\n  MongoDbGuiConfigContent,\n  MongoDbResource,\n  MongoDbUriConfigContent,\n} from \"@illa-public/public-types\"\n\nexport const MongoDbGuiConfigContentInitial: MongoDbGuiConfigContent = {\n  host: \"\",\n  connectionFormat: \"standard\",\n  port: \"27017\",\n  databaseName: \"\",\n  databaseUsername: \"\",\n  databasePassword: \"\",\n}\n\nexport const MongoDbSSLInitial = {\n  open: false,\n  client: \"\",\n  ca: \"\",\n}\n\nexport const MongoDbUriConfigContentInitial: MongoDbUriConfigContent = {\n  uri: \"\",\n}\n\nexport const MongoDbResourceInitial: MongoDbResource<MongoDbGuiConfigContent> =\n  {\n    configType: \"gui\",\n    configContent: MongoDbGuiConfigContentInitial,\n    ssl: MongoDbSSLInitial,\n  }\n","import { MongoDbGuiConfigContentInitial } from \"@illa-public/public-configs\"\nimport {\n  MongoDbGuiConfigContent,\n  MongoDbResource,\n  Resource,\n} from \"@illa-public/public-types\"\nimport { TextLink } from \"@illa-public/text-link\"\nimport { isCloudVersion } from \"@illa-public/utils\"\nimport { FC, useCallback, useContext, useState } from \"react\"\nimport { Trans, useTranslation } from \"react-i18next\"\nimport { Alert, getColor } from \"@illa-design/react\"\nimport { ResourceGeneratorContext } from \"../../../../provider\"\nimport { isContainLocalPath } from \"../../../../utils\"\nimport { ControlledElement } from \"../../../ControlledElement\"\nimport {\n  applyConfigItemLabelText,\n  configItem,\n  configItemTip,\n  connectTypeStyle,\n  labelContainer,\n} from \"../../style\"\nimport { MongoDbConfigModeProps } from \"../interface\"\n\nexport const MongoDbGuiMode: FC<MongoDbConfigModeProps> = (props) => {\n  const { control, resourceID, watch } = props\n\n  const { t } = useTranslation()\n  const { getResourceByID } = useContext(ResourceGeneratorContext)\n  const findResource = getResourceByID(resourceID)\n\n  let content: MongoDbGuiConfigContent\n  if (findResource === undefined) {\n    content = MongoDbGuiConfigContentInitial\n  } else {\n    const mongoDbResource = (\n      findResource as Resource<MongoDbResource<MongoDbGuiConfigContent>>\n    ).content\n    content =\n      mongoDbResource.configType === \"gui\"\n        ? mongoDbResource.configContent\n        : MongoDbGuiConfigContentInitial\n  }\n\n  const [showAlert, setShowAlert] = useState<boolean>(false)\n\n  const connectionFormat = watch(\n    \"connectionFormat\",\n    content.connectionFormat ?? \"standard\",\n  )\n\n  const handleDocLinkClick = () => {\n    window.open(\"https://www.illacloud.com/docs/illa-cli\", \"_blank\")\n  }\n\n  const handleHostValidate = useCallback(\n    (value: string) => {\n      const isShowAlert = isContainLocalPath(value ?? \"\")\n      if (isShowAlert !== showAlert) {\n        setShowAlert(isShowAlert)\n      }\n      return true\n    },\n    [showAlert],\n  )\n\n  return (\n    <>\n      <ControlledElement\n        title={t(\"editor.action.resource.db.label.hostname\")}\n        defaultValue={content.host}\n        name=\"host\"\n        controlledType=\"input\"\n        control={control}\n        isRequired\n        rules={[\n          {\n            required: true,\n            validate: handleHostValidate,\n          },\n        ]}\n        placeholders={[t(\"editor.action.resource.db.placeholder.hostname\")]}\n      />\n      {showAlert && (\n        <ControlledElement\n          defaultValue=\"\"\n          name=\"\"\n          title=\"\"\n          controlledType=\"none\"\n          control={control}\n          tips={\n            <Alert\n              title={t(\"editor.action.form.tips.connect_to_local.title.tips\")}\n              closable={false}\n              content={\n                isCloudVersion ? (\n                  <Trans\n                    i18nKey=\"editor.action.form.tips.connect_to_local.cloud\"\n                    t={t}\n                    components={[\n                      <TextLink\n                        key=\"editor.action.form.tips.connect_to_local.cloud\"\n                        onClick={handleDocLinkClick}\n                      />,\n                    ]}\n                  />\n                ) : (\n                  t(\"editor.action.form.tips.connect_to_local.selfhost\")\n                )\n              }\n            />\n          }\n        />\n      )}\n      <ControlledElement\n        title={t(\"editor.action.resource.db.label.connection_format\")}\n        defaultValue={content.connectionFormat}\n        name=\"connectionFormat\"\n        controlledType=\"radio-group\"\n        control={control}\n        isRequired\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n        forceEqualWidth\n        options={[\n          {\n            value: \"standard\",\n            label: t(\n              \"editor.action.resource.db.label.mongodb_connection_standard\",\n            ),\n          },\n          {\n            value: \"mongodb+srv\",\n            label: t(\n              \"editor.action.resource.db.label.mongodb_connection_dns_seed_list\",\n            ),\n          },\n        ]}\n      />\n      {connectionFormat === \"standard\" && (\n        <ControlledElement\n          title={t(\"editor.action.resource.db.label.port\")}\n          defaultValue={content.port}\n          name=\"port\"\n          controlledType=\"number\"\n          control={control}\n          placeholders={[\"27017\"]}\n          isRequired\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        />\n      )}\n      <ControlledElement\n        title={t(\"editor.action.resource.db.label.database\")}\n        defaultValue={content.databaseName}\n        control={control}\n        placeholders={[t(\"editor.action.resource.db.placeholder.database\")]}\n        name=\"databaseName\"\n        controlledType=\"input\"\n        isRequired\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n      />\n\n      <ControlledElement\n        title={t(\"editor.action.resource.db.label.username_password\")}\n        name={[\"databaseUsername\", \"databasePassword\"]}\n        controlledType={[\"input\", \"password\"]}\n        defaultValue={[content.databaseUsername, content.databasePassword]}\n        control={control}\n        rules={[\n          {\n            required: true,\n          },\n          {\n            required: true,\n          },\n        ]}\n        isRequired\n        placeholders={[\n          t(\"editor.action.resource.db.placeholder.username\"),\n          t(\"editor.action.resource.db.placeholder.password\"),\n        ]}\n      />\n      {isCloudVersion && (\n        <>\n          <div css={configItemTip}>\n            {t(\"editor.action.resource.db.tip.username_password\")}\n          </div>\n          <div css={configItem}>\n            <div css={labelContainer}>\n              <span css={applyConfigItemLabelText(getColor(\"grayBlue\", \"02\"))}>\n                {t(\"editor.action.resource.db.label.connect_type\")}\n              </span>\n            </div>\n            <span css={connectTypeStyle}>\n              {t(\"editor.action.resource.db.tip.connect_type\")}\n            </span>\n          </div>\n        </>\n      )}\n    </>\n  )\n}\n\nMongoDbGuiMode.displayName = \"MongoDbGuiMode\"\n","import { MongoDbUriConfigContentInitial } from \"@illa-public/public-configs\"\nimport {\n  MongoDbResource,\n  MongoDbUriConfigContent,\n  Resource,\n} from \"@illa-public/public-types\"\nimport { FC, useContext } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { ResourceGeneratorContext } from \"../../../../provider\"\nimport { validateNotEmpty } from \"../../../../utils\"\nimport { ControlledElement } from \"../../../ControlledElement\"\nimport { MongoDbConfigModeProps } from \"../interface\"\n\nexport const MongoDbUriMode: FC<MongoDbConfigModeProps> = (props) => {\n  const { resourceID, control } = props\n\n  const { t } = useTranslation()\n  const { getResourceByID } = useContext(ResourceGeneratorContext)\n  const findResource = getResourceByID(resourceID)\n\n  let content: MongoDbUriConfigContent\n  if (findResource === undefined) {\n    content = MongoDbUriConfigContentInitial\n  } else {\n    const mongoDbResource = (\n      findResource as Resource<MongoDbResource<MongoDbUriConfigContent>>\n    ).content\n    content =\n      mongoDbResource.configType === \"uri\"\n        ? mongoDbResource.configContent\n        : MongoDbUriConfigContentInitial\n  }\n\n  return (\n    <ControlledElement\n      title={t(\"editor.action.resource.db.label.connection_format\")}\n      control={control}\n      name=\"uri\"\n      defaultValue={content.uri}\n      placeholders={[\n        \"mongodb+srv://admin:password@host/mydb?retryWrites=true&w=majority\",\n      ]}\n      controlledType=\"input\"\n      rules={[\n        {\n          validate: validateNotEmpty,\n        },\n      ]}\n      isRequired\n    />\n  )\n}\n\nMongoDbUriMode.displayName = \"MongoDbUriMode\"\n","import { MongoDbResourceInitial } from \"@illa-public/public-configs\"\nimport { MongoDbConfig, MongoDbResource } from \"@illa-public/public-types\"\nimport { FC, useContext } from \"react\"\nimport { useFormContext } from \"react-hook-form\"\nimport { useTranslation } from \"react-i18next\"\nimport { Divider } from \"@illa-design/react\"\nimport { ResourceGeneratorContext } from \"../../../provider\"\nimport { validateNotEmpty } from \"../../../utils\"\nimport { ControlledElement } from \"../../ControlledElement\"\nimport { BaseConfigElementProps } from \"../interface\"\nimport { container, optionLabelStyle } from \"../style\"\nimport { MongoDbGuiMode } from \"./MongoDbGuiMode\"\nimport { MongoDbUriMode } from \"./MongoDbUriMode\"\n\nconst MongoDbConfigElement: FC<BaseConfigElementProps> = (props) => {\n  const { resourceID } = props\n\n  const { t } = useTranslation()\n  const { control, watch } = useFormContext()\n\n  const { getResourceByID } = useContext(ResourceGeneratorContext)\n  const findResource = getResourceByID(resourceID)\n\n  let content: MongoDbResource<MongoDbConfig>\n  if (findResource === undefined) {\n    content = MongoDbResourceInitial\n  } else {\n    content = findResource.content as MongoDbResource<MongoDbConfig>\n  }\n\n  const configTypeWatch = watch(\"configType\", content.configType)\n  const openSSLWatch = watch(\"open\", content.ssl.open ?? false)\n\n  return (\n    <>\n      <div css={container}>\n        <ControlledElement\n          controlledType=\"input\"\n          isRequired\n          title={t(\"editor.action.resource.db.label.name\")}\n          control={control}\n          defaultValue={findResource?.resourceName ?? \"\"}\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          placeholders={[t(\"editor.action.resource.db.placeholder.name\")]}\n          name=\"resourceName\"\n          tips={t(\"editor.action.resource.restapi.tip.name\")}\n        />\n        <Divider\n          direction=\"horizontal\"\n          ml=\"24px\"\n          mr=\"24px\"\n          mt=\"8px\"\n          mb=\"8px\"\n          w=\"unset\"\n        />\n        <div css={optionLabelStyle}>\n          {t(\"editor.action.resource.db.title.general_option\")}\n        </div>\n        <ControlledElement\n          title={t(\"editor.action.resource.db.label.config_type\")}\n          defaultValue={content.configType}\n          name=\"configType\"\n          controlledType=\"radio-group\"\n          control={control}\n          forceEqualWidth\n          options={[\n            {\n              value: \"gui\",\n              label: \"General\",\n            },\n            {\n              value: \"uri\",\n              label: \"URI\",\n            },\n          ]}\n        />\n        {configTypeWatch === \"gui\" && (\n          <MongoDbGuiMode\n            control={control}\n            watch={watch}\n            resourceID={resourceID}\n          />\n        )}\n        {configTypeWatch === \"uri\" && (\n          <MongoDbUriMode\n            control={control}\n            watch={watch}\n            resourceID={resourceID}\n          />\n        )}\n\n        <ControlledElement\n          controlledType={[\"switch\"]}\n          title={t(\"editor.action.resource.db.label.ssl_options\")}\n          control={control}\n          defaultValue={content.ssl.open}\n          name=\"open\"\n          contentLabel={t(\"editor.action.resource.db.tip.ssl_options\")}\n        />\n\n        {openSSLWatch && (\n          <>\n            <ControlledElement\n              controlledType={[\"textarea\"]}\n              title={t(\"editor.action.resource.db.label.mongodb_ssl_client\")}\n              control={control}\n              defaultValue={content.ssl.client}\n              name=\"client\"\n              placeholders={[\n                t(\"editor.action.resource.db.placeholder.mongo_certificate\"),\n              ]}\n            />\n            <ControlledElement\n              controlledType={[\"textarea\"]}\n              title={t(\"editor.action.resource.db.label.mongodb_ssl_ca\")}\n              control={control}\n              defaultValue={content.ssl.ca}\n              name=\"ca\"\n              placeholders={[\n                t(\"editor.action.resource.db.placeholder.certificate\"),\n              ]}\n            />\n          </>\n        )}\n      </div>\n    </>\n  )\n}\n\nMongoDbConfigElement.displayName = \"MongoDbConfigElement\"\nexport default MongoDbConfigElement\n"],"names":["MongoDbGuiConfigContentInitial","MongoDbSSLInitial","MongoDbUriConfigContentInitial","MongoDbResourceInitial","MongoDbGuiMode","props","control","resourceID","watch","t","useTranslation","getResourceByID","useContext","ResourceGeneratorContext","findResource","content","mongoDbResource","showAlert","setShowAlert","useState","connectionFormat","handleHostValidate","useCallback","value","isShowAlert","isContainLocalPath","jsxs","Fragment","jsx","ControlledElement","Alert","isCloudVersion","MongoDbUriMode","validateNotEmpty","MongoDbConfigElement","useFormContext","configTypeWatch","openSSLWatch","container","Divider","optionLabelStyle"],"mappings":"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"}