{"version":3,"file":"index-e93f7488.js","sources":["../../../../packages/illa-public-component/publicConfig/resource/initConfig/couchdb.ts","../../../../packages/illa-public-component/ResourceGenerator/components/ConfigElements/CouchDBConfigElement/index.tsx"],"sourcesContent":["import { CouchdbResource } from \"@illa-public/public-types\"\n\nexport const CouchdbResourceInitial: CouchdbResource = {\n  host: \"\",\n  port: \"5984\",\n  username: \"\",\n  password: \"\",\n  ssl: false,\n}\n","import { CouchdbResourceInitial } from \"@illa-public/public-configs\"\nimport { CouchdbResource } from \"@illa-public/public-types\"\nimport { isCloudVersion } from \"@illa-public/utils\"\nimport { FC, useContext } from \"react\"\nimport { useFormContext } from \"react-hook-form\"\nimport { useTranslation } from \"react-i18next\"\nimport { Divider, WarningCircleIcon, getColor } from \"@illa-design/react\"\nimport { ResourceGeneratorContext } from \"../../../provider\"\nimport { urlValidate, validateNotEmpty } from \"../../../utils\"\nimport { ControlledElement } from \"../../ControlledElement\"\nimport { BaseConfigElementProps } from \"../interface\"\nimport {\n  applyConfigItemLabelText,\n  configItemTip,\n  connectType,\n  connectTypeStyle,\n  container,\n  errorIconStyle,\n  errorMsgStyle,\n  labelContainer,\n  optionLabelStyle,\n} from \"../style\"\n\nconst CouchDBConfigElement: FC<BaseConfigElementProps> = (props) => {\n  const { resourceID } = props\n  const { t } = useTranslation()\n  const { control, formState } = useFormContext()\n  const { getResourceByID } = useContext(ResourceGeneratorContext)\n  const findResource = getResourceByID(resourceID)\n  const content = findResource\n    ? (findResource.content as CouchdbResource)\n    : CouchdbResourceInitial\n\n  return (\n    <>\n      <div css={container}>\n        <ControlledElement\n          controlledType=\"input\"\n          isRequired\n          title={t(\"editor.action.resource.db.label.name\")}\n          control={control}\n          defaultValue={findResource?.resourceName ?? \"\"}\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          placeholders={[t(\"editor.action.resource.db.placeholder.name\")]}\n          name=\"resourceName\"\n          tips={t(\"editor.action.resource.restapi.tip.name\")}\n        />\n        <Divider\n          direction=\"horizontal\"\n          ml=\"24px\"\n          mr=\"24px\"\n          mt=\"8px\"\n          mb=\"8px\"\n          w=\"unset\"\n        />\n        <div css={optionLabelStyle}>\n          {t(\"editor.action.resource.db.title.general_option\")}\n        </div>\n        <ControlledElement\n          controlledType=\"input\"\n          isRequired\n          title={t(\"editor.action.resource.db.label.hostname\")}\n          control={control}\n          defaultValue={content.host}\n          rules={[\n            {\n              required: t(\"editor.action.resource.error.invalid_url\"),\n              validate: urlValidate,\n            },\n          ]}\n          name=\"host\"\n          tips={\n            formState.errors.host && (\n              <div css={errorMsgStyle}>\n                <WarningCircleIcon css={errorIconStyle} />\n                <>{formState.errors.host.message}</>\n              </div>\n            )\n          }\n        />\n        <ControlledElement\n          controlledType=\"input\"\n          isRequired\n          title={t(\"editor.action.resource.db.label.port\")}\n          control={control}\n          defaultValue={content.port}\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          placeholders={[\"5984\"]}\n          name=\"port\"\n        />\n        <ControlledElement\n          controlledType=\"input\"\n          isRequired\n          title={t(\"editor.action.resource.db.label.username\")}\n          control={control}\n          defaultValue={content.username}\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          name=\"username\"\n        />\n        <ControlledElement\n          controlledType=\"password\"\n          isRequired\n          title={t(\"editor.action.resource.db.label.password\")}\n          control={control}\n          defaultValue={content.password}\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          name=\"password\"\n        />\n        {isCloudVersion && (\n          <>\n            <div css={configItemTip}>\n              {t(\"editor.action.resource.db.tip.username_password\")}\n            </div>\n            <div css={connectType}>\n              <div css={labelContainer}>\n                <span\n                  css={applyConfigItemLabelText(getColor(\"grayBlue\", \"02\"))}\n                >\n                  {t(\"editor.action.resource.db.label.connect_type\")}\n                </span>\n              </div>\n              <span css={connectTypeStyle}>\n                {t(\"editor.action.resource.db.tip.connect_type\")}\n              </span>\n            </div>\n          </>\n        )}\n        <Divider\n          direction=\"horizontal\"\n          ml=\"24px\"\n          mr=\"24px\"\n          mt=\"16px\"\n          mb=\"8px\"\n          w=\"unset\"\n        />\n        <div css={optionLabelStyle}>\n          {t(\"editor.action.resource.db.title.advanced_option\")}\n        </div>\n        <ControlledElement\n          controlledType=\"switch\"\n          title={t(\"editor.action.form.label.couchdb.ssl\")}\n          control={control}\n          defaultValue={content.ssl}\n          name=\"ssl\"\n          contentLabel={t(\"editor.action.form.option.couchdb.ssl\")}\n        />\n      </div>\n    </>\n  )\n}\n\nCouchDBConfigElement.displayName = \"CouchDBConfigElement\"\nexport default CouchDBConfigElement\n"],"names":["CouchdbResourceInitial","CouchDBConfigElement","props","resourceID","useTranslation","control","formState","useFormContext","getResourceByID","useContext","ResourceGeneratorContext","findResource","content","jsx","Fragment","jsxs","container","ControlledElement","validateNotEmpty","Divider","optionLabelStyle","urlValidate","errorMsgStyle","WarningCircleIcon","errorIconStyle","isCloudVersion"],"mappings":"soBAEO,MAAMA,EAA0C,CACrD,KAAM,GACN,KAAM,OACN,SAAU,GACV,SAAU,GACV,IAAK,EACP,ECeMC,EAAoDC,GAAU,CAC5D,KAAA,CAAE,WAAAC,CAAe,EAAAD,EACjB,CAAE,GAAME,IACR,CAAE,QAAAC,EAAS,UAAAC,CAAU,EAAIC,EAAe,EACxC,CAAE,gBAAAC,CAAA,EAAoBC,EAAA,WAAWC,CAAwB,EACzDC,EAAeH,EAAgBL,CAAU,EACzCS,EAAUD,EACXA,EAAa,QACdX,EAEJ,OAEIa,EAAAC,EAAA,CAAA,SAAAC,EAAC,MAAI,CAAA,IAAKC,EACR,SAAA,CAAAH,EAACI,EAAA,CACC,eAAe,QACf,WAAU,GACV,MAAO,EAAE,sCAAsC,EAC/C,QAAAZ,EACA,cAAcM,GAAA,YAAAA,EAAc,eAAgB,GAC5C,MAAO,CACL,CACE,SAAUO,CACZ,CACF,EACA,aAAc,CAAC,EAAE,4CAA4C,CAAC,EAC9D,KAAK,eACL,KAAM,EAAE,yCAAyC,CAAA,CACnD,EACAL,EAACM,EAAA,CACC,UAAU,aACV,GAAG,OACH,GAAG,OACH,GAAG,MACH,GAAG,MACH,EAAE,OAAA,CACJ,IACC,MAAI,CAAA,IAAKC,EACP,SAAA,EAAE,gDAAgD,EACrD,EACAP,EAACI,EAAA,CACC,eAAe,QACf,WAAU,GACV,MAAO,EAAE,0CAA0C,EACnD,QAAAZ,EACA,aAAcO,EAAQ,KACtB,MAAO,CACL,CACE,SAAU,EAAE,0CAA0C,EACtD,SAAUS,CACZ,CACF,EACA,KAAK,OACL,KACEf,EAAU,OAAO,MACdS,EAAA,MAAA,CAAI,IAAKO,EACR,SAAA,CAACT,EAAAU,EAAA,CAAkB,IAAKC,CAAgB,CAAA,EACrCX,EAAAC,EAAA,CAAA,SAAAR,EAAU,OAAO,KAAK,QAAQ,CAAA,EACnC,CAAA,CAGN,EACAO,EAACI,EAAA,CACC,eAAe,QACf,WAAU,GACV,MAAO,EAAE,sCAAsC,EAC/C,QAAAZ,EACA,aAAcO,EAAQ,KACtB,MAAO,CACL,CACE,SAAUM,CACZ,CACF,EACA,aAAc,CAAC,MAAM,EACrB,KAAK,MAAA,CACP,EACAL,EAACI,EAAA,CACC,eAAe,QACf,WAAU,GACV,MAAO,EAAE,0CAA0C,EACnD,QAAAZ,EACA,aAAcO,EAAQ,SACtB,MAAO,CACL,CACE,SAAUM,CACZ,CACF,EACA,KAAK,UAAA,CACP,EACAL,EAACI,EAAA,CACC,eAAe,WACf,WAAU,GACV,MAAO,EAAE,0CAA0C,EACnD,QAAAZ,EACA,aAAcO,EAAQ,SACtB,MAAO,CACL,CACE,SAAUM,CACZ,CACF,EACA,KAAK,UAAA,CACP,EACCO,EAmBDZ,EAACM,EAAA,CACC,UAAU,aACV,GAAG,OACH,GAAG,OACH,GAAG,OACH,GAAG,MACH,EAAE,OAAA,CACJ,IACC,MAAI,CAAA,IAAKC,EACP,SAAA,EAAE,iDAAiD,EACtD,EACAP,EAACI,EAAA,CACC,eAAe,SACf,MAAO,EAAE,sCAAsC,EAC/C,QAAAZ,EACA,aAAcO,EAAQ,IACtB,KAAK,MACL,aAAc,EAAE,uCAAuC,CAAA,CACzD,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,EAEAX,EAAqB,YAAc"}