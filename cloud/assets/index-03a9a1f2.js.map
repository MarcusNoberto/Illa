{"version":3,"file":"index-03a9a1f2.js","sources":["../../../../packages/illa-public-component/publicConfig/resource/initConfig/snowflake.ts","../../../../packages/illa-public-component/ResourceGenerator/components/ConfigElements/SnowflakeConfigElement/BasicAuthConfig/index.tsx","../../../../packages/illa-public-component/ResourceGenerator/components/ConfigElements/SnowflakeConfigElement/KeyPairConfig/index.tsx","../../../../packages/illa-public-component/ResourceGenerator/components/ConfigElements/SnowflakeConfigElement/constants.ts","../../../../packages/illa-public-component/ResourceGenerator/components/ConfigElements/SnowflakeConfigElement/index.tsx"],"sourcesContent":["import {\n  SnowflakeAuthenticationType,\n  SnowflakeBasicAuthenticationType,\n  SnowflakeKeyAuthenticationType,\n  SnowflakeResource,\n} from \"@illa-public/public-types\"\n\nexport const snowflakeKeyAuthenticationTypeInitial: SnowflakeKeyAuthenticationType =\n  {\n    username: \"\",\n    privateKey: \"\",\n  }\n\nexport const snowflakeBasicAuthenticationTypeInitial: SnowflakeBasicAuthenticationType =\n  {\n    username: \"\",\n    password: \"\",\n  }\n\nexport const snowflakeResourceInitial: SnowflakeResource<SnowflakeAuthenticationType> =\n  {\n    accountName: \"\",\n    warehouse: \"\",\n    database: \"\",\n    schema: \"PUBLIC\",\n    role: \"PUBLIC\",\n    authentication: \"basic\",\n    authContent: snowflakeBasicAuthenticationTypeInitial,\n  }\n","import { SnowflakeBasicAuthenticationType } from \"@illa-public/public-types\"\nimport { FC } from \"react\"\nimport { Control } from \"react-hook-form\"\nimport { useTranslation } from \"react-i18next\"\nimport { validateNotEmpty } from \"../../../../utils\"\nimport { ControlledElement } from \"../../../ControlledElement\"\n\nexport const BasicAuthConfig: FC<\n  SnowflakeBasicAuthenticationType & {\n    control: Control\n  }\n> = (props) => {\n  const { username, password, control } = props\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <ControlledElement\n        controlledType=\"input\"\n        control={control}\n        isRequired\n        rules={[\n          {\n            validate: validateNotEmpty,\n          },\n        ]}\n        title={t(\"editor.action.resource.db.label.username\")}\n        name=\"username\"\n        defaultValue={username}\n        placeholders={[\n          t(\"editor.action.resource.db.placeholder.snowflake_username\"),\n        ]}\n      />\n      <ControlledElement\n        controlledType=\"password\"\n        control={control}\n        isRequired\n        rules={[\n          {\n            required: true,\n          },\n        ]}\n        title={t(\"editor.action.resource.db.label.password\")}\n        name=\"password\"\n        defaultValue={password}\n        placeholders={[\n          t(\"editor.action.resource.db.placeholder.snowflake_password\"),\n        ]}\n      />\n    </>\n  )\n}\n\nBasicAuthConfig.displayName = \"BasicAuthConfig\"\n","import { SnowflakeKeyAuthenticationType } from \"@illa-public/public-types\"\nimport { FC } from \"react\"\nimport { Control } from \"react-hook-form\"\nimport { useTranslation } from \"react-i18next\"\nimport { validateNotEmpty } from \"../../../../utils\"\nimport { ControlledElement } from \"../../../ControlledElement\"\n\nexport const KeyPairConfig: FC<\n  SnowflakeKeyAuthenticationType & {\n    control: Control\n  }\n> = (props) => {\n  const { username, privateKey, control } = props\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <ControlledElement\n        controlledType=\"input\"\n        control={control}\n        isRequired\n        rules={[\n          {\n            validate: validateNotEmpty,\n          },\n        ]}\n        title={t(\"editor.action.resource.db.label.username\")}\n        name=\"username\"\n        defaultValue={username}\n        placeholders={[\n          t(\"editor.action.resource.db.placeholder.snowflake_username\"),\n        ]}\n      />\n      <ControlledElement\n        controlledType=\"textarea\"\n        control={control}\n        isRequired\n        rules={[\n          {\n            validate: validateNotEmpty,\n          },\n        ]}\n        title={t(\"editor.action.resource.db.label.private_key\")}\n        name=\"privateKey\"\n        defaultValue={privateKey}\n        placeholders={[\n          t(\"editor.action.resource.db.placeholder.snowflake_private_key\"),\n        ]}\n      />\n    </>\n  )\n}\n\nKeyPairConfig.displayName = \"KeyPairConfig\"\n","export const AuthenticationOptions = [\n  {\n    label: \"Basic Auth\",\n    value: \"basic\",\n  },\n  {\n    label: \"Key Pair (only encrypted private keys are supported)\",\n    value: \"key\",\n  },\n]\n","import { snowflakeResourceInitial } from \"@illa-public/public-configs\"\nimport {\n  SnowflakeAuthenticationType,\n  SnowflakeBasicAuthenticationType,\n  SnowflakeKeyAuthenticationType,\n  SnowflakeResource,\n} from \"@illa-public/public-types\"\nimport { FC, useContext } from \"react\"\nimport { useFormContext } from \"react-hook-form\"\nimport { useTranslation } from \"react-i18next\"\nimport { Divider } from \"@illa-design/react\"\nimport { ResourceGeneratorContext } from \"../../../provider\"\nimport { validateNotEmpty } from \"../../../utils\"\nimport { ControlledElement } from \"../../ControlledElement\"\nimport { BaseConfigElementProps } from \"../interface\"\nimport { container, optionLabelStyle } from \"../style\"\nimport { BasicAuthConfig } from \"./BasicAuthConfig\"\nimport { KeyPairConfig } from \"./KeyPairConfig\"\nimport { AuthenticationOptions } from \"./constants\"\n\ntype SnowflakeType = SnowflakeResource<SnowflakeAuthenticationType>\n\nconst SnowflakeConfigElement: FC<BaseConfigElementProps> = (props) => {\n  const { resourceID } = props\n  const { t } = useTranslation()\n  const { control, watch } = useFormContext()\n  const { getResourceByID } = useContext(ResourceGeneratorContext)\n  const findResource = getResourceByID(resourceID)\n\n  const content = (findResource?.content ??\n    snowflakeResourceInitial) as SnowflakeType\n  const authenticationType = watch(\"authentication\", content.authentication)\n\n  return (\n    <>\n      <div css={container}>\n        <ControlledElement\n          controlledType=\"input\"\n          isRequired\n          title={t(\"editor.action.resource.db.label.name\")}\n          control={control}\n          defaultValue={findResource?.resourceName ?? \"\"}\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          placeholders={[t(\"editor.action.resource.db.placeholder.name\")]}\n          name=\"resourceName\"\n          tips={t(\"editor.action.resource.restapi.tip.name\")}\n        />\n        <Divider\n          direction=\"horizontal\"\n          ml=\"24px\"\n          mr=\"24px\"\n          mt=\"8px\"\n          mb=\"8px\"\n          w=\"unset\"\n        />\n        <div css={optionLabelStyle}>\n          {t(\"editor.action.resource.db.title.general_option\")}\n        </div>\n        <ControlledElement\n          controlledType=\"input\"\n          isRequired\n          title={t(\"editor.action.resource.db.label.account_name\")}\n          control={control}\n          defaultValue={content.accountName}\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          placeholders={[\n            t(\"editor.action.resource.db.placeholder.account_name\"),\n          ]}\n          name=\"accountName\"\n        />\n        <ControlledElement\n          controlledType=\"input\"\n          isRequired\n          title={t(\"editor.action.resource.db.label.warehouse\")}\n          control={control}\n          defaultValue={content.warehouse}\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          placeholders={[t(\"editor.action.resource.db.placeholder.warehouse\")]}\n          name=\"warehouse\"\n        />\n        <ControlledElement\n          controlledType=\"input\"\n          isRequired\n          title={t(\"editor.action.resource.db.label.database\")}\n          control={control}\n          defaultValue={content.database}\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          placeholders={[\n            t(\"editor.action.resource.db.placeholder.snowflake_database\"),\n          ]}\n          name=\"database\"\n        />\n        <ControlledElement\n          controlledType=\"input\"\n          title={t(\"editor.action.resource.db.label.schema\")}\n          control={control}\n          defaultValue={content.schema}\n          placeholders={[t(\"editor.action.resource.db.placeholder.schema\")]}\n          name=\"schema\"\n        />\n        <ControlledElement\n          controlledType=\"input\"\n          title={t(\"editor.action.resource.db.label.role\")}\n          control={control}\n          defaultValue={content.role}\n          placeholders={[t(\"editor.action.resource.db.placeholder.schema\")]}\n          name=\"role\"\n        />\n\n        <ControlledElement\n          controlledType=\"select\"\n          control={control}\n          isRequired\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n          title={t(\"editor.action.resource.restapi.label.authentication\")}\n          name=\"authentication\"\n          defaultValue={content.authentication}\n          options={AuthenticationOptions}\n        />\n        {authenticationType === \"basic\" ? (\n          <BasicAuthConfig\n            control={control}\n            {...(content.authContent as SnowflakeBasicAuthenticationType)}\n          />\n        ) : (\n          <KeyPairConfig\n            control={control}\n            {...(content.authContent as SnowflakeKeyAuthenticationType)}\n          />\n        )}\n      </div>\n    </>\n  )\n}\n\nSnowflakeConfigElement.displayName = \"SnowflakeConfigElement\"\nexport default SnowflakeConfigElement\n"],"names":["snowflakeBasicAuthenticationTypeInitial","snowflakeResourceInitial","BasicAuthConfig","props","username","password","control","t","useTranslation","jsxs","Fragment","jsx","ControlledElement","validateNotEmpty","KeyPairConfig","privateKey","AuthenticationOptions","SnowflakeConfigElement","resourceID","watch","useFormContext","getResourceByID","useContext","ResourceGeneratorContext","findResource","content","authenticationType","container","Divider","optionLabelStyle"],"mappings":"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"}