{"version":3,"file":"index-d791384a.js","sources":["../../../../packages/illa-public-component/publicConfig/resource/initConfig/redis.ts","../../../../packages/illa-public-component/ResourceGenerator/components/ConfigElements/RedisConfigElement/index.tsx"],"sourcesContent":["import { RedisResource } from \"@illa-public/public-types\"\n\nexport const RedisResourceInitial: RedisResource = {\n  databaseIndex: 0,\n  databasePassword: \"\",\n  databaseUsername: \"\",\n  host: \"\",\n  port: \"6379\",\n  ssl: false,\n}\n","import { RedisResourceInitial } from \"@illa-public/public-configs\"\nimport { RedisResource, Resource } from \"@illa-public/public-types\"\nimport { TextLink } from \"@illa-public/text-link\"\nimport { isCloudVersion } from \"@illa-public/utils\"\nimport { FC, useCallback, useContext, useMemo, useState } from \"react\"\nimport { Controller, useFormContext } from \"react-hook-form\"\nimport { Trans, useTranslation } from \"react-i18next\"\nimport { Alert, Button, Divider, Input, getColor } from \"@illa-design/react\"\nimport { ResourceGeneratorContext } from \"../../../provider\"\nimport { isContainLocalPath, validateNotEmpty } from \"../../../utils\"\nimport { ControlledElement } from \"../../ControlledElement\"\nimport { ControlledType } from \"../../ControlledElement/interface\"\nimport { hostInputContainer } from \"../../ControlledElement/style\"\nimport {\n  applyConfigItemLabelText,\n  configItem,\n  configItemTip,\n  connectType,\n  connectTypeStyle,\n  container,\n  labelContainer,\n  optionLabelStyle,\n} from \"../style\"\nimport { RedisLikeConfigElementProps } from \"./interface\"\n\nfunction parseDatabaseConnectionString(\n  connectionString: string,\n): Omit<RedisResource, \"ssl\" | \"databaseIndex\"> | undefined {\n  const regex = /^redis:\\/\\/(.*):(.*)@(.*?)(?::(\\d+))?$/\n  const match = connectionString.match(regex)\n\n  if (!match || match.length !== 5) {\n    return undefined\n  }\n\n  const [, databaseUsername, databasePassword, host, port] = match\n\n  return {\n    databaseUsername,\n    databasePassword,\n    host,\n    port: port ?? 80,\n  }\n}\n\nconst checkIsValidConnectionString = (connectionString: string) => {\n  const pattern = /^redis:\\/\\/(.*):(.*)@(.*?)(?::(\\d+))?$/\n  return pattern.test(connectionString)\n}\n\nconst RedisConfigElement: FC<RedisLikeConfigElementProps> = (props) => {\n  const { resourceID, resourceType } = props\n  const { t } = useTranslation()\n  const { control, setValue } = useFormContext()\n  const { getResourceByID } = useContext(ResourceGeneratorContext)\n  const findResource = getResourceByID(resourceID)\n\n  let content: RedisResource\n  if (findResource === undefined) {\n    content = RedisResourceInitial\n  } else {\n    content = (findResource as Resource<RedisResource>).content\n  }\n\n  const [showAlert, setShowAlert] = useState<boolean>(false)\n\n  const userNameOrPassword = useMemo(() => {\n    return {\n      title: t(\"editor.action.resource.db.label.username_password\"),\n      controlledType: [\"input\", \"password\"] as ControlledType[],\n      name: [\"databaseUsername\", \"databasePassword\"],\n      defaultValue: [content.databaseUsername, content.databasePassword],\n      placeholders: [\n        t(\"editor.action.resource.db.placeholder.username\"),\n        t(\"editor.action.resource.db.placeholder.password\"),\n      ],\n    }\n  }, [content.databasePassword, content.databaseUsername, t])\n\n  const handleHostValidate = useCallback(\n    (value: string) => {\n      const isShowAlert = isContainLocalPath(value ?? \"\")\n      if (isShowAlert !== showAlert) {\n        setShowAlert(isShowAlert)\n      }\n      return true\n    },\n    [showAlert],\n  )\n\n  return (\n    <>\n      <div css={container}>\n        <ControlledElement\n          controlledType=\"input\"\n          isRequired\n          title={t(\"editor.action.resource.db.label.name\")}\n          control={control}\n          defaultValue={findResource?.resourceName ?? \"\"}\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          placeholders={[t(\"editor.action.resource.db.placeholder.name\")]}\n          name=\"resourceName\"\n          tips={t(\"editor.action.resource.restapi.tip.name\")}\n        />\n        <Divider\n          direction=\"horizontal\"\n          ml=\"24px\"\n          mr=\"24px\"\n          mt=\"8px\"\n          mb=\"8px\"\n          w=\"unset\"\n        />\n        <div css={optionLabelStyle}>\n          {t(\"editor.action.resource.db.title.general_option\")}\n        </div>\n        <Controller\n          control={control}\n          defaultValue=\"\"\n          rules={{\n            required: false,\n          }}\n          render={({ field: { value, onChange, onBlur } }) => (\n            <div css={configItem}>\n              <div css={labelContainer}>\n                <span\n                  css={applyConfigItemLabelText(getColor(\"grayBlue\", \"02\"))}\n                >\n                  {t(\"editor.action.form.option.neon.connection_string\")}\n                </span>\n              </div>\n              <div css={hostInputContainer}>\n                <Input\n                  onBlur={onBlur}\n                  onChange={onChange}\n                  error={!checkIsValidConnectionString(value) && value !== \"\"}\n                  value={value}\n                  colorScheme=\"techPurple\"\n                  placeholder=\"redis://myuser:mypassword@localhost:6379\"\n                />\n                <Button\n                  disabled={!checkIsValidConnectionString(value)}\n                  onClick={() => {\n                    const db = parseDatabaseConnectionString(value)\n                    if (db !== undefined) {\n                      setValue(\"host\", db.host)\n                      setValue(\"port\", db.port)\n                      setValue(\"databaseUsername\", db.databaseUsername)\n                      setValue(\"databasePassword\", db.databasePassword)\n                      onChange(\"\")\n                    }\n                  }}\n                  colorScheme=\"techPurple\"\n                  h=\"32px\"\n                >\n                  {t(\"editor.action.form.option.neon.parse\")}\n                </Button>\n              </div>\n            </div>\n          )}\n          name=\"connectionString\"\n        />\n        <ControlledElement\n          defaultValue={[content.host, content.port]}\n          title={t(\"editor.action.resource.db.label.hostname_port\")}\n          control={control}\n          rules={[\n            {\n              required: true,\n              validate: handleHostValidate,\n            },\n            {\n              required: true,\n            },\n          ]}\n          isRequired\n          controlledType={[\"input\", \"number\"]}\n          name={[\"host\", \"port\"]}\n          placeholders={[\n            t(\"editor.action.resource.db.placeholder.hostname\"),\n            \"6379\",\n          ]}\n          styles={[\n            {\n              flex: 4,\n            },\n            {\n              flex: 1,\n            },\n          ]}\n        />\n        {showAlert && (\n          <ControlledElement\n            defaultValue=\"\"\n            name=\"\"\n            title=\"\"\n            controlledType=\"none\"\n            control={control}\n            tips={\n              <Alert\n                title={t(\"editor.action.form.tips.connect_to_local.title.tips\")}\n                closable={false}\n                content={\n                  isCloudVersion ? (\n                    <Trans\n                      i18nKey=\"editor.action.form.tips.connect_to_local.cloud\"\n                      t={t}\n                      components={[\n                        <TextLink\n                          key=\"editor.action.form.tips.connect_to_local.cloud\"\n                          onClick={() => {\n                            window.open(\n                              \"https://www.illacloud.com/docs/illa-cli\",\n                              \"_blank\",\n                            )\n                          }}\n                        />,\n                      ]}\n                    />\n                  ) : (\n                    t(\"editor.action.form.tips.connect_to_local.selfhost\")\n                  )\n                }\n              />\n            }\n          />\n        )}\n        {resourceType === \"redis\" && (\n          <ControlledElement\n            title={t(\"editor.action.resource.db.label.database_index\")}\n            defaultValue={content.databaseIndex}\n            name=\"databaseIndex\"\n            placeholders={[\n              t(\"editor.action.resource.db.placeholder.database_index\"),\n            ]}\n            controlledType=\"number\"\n            control={control}\n          />\n        )}\n        <ControlledElement\n          title={userNameOrPassword.title}\n          controlledType={userNameOrPassword.controlledType}\n          control={control}\n          defaultValue={userNameOrPassword.defaultValue}\n          name={userNameOrPassword.name}\n          placeholders={userNameOrPassword.placeholders}\n        />\n        {isCloudVersion && (\n          <>\n            <div css={configItemTip}>\n              {t(\"editor.action.resource.db.tip.username_password\")}\n            </div>\n            <div css={connectType}>\n              <div css={labelContainer}>\n                <span\n                  css={applyConfigItemLabelText(getColor(\"grayBlue\", \"02\"))}\n                >\n                  {t(\"editor.action.resource.db.label.connect_type\")}\n                </span>\n              </div>\n              <span css={connectTypeStyle}>\n                {t(\"editor.action.resource.db.tip.connect_type\")}\n              </span>\n            </div>\n          </>\n        )}\n        <Divider\n          direction=\"horizontal\"\n          ml=\"24px\"\n          mr=\"24px\"\n          mt=\"8px\"\n          mb=\"8px\"\n          w=\"unset\"\n        />\n        <div css={optionLabelStyle}>\n          {t(\"editor.action.resource.db.title.advanced_option\")}\n        </div>\n        <ControlledElement\n          title={t(\"editor.action.resource.db.label.ssl_options\")}\n          control={control}\n          defaultValue={content.ssl}\n          controlledType=\"switch\"\n          name=\"ssl\"\n          contentLabel={t(\"editor.action.resource.db.tip.ssl_options\")}\n        />\n      </div>\n    </>\n  )\n}\n\nRedisConfigElement.displayName = \"RedisConfigElement\"\nexport default RedisConfigElement\n"],"names":["RedisResourceInitial","parseDatabaseConnectionString","connectionString","regex","match","databaseUsername","databasePassword","host","port","checkIsValidConnectionString","RedisConfigElement","props","resourceID","resourceType","t","useTranslation","control","setValue","useFormContext","getResourceByID","useContext","ResourceGeneratorContext","findResource","content","showAlert","setShowAlert","useState","userNameOrPassword","useMemo","handleHostValidate","useCallback","value","isShowAlert","isContainLocalPath","jsx","Fragment","jsxs","container","ControlledElement","validateNotEmpty","Divider","optionLabelStyle","Controller","onChange","onBlur","configItem","labelContainer","applyConfigItemLabelText","getColor","hostInputContainer","Input","Button","db","Alert","isCloudVersion"],"mappings":"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"}