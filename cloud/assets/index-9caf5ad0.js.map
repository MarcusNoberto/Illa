{"version":3,"file":"index-9caf5ad0.js","sources":["../../../../packages/illa-public-component/ResourceGenerator/components/ConfigElements/MysqlLikeConfigElement/constants.ts","../../../../packages/illa-public-component/ResourceGenerator/components/ConfigElements/MysqlLikeConfigElement/index.tsx"],"sourcesContent":["export const tiDBServertCertDefaultValue = `-----BEGIN CERTIFICATE-----\nMIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw\nTzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh\ncmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4\nWhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu\nZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY\nMTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc\nh77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+\n0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U\nA5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW\nT8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH\nB5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC\nB5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv\nKBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn\nOlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn\njh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw\nqHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI\nrU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV\nHRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq\nhkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL\nubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ\n3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK\nNFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5\nORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur\nTkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC\njNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc\noyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq\n4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA\nmRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d\nemyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc=\n-----END CERTIFICATE-----`\n","import { MysqlLikeResource, Resource } from \"@illa-public/public-types\"\nimport { TextLink } from \"@illa-public/text-link\"\nimport { isCloudVersion } from \"@illa-public/utils\"\nimport { FC, useContext, useMemo } from \"react\"\nimport { Controller, useFormContext } from \"react-hook-form\"\nimport { Trans, useTranslation } from \"react-i18next\"\nimport { Alert, Button, Divider, Input, getColor } from \"@illa-design/react\"\nimport { ResourceGeneratorContext } from \"../../../provider\"\nimport { isContainLocalPath, validateNotEmpty } from \"../../../utils\"\nimport { ControlledElement } from \"../../ControlledElement\"\nimport { hostInputContainer } from \"../../ControlledElement/style\"\nimport {\n  applyConfigItemLabelText,\n  configItem,\n  configItemTip,\n  connectType,\n  connectTypeStyle,\n  container,\n  labelContainer,\n  optionLabelStyle,\n} from \"../style\"\nimport { tiDBServertCertDefaultValue } from \"./constants\"\nimport { MysqlLikeConfigElementProps } from \"./interface\"\n\nconst getResourceDefaultPort = (resourceType: string) => {\n  switch (resourceType) {\n    case \"hydra\":\n    case \"postgresql\":\n    case \"supabasedb\":\n      return \"5432\"\n    case \"mysql\":\n    case \"mariadb\":\n      return \"3306\"\n    case \"tidb\":\n      return \"4000\"\n    default:\n      return \"3306\"\n  }\n}\n\nconst checkIsValidConnectionString = (connectionString: string) => {\n  const pattern = /^(.*):\\/\\/(.*):(.*)@(.*?)(?::(\\d+))?\\/(.*)$/\n  return pattern.test(connectionString)\n}\n\nfunction parseDatabaseConnectionString(\n  connectionString: string,\n): Omit<MysqlLikeResource, \"ssl\"> | undefined {\n  const regex = /^(.*):\\/\\/(.*):(.*)@(.*?)(?::(\\d+))?\\/(.*)$/\n\n  const match = connectionString.match(regex)\n  if (!match) return undefined\n\n  return {\n    databaseUsername: match[2],\n    databasePassword: match[3],\n    host: match[4],\n    port: match[5] ?? 80,\n    databaseName: match[6],\n  }\n}\n\nconst MysqlLikeConfigElement: FC<MysqlLikeConfigElementProps> = (props) => {\n  const { resourceType, resourceID } = props\n\n  const { t } = useTranslation()\n  const { control, setValue, watch } = useFormContext()\n\n  const { getResourceByID } = useContext(ResourceGeneratorContext)\n  const findResource = getResourceByID(\n    resourceID,\n  ) as Resource<MysqlLikeResource>\n\n  const sslDefaultValue =\n    findResource?.content.ssl.ssl ??\n    (resourceType === \"tidb\" || resourceType === \"hydra\")\n  const serverCertDefaultValue =\n    findResource?.content.ssl.serverCert ??\n    (resourceType === \"tidb\" || resourceType === \"hydra\"\n      ? tiDBServertCertDefaultValue\n      : \"\")\n\n  const serverCertTip = useMemo(() => {\n    return resourceType === \"tidb\" || resourceType === \"hydra\" ? (\n      <Trans\n        i18nKey=\"editor.action.form.tips.tidb.ca_certificate\"\n        t={t}\n        components={[\n          <TextLink\n            key=\"ca-link\"\n            onClick={() => {\n              if (resourceType === \"tidb\") {\n                window.open(\n                  \"https://docs.pingcap.com/tidbcloud/tidb-cloud-tls-connect-to-dedicated-tier\",\n                  \"_blank\",\n                )\n              } else if (resourceType === \"hydra\") {\n                window.open(\n                  \"https://docs.hydra.so/cloud-warehouse-operations/tls\",\n                  \"_blank\",\n                )\n              }\n            }}\n          />,\n        ]}\n      />\n    ) : (\n      \"\"\n    )\n  }, [resourceType, t])\n\n  const hostValue = watch(\"host\")\n  const showAlert = isContainLocalPath(hostValue ?? \"\")\n  const sslOpenWatch = watch(\"ssl\", sslDefaultValue)\n\n  const handleDocLinkClick = () =>\n    window.open(\"https://www.illacloud.com/docs/illa-cli\", \"_blank\")\n\n  return (\n    <>\n      <div css={container}>\n        <ControlledElement\n          controlledType=\"input\"\n          isRequired\n          title={t(\"editor.action.resource.db.label.name\")}\n          control={control}\n          defaultValue={findResource?.resourceName ?? \"\"}\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          placeholders={[t(\"editor.action.resource.db.placeholder.name\")]}\n          name=\"resourceName\"\n          tips={t(\"editor.action.resource.restapi.tip.name\")}\n        />\n        <Divider\n          direction=\"horizontal\"\n          ml=\"24px\"\n          mr=\"24px\"\n          mt=\"8px\"\n          mb=\"8px\"\n          w=\"unset\"\n        />\n        <div css={optionLabelStyle}>\n          {t(\"editor.action.resource.db.title.general_option\")}\n        </div>\n        <Controller\n          control={control}\n          defaultValue=\"\"\n          rules={{\n            required: false,\n          }}\n          render={({ field: { value, onChange, onBlur } }) => (\n            <div css={configItem}>\n              <div css={labelContainer}>\n                <span\n                  css={applyConfigItemLabelText(getColor(\"grayBlue\", \"02\"))}\n                >\n                  {t(\"editor.action.form.option.neon.connection_string\")}\n                </span>\n              </div>\n              <div css={hostInputContainer}>\n                <Input\n                  onBlur={onBlur}\n                  onChange={onChange}\n                  error={!checkIsValidConnectionString(value) && value !== \"\"}\n                  value={value}\n                  colorScheme=\"techPurple\"\n                  placeholder=\"xxxxxx://myuser:mypassword@localhost:5432/mydb\"\n                />\n                <Button\n                  disabled={!checkIsValidConnectionString(value)}\n                  onClick={() => {\n                    const db = parseDatabaseConnectionString(value)\n                    if (db !== undefined) {\n                      setValue(\"host\", db.host)\n                      setValue(\"port\", db.port)\n                      setValue(\"databaseName\", db.databaseName)\n                      setValue(\"databaseUsername\", db.databaseUsername)\n                      setValue(\"databasePassword\", db.databasePassword)\n                      onChange(\"\")\n                    }\n                  }}\n                  colorScheme=\"techPurple\"\n                  h=\"32px\"\n                >\n                  {t(\"editor.action.form.option.neon.parse\")}\n                </Button>\n              </div>\n            </div>\n          )}\n          name=\"connectionString\"\n        />\n        <ControlledElement\n          title={t(\"editor.action.resource.db.label.hostname_port\")}\n          defaultValue={[\n            findResource?.content.host,\n            findResource?.content.port ?? getResourceDefaultPort(resourceType),\n          ]}\n          name={[\"host\", \"port\"]}\n          controlledType={[\"input\", \"number\"]}\n          control={control}\n          isRequired\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n            {\n              required: true,\n            },\n          ]}\n          styles={[\n            {\n              flex: 4,\n            },\n            {\n              flex: 1,\n            },\n          ]}\n          placeholders={[\n            t(\"editor.action.resource.db.placeholder.hostname\"),\n            getResourceDefaultPort(resourceType),\n          ]}\n        />\n        {showAlert && (\n          <ControlledElement\n            defaultValue=\"\"\n            name=\"\"\n            title=\"\"\n            controlledType=\"none\"\n            control={control}\n            tips={\n              <Alert\n                title={t(\"editor.action.form.tips.connect_to_local.title.tips\")}\n                closable={false}\n                content={\n                  isCloudVersion ? (\n                    <Trans\n                      i18nKey=\"editor.action.form.tips.connect_to_local.cloud\"\n                      t={t}\n                      components={[\n                        <TextLink\n                          key=\"editor.action.form.tips.connect_to_local.cloud\"\n                          onClick={handleDocLinkClick}\n                        />,\n                      ]}\n                    />\n                  ) : (\n                    t(\"editor.action.form.tips.connect_to_local.selfhost\")\n                  )\n                }\n              />\n            }\n          />\n        )}\n        <ControlledElement\n          title={t(\"editor.action.resource.db.label.database\")}\n          defaultValue={findResource?.content.databaseName}\n          name=\"databaseName\"\n          controlledType=\"input\"\n          control={control}\n          isRequired\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          placeholders={[t(\"editor.action.resource.db.placeholder.database\")]}\n        />\n        <ControlledElement\n          title={t(\"editor.action.resource.db.label.username_password\")}\n          defaultValue={[\n            findResource?.content.databaseUsername,\n            findResource?.content.databasePassword,\n          ]}\n          name={[\"databaseUsername\", \"databasePassword\"]}\n          controlledType={[\"input\", \"password\"]}\n          control={control}\n          isRequired\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n            {\n              required: true,\n            },\n          ]}\n          placeholders={[\n            t(\"editor.action.resource.db.placeholder.username\"),\n            t(\"editor.action.resource.db.placeholder.password\"),\n          ]}\n        />\n        {isCloudVersion && (\n          <>\n            <div css={configItemTip}>\n              {t(\"editor.action.resource.db.tip.username_password\")}\n            </div>\n            <div css={connectType}>\n              <div css={labelContainer}>\n                <span\n                  css={applyConfigItemLabelText(getColor(\"grayBlue\", \"02\"))}\n                >\n                  {t(\"editor.action.resource.db.label.connect_type\")}\n                </span>\n              </div>\n              <span css={connectTypeStyle}>\n                {t(\"editor.action.resource.db.tip.connect_type\")}\n              </span>\n            </div>\n          </>\n        )}\n        <Divider\n          direction=\"horizontal\"\n          ml=\"24px\"\n          mr=\"24px\"\n          mt=\"8px\"\n          mb=\"8px\"\n          w=\"unset\"\n        />\n        <div css={optionLabelStyle}>\n          {t(\"editor.action.resource.db.title.advanced_option\")}\n        </div>\n        <ControlledElement\n          controlledType={[\"switch\"]}\n          title={t(\"editor.action.resource.db.label.ssl_options\")}\n          control={control}\n          defaultValue={sslDefaultValue}\n          name=\"ssl\"\n          contentLabel={t(\"editor.action.resource.db.tip.ssl_options\")}\n        />\n        {sslOpenWatch && (\n          <>\n            <ControlledElement\n              controlledType={[\"textarea\"]}\n              title={t(\"editor.action.resource.db.label.ca_certificate\")}\n              isRequired\n              rules={[\n                {\n                  validate: validateNotEmpty,\n                },\n              ]}\n              control={control}\n              defaultValue={serverCertDefaultValue}\n              name=\"serverCert\"\n              placeholders={[\n                t(\"editor.action.resource.db.placeholder.certificate\"),\n              ]}\n              tips={serverCertTip}\n            />\n            <ControlledElement\n              controlledType={[\"textarea\"]}\n              title={t(\"editor.action.resource.db.label.client_key\")}\n              control={control}\n              defaultValue={findResource?.content.ssl.clientKey}\n              name=\"clientKey\"\n              placeholders={[\n                t(\"editor.action.resource.db.placeholder.certificate\"),\n              ]}\n            />\n            <ControlledElement\n              controlledType={[\"textarea\"]}\n              title={t(\"editor.action.resource.db.label.client_certificate\")}\n              control={control}\n              defaultValue={findResource?.content.ssl.clientCert}\n              name=\"clientCert\"\n              placeholders={[\n                t(\"editor.action.resource.db.placeholder.certificate\"),\n              ]}\n            />\n          </>\n        )}\n      </div>\n    </>\n  )\n}\n\nMysqlLikeConfigElement.displayName = \"MysqlConfigElement\"\nexport default MysqlLikeConfigElement\n"],"names":["tiDBServertCertDefaultValue","getResourceDefaultPort","resourceType","checkIsValidConnectionString","connectionString","parseDatabaseConnectionString","regex","match","MysqlLikeConfigElement","props","resourceID","useTranslation","control","setValue","watch","useFormContext","getResourceByID","useContext","ResourceGeneratorContext","findResource","sslDefaultValue","serverCertDefaultValue","serverCertTip","useMemo","jsx","Trans","TextLink","hostValue","showAlert","isContainLocalPath","sslOpenWatch","Fragment","jsxs","container","ControlledElement","validateNotEmpty","Divider","optionLabelStyle","Controller","value","onChange","onBlur","configItem","labelContainer","applyConfigItemLabelText","getColor","hostInputContainer","Input","Button","db","Alert","isCloudVersion"],"mappings":"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"}