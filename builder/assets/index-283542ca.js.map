{"version":3,"file":"index-283542ca.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/MenuSetter/MenuOptionSetter/style.ts","../../src/page/App/components/InspectPanel/PanelSetters/MenuSetter/MenuOptionSetter/setterMenuItem.tsx","../../src/page/App/components/InspectPanel/PanelSetters/MenuSetter/MenuOptionSetter/newButton.tsx","../../src/page/App/components/InspectPanel/PanelSetters/MenuSetter/MenuOptionSetter/setterSubMenu.tsx","../../src/page/App/components/InspectPanel/PanelSetters/MenuSetter/MenuOptionSetter/index.tsx"],"sourcesContent":["import { css } from \"@emotion/react\"\nimport { getColor, globalColor, illaPrefix } from \"@illa-design/react\"\n\nexport const menuOptionSetterContainerStyle = css`\n  box-sizing: border-box;\n  margin: 8px 16px;\n  min-height: 264px;\n  border-radius: 8px;\n  border: 1px solid ${getColor(\"grayBlue\", \"08\")};\n  overflow: hidden;\n`\n\nexport const optionListHeaderStyle = css`\n  width: 100%;\n  background-color: ${globalColor(`--${illaPrefix}-grayBlue-09`)};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 40px;\n  color: ${getColor(\"grayBlue\", \"02\")};\n  font-weight: 500;\n  box-sizing: border-box;\n  padding: 0 8px 0 16px;\n`\n\nexport const optionSubItemStyle = css`\n  cursor: pointer;\n  padding: 0 8px;\n  font-size: 14px;\n  height: 24px;\n  display: inline-flex;\n  color: ${getColor(\"techPurple\", \"03\")};\n  align-items: center;\n  flex-direction: row;\n`\n\nexport const setterSubMenuAllContainerStyle = css`\n  display: flex;\n  flex-direction: column;\n`\n\nexport const setterSubMenuContainerStyle = css`\n  height: 40px;\n  width: 100%;\n  cursor: pointer;\n  display: flex;\n  padding-right: 8px;\n  flex-direction: row;\n  box-sizing: border-box;\n  align-items: center;\n  .dragIcon {\n    visibility: hidden;\n  }\n  &:hover {\n    .dragIcon {\n      visibility: visible;\n    }\n  }\n`\n\nexport const setterMenuItemContainerStyle = css`\n  height: 40px;\n  cursor: pointer;\n  width: 100%;\n  padding-left: 16px;\n  padding-right: 8px;\n  display: flex;\n  flex-direction: row;\n  box-sizing: border-box;\n  align-items: center;\n  .dragIcon {\n    visibility: hidden;\n  }\n  &:hover {\n    .dragIcon {\n      visibility: visible;\n    }\n  }\n`\n\nexport const setterSubMenuLabelStyle = css`\n  font-weight: 400;\n  width: 100%;\n  height: 100%;\n  line-height: 40px;\n  flex-grow: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  color: ${getColor(\"grayBlue\", \"02\")};\n  font-size: 14px;\n`\n\nexport const setterDivStyle = css`\n  flex-grow: 1;\n`\n\nexport const removeNativeStyle = css`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n`\n\nexport const deleteButtonContainer = css`\n  padding: 0 16px 16px 16px;\n`\n","import { useSortable } from \"@dnd-kit/sortable\"\nimport { CSS } from \"@dnd-kit/utilities\"\nimport { FC, useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { Button, DragPointIcon, Trigger, getColor } from \"@illa-design/react\"\nimport { SetterMenuItemProps } from \"@/page/App/components/InspectPanel/PanelSetters/MenuSetter/MenuOptionSetter/interface\"\nimport {\n  deleteButtonContainer,\n  setterMenuItemContainerStyle,\n  setterSubMenuLabelStyle,\n} from \"@/page/App/components/InspectPanel/PanelSetters/MenuSetter/MenuOptionSetter/style\"\nimport { BaseModal } from \"@/page/App/components/InspectPanel/PanelSetters/PublicComponent/Modal\"\n\nexport const SetterMenuItem: FC<SetterMenuItemProps> = (props) => {\n  const { id, label, onDelete, attrPath, childrenSetter, widgetDisplayName } =\n    props\n\n  const { attributes, listeners, setNodeRef, transform, transition } =\n    useSortable({ id })\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  }\n\n  const [triggerVisible, setTriggerVisible] = useState(false)\n\n  const { t } = useTranslation()\n\n  return (\n    <div\n      css={setterMenuItemContainerStyle}\n      ref={setNodeRef}\n      style={style}\n      {...attributes}\n    >\n      <DragPointIcon\n        className=\"dragIcon\"\n        fs=\"16px\"\n        c={getColor(\"grayBlue\", \"04\")}\n        {...listeners}\n      />\n      <Trigger\n        withoutPadding\n        colorScheme=\"white\"\n        trigger=\"click\"\n        onVisibleChange={(visible) => {\n          setTriggerVisible(visible)\n        }}\n        popupVisible={triggerVisible}\n        content={\n          <BaseModal\n            title={label as string}\n            attrPath={`${attrPath}`}\n            widgetDisplayName={widgetDisplayName}\n            childrenSetter={childrenSetter}\n            handleCloseModal={() => {\n              setTriggerVisible(false)\n            }}\n            extraElement={\n              <div css={deleteButtonContainer}>\n                <Button\n                  w=\"100%\"\n                  variant=\"light\"\n                  colorScheme=\"red\"\n                  onClick={() => {\n                    onDelete()\n                  }}\n                >\n                  {t(\"editor.inspect.setter_content.menu_setter.delete\")}\n                </Button>\n              </div>\n            }\n          />\n        }\n        showArrow={false}\n        position=\"left\"\n        clickOutsideToClose\n      >\n        <span css={setterSubMenuLabelStyle}>{label}</span>\n      </Trigger>\n    </div>\n  )\n}\n\nSetterMenuItem.displayName = \"SetterMenuItem\"\n","import { FC } from \"react\"\nimport { AddIcon, Button } from \"@illa-design/react\"\nimport { NewButtonProps } from \"@/page/App/components/InspectPanel/PanelSetters/MenuSetter/MenuOptionSetter/interface\"\n\nexport const NewButton: FC<NewButtonProps> = (props) => {\n  const { title, ...otherProps } = props\n\n  return (\n    <Button\n      pd={\"1px 8px\"}\n      variant={\"text\"}\n      colorScheme={\"techPurple\"}\n      leftIcon={<AddIcon size={\"14px\"} />}\n      {...otherProps}\n    >\n      {title}\n    </Button>\n  )\n}\n\nNewButton.displayName = \"NewButton\"\n","import { useSortable } from \"@dnd-kit/sortable\"\nimport { CSS } from \"@dnd-kit/utilities\"\nimport { FC, useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { Button, DragPointIcon, Trigger, getColor } from \"@illa-design/react\"\nimport { SetterSubMenuProps } from \"@/page/App/components/InspectPanel/PanelSetters/MenuSetter/MenuOptionSetter/interface\"\nimport { NewButton } from \"@/page/App/components/InspectPanel/PanelSetters/MenuSetter/MenuOptionSetter/newButton\"\nimport {\n  deleteButtonContainer,\n  setterSubMenuAllContainerStyle,\n  setterSubMenuContainerStyle,\n  setterSubMenuLabelStyle,\n} from \"@/page/App/components/InspectPanel/PanelSetters/MenuSetter/MenuOptionSetter/style\"\nimport { BaseModal } from \"@/page/App/components/InspectPanel/PanelSetters/PublicComponent/Modal\"\n\nexport const SetterSubMenu: FC<SetterSubMenuProps> = (props) => {\n  const {\n    id,\n    label,\n    value,\n    onDelete,\n    onClickAdd,\n    children,\n    attrPath,\n    childrenSetter,\n    widgetDisplayName,\n    onClick,\n  } = props\n\n  const { t } = useTranslation()\n\n  const { attributes, listeners, setNodeRef, transform, transition } =\n    useSortable({ id })\n\n  const style = {\n    transform: CSS.Transform.toString(\n      transform\n        ? {\n            y: transform?.y ?? 0,\n            x: transform?.x ?? 0,\n            scaleX: 1,\n            scaleY: 1,\n          }\n        : null,\n    ),\n    transition,\n  }\n\n  const [triggerVisible, setTriggerVisible] = useState(false)\n\n  return (\n    <div\n      css={setterSubMenuAllContainerStyle}\n      ref={setNodeRef}\n      style={style}\n      onClick={onClick}\n      {...attributes}\n    >\n      <div css={setterSubMenuContainerStyle}>\n        <DragPointIcon\n          className=\"dragIcon\"\n          fs=\"16px\"\n          c={getColor(\"grayBlue\", \"04\")}\n          {...listeners}\n        />\n        <Trigger\n          withoutPadding\n          colorScheme=\"white\"\n          trigger=\"click\"\n          onVisibleChange={(visible) => {\n            setTriggerVisible(visible)\n          }}\n          popupVisible={triggerVisible}\n          content={\n            <BaseModal\n              title={label as string}\n              attrPath={`${attrPath}`}\n              widgetDisplayName={widgetDisplayName}\n              childrenSetter={childrenSetter}\n              handleCloseModal={() => {\n                setTriggerVisible(false)\n              }}\n              extraElement={\n                <div css={deleteButtonContainer}>\n                  <Button\n                    w=\"100%\"\n                    variant=\"light\"\n                    colorScheme=\"red\"\n                    onClick={() => {\n                      onDelete()\n                    }}\n                  >\n                    {t(\"editor.inspect.setter_content.menu_setter.delete\")}\n                  </Button>\n                </div>\n              }\n            />\n          }\n          showArrow={false}\n          position=\"left\"\n          clickOutsideToClose\n        >\n          <span css={setterSubMenuLabelStyle}>{label}</span>\n        </Trigger>\n        <NewButton\n          title={t(\"editor.inspect.setter_content.menu_setter.sub\")}\n          onClick={() => {\n            onClickAdd(value)\n          }}\n        />\n      </div>\n      {children}\n    </div>\n  )\n}\n\nSetterSubMenu.displayName = \"SetterSubMenu\"\n","import {\n  DndContext,\n  KeyboardSensor,\n  PointerSensor,\n  closestCenter,\n  useSensor,\n  useSensors,\n} from \"@dnd-kit/core\"\nimport {\n  restrictToVerticalAxis,\n  restrictToWindowEdges,\n} from \"@dnd-kit/modifiers\"\nimport {\n  SortableContext,\n  arrayMove,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from \"@dnd-kit/sortable\"\nimport { get, isString } from \"lodash-es\"\nimport { FC } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { v4 } from \"uuid\"\nimport { MenuItemProps, MenuItemType, SubMenuProps } from \"@illa-design/react\"\nimport { SetterMenuItem } from \"@/page/App/components/InspectPanel/PanelSetters/MenuSetter/MenuOptionSetter/setterMenuItem\"\nimport { SetterSubMenu } from \"@/page/App/components/InspectPanel/PanelSetters/MenuSetter/MenuOptionSetter/setterSubMenu\"\nimport { getExecutionResult } from \"@/redux/currentApp/executionTree/executionSelector\"\nimport { ColumnContainer } from \"../../DragMoveComponent/ColumnContainer\"\nimport { MenuOptionSetterProps } from \"./interface\"\n\nfunction getDifferentLabelFromValue(\n  values: MenuItemType[],\n  prefix: string,\n): string {\n  let label = `${prefix}${values.length}`\n  let plus = 0\n  while (values.find((item) => item.label === label)) {\n    plus++\n    label = `${prefix}${values.length + plus}`\n  }\n  return label\n}\n\nfunction getDifferentValueFromValue(\n  values: MenuItemType[],\n  prefix: string,\n  suffix: string,\n): string {\n  let value = `${prefix}${suffix}${values.length}`\n  let plus = 0\n  while (values.find((item) => item.value === value)) {\n    plus++\n    value = `${prefix}${suffix}${values.length + plus}`\n  }\n  return value\n}\n\nexport const MenuOptionSetter: FC<MenuOptionSetterProps> = (props) => {\n  const {\n    handleUpdateMultiAttrDSL,\n    attrName,\n    value,\n    childrenSetter,\n    widgetDisplayName,\n  } = props\n\n  const execResult = useSelector(getExecutionResult)\n  const executeValue = get(\n    execResult,\n    `${widgetDisplayName}.${attrName}`,\n    [],\n  ) as MenuItemType[]\n\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  )\n\n  return (\n    <ColumnContainer\n      attrName={attrName}\n      value={value}\n      handleUpdateMultiAttrDSL={handleUpdateMultiAttrDSL}\n      items={value.map((item) => item.id!)}\n      columnNum={value.length}\n      onClickNew={() => {\n        handleUpdateMultiAttrDSL?.({\n          [attrName]: [\n            ...value,\n            {\n              id: v4(),\n              label: getDifferentLabelFromValue(value, \"Menu \"),\n              value: getDifferentValueFromValue(value, \"\", \"menu\"),\n            },\n          ],\n        })\n      }}\n    >\n      {value.map((item, index) => (\n        <SetterSubMenu\n          id={item.id!}\n          key={item.id}\n          onDelete={() => {\n            const newValues: MenuItemProps[] = value.filter(\n              (_, i) => i !== index,\n            )\n            handleUpdateMultiAttrDSL?.({\n              [attrName]: newValues,\n            })\n          }}\n          value={item.value}\n          label={\n            isString(executeValue[index].label)\n              ? (executeValue[index].label as string)\n              : JSON.stringify(executeValue[index].label)\n          }\n          onClickAdd={() => {\n            const newValues = value.map((i) => {\n              if (i.value === item.value) {\n                if (\"subItems\" in i) {\n                  return {\n                    ...i,\n                    subItems: [\n                      ...(i.subItems ?? []),\n                      {\n                        id: v4(),\n                        label: getDifferentLabelFromValue(\n                          i.subItems!!,\n                          \"Sub Menu \",\n                        ),\n                        value: getDifferentValueFromValue(\n                          i.subItems!!,\n                          `${item.value}:`,\n                          \"subMenu\",\n                        ),\n                      },\n                    ],\n                  }\n                } else {\n                  return {\n                    ...i,\n                    subItems: [\n                      {\n                        id: v4(),\n                        label: \"Sub Menu 0\",\n                        value: `${item.value}:subMenu0`,\n                      },\n                    ],\n                  }\n                }\n              } else {\n                return i\n              }\n            })\n            handleUpdateMultiAttrDSL?.({\n              [attrName]: [...newValues],\n            })\n          }}\n          attrPath={`${attrName}.${index}`}\n          childrenSetter={childrenSetter}\n          widgetDisplayName={widgetDisplayName}\n        >\n          <DndContext\n            modifiers={[restrictToVerticalAxis, restrictToWindowEdges]}\n            sensors={sensors}\n            collisionDetection={closestCenter}\n            onDragEnd={(event) => {\n              const value = (item as SubMenuProps).subItems\n              if (value === undefined) {\n                return\n              }\n              const { active, over } = event\n              if (active && over && active.id !== over.id) {\n                const oldIndex = value.findIndex(\n                  (item) => item.id === active.id,\n                )\n                const newIndex = value.findIndex((item) => item.id === over.id)\n                const finalColumns = arrayMove(value, oldIndex, newIndex)\n                handleUpdateMultiAttrDSL?.({\n                  [`${attrName}.${index}.subItems`]: finalColumns,\n                })\n                return finalColumns\n              }\n            }}\n          >\n            <SortableContext\n              items={\n                (item as SubMenuProps).subItems?.map((child) => child.id!) ?? []\n              }\n              strategy={verticalListSortingStrategy}\n            >\n              {\"subItems\" in item &&\n                ((item as SubMenuProps).subItems?.length ?? 0) > 0 &&\n                (item as SubMenuProps).subItems?.map((child, i) => (\n                  <SetterMenuItem\n                    id={child.id!}\n                    key={child.id}\n                    onDelete={() => {\n                      const newValues: MenuItemProps[] = [...value]\n                      const newSubItems =\n                        item.subItems?.filter(\n                          (subItem, subIndex) => subIndex !== i,\n                        ) ?? []\n                      if (newSubItems.length !== 0) {\n                        newValues[index] = {\n                          ...item,\n                          subItems: newSubItems,\n                        } as SubMenuProps\n                      } else {\n                        const newItem = { ...item }\n                        delete newItem.subItems\n                        newValues[index] = newItem\n                      }\n                      handleUpdateMultiAttrDSL?.({\n                        [attrName]: newValues,\n                      })\n                    }}\n                    attrPath={`${attrName}.${index}.subItems.${i}`}\n                    childrenSetter={childrenSetter}\n                    widgetDisplayName={widgetDisplayName}\n                    label={\n                      isString(\n                        get(executeValue, `${index}.subItems.${i}.label`),\n                      )\n                        ? get(executeValue, `${index}.subItems.${i}.label`) ??\n                          \"\"\n                        : JSON.stringify(\n                            get(executeValue, `${index}.subItems.${i}.label`),\n                          )\n                    }\n                    value={child.value}\n                  />\n                ))}\n            </SortableContext>\n          </DndContext>\n        </SetterSubMenu>\n      ))}\n    </ColumnContainer>\n  )\n}\n\nMenuOptionSetter.displayName = \"MenuOptionSetter\"\nexport default MenuOptionSetter\n"],"names":["css","getColor","globalColor","illaPrefix","setterSubMenuAllContainerStyle","setterSubMenuContainerStyle","setterMenuItemContainerStyle","setterSubMenuLabelStyle","deleteButtonContainer","SetterMenuItem","props","id","label","onDelete","attrPath","childrenSetter","widgetDisplayName","attributes","listeners","setNodeRef","transform","transition","useSortable","style","CSS","triggerVisible","setTriggerVisible","useState","t","useTranslation","jsxs","jsx","DragPointIcon","Trigger","visible","BaseModal","Button","NewButton","title","otherProps","AddIcon","SetterSubMenu","value","onClickAdd","children","onClick","getDifferentLabelFromValue","values","prefix","plus","item","getDifferentValueFromValue","suffix","MenuOptionSetter","handleUpdateMultiAttrDSL","attrName","execResult","useSelector","getExecutionResult","executeValue","get","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","sortableKeyboardCoordinates","ColumnContainer","v4","index","newValues","_","i","isString","DndContext","restrictToVerticalAxis","restrictToWindowEdges","closestCenter","event","active","over","oldIndex","newIndex","finalColumns","arrayMove","SortableContext","_a","child","verticalListSortingStrategy","_b","_c","newSubItems","subItem","subIndex","newItem"],"mappings":"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"}