{"version":3,"file":"eventWidgetMethodSelect-a42ff0d1.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/SelectSetter/eventWidgetMethodSelect.tsx"],"sourcesContent":["import { get } from \"lodash-es\"\nimport { FC, useMemo } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { getWidgetExecutionResult } from \"@/redux/currentApp/executionTree/executionSelector\"\nimport { widgetBuilder } from \"@/widgetLibrary/widgetBuilder\"\nimport { BaseSelectSetterProps } from \"./interface\"\nimport SearchSelectSetter from \"./searchSelect\"\n\nconst EventWidgetMethodSelect: FC<BaseSelectSetterProps> = (props) => {\n  const { parentAttrName, value, widgetDisplayName, widgetOrAction } = props\n\n  const widgetDisplayNameMapProps = useSelector(getWidgetExecutionResult)\n  const selectedAction = useSelector(getCachedAction)\n  const selectedWidgetID = useMemo(() => {\n    if (widgetOrAction === \"WIDGET\") {\n      return get(\n        widgetDisplayNameMapProps,\n        `${widgetDisplayName}.${parentAttrName}.widgetID`,\n      )\n    } else {\n      return get(selectedAction, `content.${parentAttrName}.widgetID`)\n    }\n  }, [\n    widgetDisplayNameMapProps,\n    widgetDisplayName,\n    parentAttrName,\n    selectedAction,\n    widgetOrAction,\n  ])\n  const selectedWidgetType = useMemo(() => {\n    return get(widgetDisplayNameMapProps, `${selectedWidgetID}.$widgetType`)\n  }, [widgetDisplayNameMapProps, selectedWidgetID])\n  const finalOptions = useMemo(() => {\n    let tmpOptions: string[] = []\n    const eventHandlerConfig =\n      widgetBuilder(selectedWidgetType)?.eventHandlerConfig\n    if (eventHandlerConfig) {\n      tmpOptions = eventHandlerConfig.methods\n    }\n    return tmpOptions\n  }, [selectedWidgetType])\n\n  const finalValue = useMemo(() => {\n    const index = finalOptions.findIndex((option) => {\n      return option === value\n    })\n    if (index !== -1 && selectedWidgetType !== undefined) return value\n    return undefined\n  }, [finalOptions, value, selectedWidgetType])\n\n  return (\n    <SearchSelectSetter\n      {...props}\n      value={finalValue as string}\n      options={finalOptions}\n    />\n  )\n}\nEventWidgetMethodSelect.displayName = \"EventWidgetMethodSelect\"\nexport default EventWidgetMethodSelect\n"],"names":["EventWidgetMethodSelect","props","parentAttrName","value","widgetDisplayName","widgetOrAction","widgetDisplayNameMapProps","useSelector","getWidgetExecutionResult","selectedAction","getCachedAction","selectedWidgetID","useMemo","get","selectedWidgetType","finalOptions","tmpOptions","eventHandlerConfig","_a","widgetBuilder","finalValue","option","jsx","SearchSelectSetter"],"mappings":"mdASM,MAAAA,EAAsDC,GAAU,CACpE,KAAM,CAAE,eAAAC,EAAgB,MAAAC,EAAO,kBAAAC,EAAmB,eAAAC,GAAmBJ,EAE/DK,EAA4BC,EAAYC,CAAwB,EAChEC,EAAiBF,EAAYG,CAAe,EAC5CC,EAAmBC,EAAAA,QAAQ,IAC3BP,IAAmB,SACdQ,EACLP,EACA,GAAGF,CAAiB,IAAIF,CAAc,WAAA,EAGjCW,EAAIJ,EAAgB,WAAWP,CAAc,WAAW,EAEhE,CACDI,EACAF,EACAF,EACAO,EACAJ,CAAA,CACD,EACKS,EAAqBF,EAAAA,QAAQ,IAC1BC,EAAIP,EAA2B,GAAGK,CAAgB,cAAc,EACtE,CAACL,EAA2BK,CAAgB,CAAC,EAC1CI,EAAeH,EAAAA,QAAQ,IAAM,OACjC,IAAII,EAAuB,CAAA,EACrB,MAAAC,GACJC,EAAAC,EAAcL,CAAkB,IAAhC,YAAAI,EAAmC,mBACrC,OAAID,IACFD,EAAaC,EAAmB,SAE3BD,CAAA,EACN,CAACF,CAAkB,CAAC,EAEjBM,EAAaR,EAAAA,QAAQ,IAAM,CAI3B,GAHUG,EAAa,UAAWM,GAC7BA,IAAWlB,CACnB,IACa,IAAMW,IAAuB,OAAkB,OAAAX,CAE5D,EAAA,CAACY,EAAcZ,EAAOW,CAAkB,CAAC,EAG1C,OAAAQ,EAACC,EAAA,CACE,GAAGtB,EACJ,MAAOmB,EACP,QAASL,CAAA,CAAA,CAGf,EACAf,EAAwB,YAAc"}