{"version":3,"file":"chartKeysDynamicSelectSetter-a7262e2c.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/ChartSetter/chartKeysDynamicSelectSetter.tsx"],"sourcesContent":["import { get } from \"lodash-es\"\nimport { FC, useCallback, useMemo } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { ChartDatasetShape } from \"@/page/App/components/InspectPanel/PanelSetters/ChartSetter/chartDatasetsSetter/interface\"\nimport { CHART_PRESET_COLOR } from \"@/page/App/components/InspectPanel/PanelSetters/ChartSetter/chartDatasetsSetter/listItem\"\nimport { ChartDataSourceSetterProps } from \"@/page/App/components/InspectPanel/PanelSetters/ChartSetter/interface\"\nimport BaseDynamicSelect from \"@/page/App/components/InspectPanel/PanelSetters/SelectSetter/baseDynamicSelect\"\nimport { publicPaddingStyle } from \"@/page/App/components/InspectPanel/style\"\nimport {\n  getComponentMap,\n  searchComponentFromMap,\n} from \"@/redux/currentApp/components/componentsSelector\"\nimport { getExecutionResult } from \"@/redux/currentApp/executionTree/executionSelector\"\nimport { getExecutionError } from \"@/redux/currentApp/executionTree/executionSelector\"\nimport { RootState } from \"@/store\"\nimport { formatDataAsObject } from \"@/utils/formatData\"\nimport { isObject } from \"@/utils/typeHelper\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nconst ChartKeysDynamicSelectSetter: FC<ChartDataSourceSetterProps> = (\n  props,\n) => {\n  const {\n    widgetDisplayName,\n    attrName,\n    value,\n    labelName,\n    labelDesc,\n    panelConfig,\n    handleUpdateMultiAttrDSL,\n  } = props\n\n  const targetComponentProps = useSelector<RootState, Record<string, any>>(\n    (rootState) => {\n      const executionTree = getExecutionResult(rootState)\n      return get(executionTree, widgetDisplayName, {})\n    },\n  )\n\n  const insertValues = useSelector<RootState, Record<string, any>>(\n    (rootState) => {\n      const targetComponentNode = searchComponentFromMap(\n        getComponentMap(rootState),\n        widgetDisplayName,\n      )\n      if (!targetComponentNode) return {}\n      return targetComponentNode.props || {}\n    },\n  )\n\n  const isDataSourceDynamic = useMemo(() => {\n    const dataSourceMode = get(targetComponentProps, \"dataSourceMode\", \"select\")\n    return dataSourceMode === \"dynamic\"\n  }, [targetComponentProps])\n\n  const dataSources = useMemo(() => {\n    let originDataSources = get(targetComponentProps, \"dataSource\", [])\n    if (isDataSourceDynamic) {\n      originDataSources = get(targetComponentProps, \"dataSourceJS\", [])\n    }\n\n    return formatDataAsObject(originDataSources)\n  }, [isDataSourceDynamic, targetComponentProps])\n\n  const selectedOptions = useMemo(() => {\n    if (!isObject(dataSources)) return []\n    let options = Object.keys(dataSources).map((key) => key)\n    if (attrName === \"groupBy\" && value) {\n      options.unshift(\"—\")\n    }\n    return options\n  }, [attrName, dataSources, value])\n\n  const datasets: ChartDatasetShape[] = useMemo(() => {\n    return get(insertValues, \"datasets\", [])\n  }, [insertValues])\n\n  const generateNewDatasets = useCallback(\n    (isGroupBy: boolean) => {\n      if (!datasets.length) return []\n      if (isGroupBy) {\n        return datasets.map((dataset) => {\n          return {\n            ...dataset,\n            color: \"illa-preset\",\n          }\n        })\n      }\n      return datasets.map((dataset, index) => {\n        return {\n          ...dataset,\n          color: CHART_PRESET_COLOR[index % CHART_PRESET_COLOR.length],\n        }\n      })\n    },\n    [datasets],\n  )\n\n  const handleUpdateDsl = useCallback(\n    (attrName: string, newValue: any) => {\n      if (attrName === \"groupBy\") {\n        if ((!!value && !newValue) || (!value && !!newValue)) {\n          const newDatasets = generateNewDatasets(!!newValue)\n          handleUpdateMultiAttrDSL?.({\n            datasets: newDatasets,\n            [attrName]: newValue === \"—\" ? undefined : newValue,\n          })\n        } else {\n          handleUpdateMultiAttrDSL?.({\n            [attrName]: newValue === \"—\" ? undefined : newValue,\n          })\n        }\n      } else {\n        handleUpdateMultiAttrDSL?.({\n          [attrName]: newValue,\n        })\n      }\n    },\n    [generateNewDatasets, handleUpdateMultiAttrDSL, value],\n  )\n\n  const executionErrors = useSelector(getExecutionError)\n  const isError = useMemo(() => {\n    return (\n      (executionErrors[`${widgetDisplayName}.${attrName}JS`] ?? [])?.length > 0\n    )\n  }, [attrName, executionErrors, widgetDisplayName])\n\n  const isDynamic = useMemo(() => {\n    const dataSourceMode = get(\n      targetComponentProps,\n      `${widgetDisplayName}.${attrName}JS`,\n      \"select\",\n    )\n    return dataSourceMode === \"dynamic\"\n  }, [attrName, targetComponentProps, widgetDisplayName])\n\n  const finalValue = useMemo(() => {\n    return get(panelConfig, attrName, \"\")\n  }, [attrName, panelConfig])\n\n  const handleClickFxButton = useCallback(() => {\n    const isInOption = selectedOptions.some((value) => value === finalValue)\n    if (isDynamic) {\n      handleUpdateDsl(`${widgetDisplayName}.${attrName}JS`, \"select\")\n      if (!isInOption) {\n        handleUpdateDsl(attrName, \"\")\n      } else {\n        handleUpdateDsl(attrName, finalValue)\n      }\n    } else {\n      handleUpdateDsl(`${widgetDisplayName}.${attrName}JS`, \"dynamic\")\n      if (isInOption) {\n        handleUpdateDsl(attrName, finalValue)\n      }\n    }\n  }, [\n    selectedOptions,\n    isDynamic,\n    finalValue,\n    handleUpdateDsl,\n    widgetDisplayName,\n    attrName,\n  ])\n\n  const handleChangeSelect = useCallback(\n    (value: string) => {\n      handleUpdateDsl?.(attrName, value)\n    },\n    [attrName, handleUpdateDsl],\n  )\n\n  const handleChangeInput = useCallback(\n    (value: string) => {\n      handleUpdateDsl(attrName, value)\n    },\n    [attrName, handleUpdateDsl],\n  )\n\n  return (\n    <div css={publicPaddingStyle}>\n      <BaseDynamicSelect\n        {...props}\n        isDynamic={isDynamic}\n        options={selectedOptions}\n        onClickFxButton={handleClickFxButton}\n        onChangeSelect={handleChangeSelect}\n        value={finalValue}\n        onChangeInput={handleChangeInput}\n        expectedType={VALIDATION_TYPES.STRING}\n        path={`${widgetDisplayName}.${attrName}`}\n        labelName={labelName}\n        labelDesc={labelDesc}\n        isError={isError}\n      />\n    </div>\n  )\n}\n\nChartKeysDynamicSelectSetter.displayName = \"ChartXAxisSetter2\"\n\nexport default ChartKeysDynamicSelectSetter\n"],"names":["ChartKeysDynamicSelectSetter","props","widgetDisplayName","attrName","value","labelName","labelDesc","panelConfig","handleUpdateMultiAttrDSL","targetComponentProps","useSelector","rootState","executionTree","getExecutionResult","get","insertValues","targetComponentNode","searchComponentFromMap","getComponentMap","isDataSourceDynamic","useMemo","dataSources","originDataSources","formatDataAsObject","selectedOptions","isObject","options","key","datasets","generateNewDatasets","useCallback","isGroupBy","dataset","index","CHART_PRESET_COLOR","handleUpdateDsl","newValue","newDatasets","executionErrors","getExecutionError","isError","_a","isDynamic","finalValue","handleClickFxButton","isInOption","handleChangeSelect","handleChangeInput","jsx","publicPaddingStyle","BaseDynamicSelect","VALIDATION_TYPES"],"mappings":"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"}