{"version":3,"file":"columsSelectSetter-ce917830.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/TableSetter/columsSelectSetter.tsx"],"sourcesContent":["import { get } from \"lodash-es\"\nimport { FC, useCallback, useMemo } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { getExecutionResult } from \"@/redux/currentApp/executionTree/executionSelector\"\nimport { RootState } from \"@/store\"\nimport { ColumnItemShape } from \"@/widgetLibrary/TableWidget/interface\"\nimport SearchSelectSetter from \"../SelectSetter/searchSelect\"\nimport { ColumnsSelectSetterProps, SelectOptions } from \"./interface\"\n\nconst ColumnsSelectSetter: FC<ColumnsSelectSetterProps> = (props) => {\n  const {\n    widgetDisplayName,\n    attrName,\n    isSetterSingleRow,\n    widgetOrAction,\n    widgetType,\n    expectedType,\n    allowClear,\n    value,\n    handleUpdateMultiAttrDSL,\n    ...otherProps\n  } = props\n\n  const targetComponentProps = useSelector<RootState, Record<string, any>>(\n    (rootState) => {\n      const executionTree = getExecutionResult(rootState)\n      return get(executionTree, widgetDisplayName, {})\n    },\n  )\n\n  const options = useMemo(() => {\n    const columns = get(targetComponentProps, \"columns\", [])\n    const opt: SelectOptions = [\n      {\n        value: \"default\",\n        label: \"â€”\",\n      },\n    ]\n    columns.forEach((item: ColumnItemShape) => {\n      opt.push({\n        value: item.accessorKey ?? \"\",\n        label: item.header ?? \"\",\n      })\n    })\n    return opt\n  }, [targetComponentProps])\n\n  const handleUpdateDsl = useCallback(\n    (attrName: string, newValue: any) => {\n      handleUpdateMultiAttrDSL?.({\n        [attrName]: newValue,\n      })\n    },\n    [handleUpdateMultiAttrDSL],\n  )\n\n  return (\n    <SearchSelectSetter\n      {...otherProps}\n      isSetterSingleRow={isSetterSingleRow}\n      options={options}\n      attrName={attrName}\n      handleUpdateDsl={handleUpdateDsl}\n      value={value}\n      expectedType={expectedType}\n      widgetDisplayName={widgetDisplayName}\n      widgetOrAction={widgetOrAction}\n      widgetType={widgetType}\n      allowClear={allowClear}\n    />\n  )\n}\n\nColumnsSelectSetter.displayName = \"ColumnsSelectSetter\"\n\nexport default ColumnsSelectSetter\n"],"names":["ColumnsSelectSetter","props","widgetDisplayName","attrName","isSetterSingleRow","widgetOrAction","widgetType","expectedType","allowClear","value","handleUpdateMultiAttrDSL","otherProps","targetComponentProps","useSelector","rootState","executionTree","getExecutionResult","get","options","useMemo","columns","opt","item","handleUpdateDsl","useCallback","newValue","jsx","SearchSelectSetter"],"mappings":"mcASM,MAAAA,EAAqDC,GAAU,CAC7D,KAAA,CACJ,kBAAAC,EACA,SAAAC,EACA,kBAAAC,EACA,eAAAC,EACA,WAAAC,EACA,aAAAC,EACA,WAAAC,EACA,MAAAC,EACA,yBAAAC,EACA,GAAGC,CACD,EAAAV,EAEEW,EAAuBC,EAC1BC,GAAc,CACP,MAAAC,EAAgBC,EAAmBF,CAAS,EAClD,OAAOG,EAAIF,EAAeb,EAAmB,CAAE,CAAA,CACjD,CAAA,EAGIgB,EAAUC,EAAAA,QAAQ,IAAM,CAC5B,MAAMC,EAAUH,EAAIL,EAAsB,UAAW,CAAE,CAAA,EACjDS,EAAqB,CACzB,CACE,MAAO,UACP,MAAO,GACT,CAAA,EAEM,OAAAD,EAAA,QAASE,GAA0B,CACzCD,EAAI,KAAK,CACP,MAAOC,EAAK,aAAe,GAC3B,MAAOA,EAAK,QAAU,EAAA,CACvB,CAAA,CACF,EACMD,CAAA,EACN,CAACT,CAAoB,CAAC,EAEnBW,EAAkBC,EAAA,YACtB,CAACrB,EAAkBsB,IAAkB,CACRf,GAAA,MAAAA,EAAA,CACzB,CAACP,CAAQ,EAAGsB,CAAA,EAEhB,EACA,CAACf,CAAwB,CAAA,EAIzB,OAAAgB,EAACC,EAAA,CACE,GAAGhB,EACJ,kBAAAP,EACA,QAAAc,EACA,SAAAf,EACA,gBAAAoB,EACA,MAAAd,EACA,aAAAF,EACA,kBAAAL,EACA,eAAAG,EACA,WAAAC,EACA,WAAAE,CAAA,CAAA,CAGN,EAEAR,EAAoB,YAAc"}