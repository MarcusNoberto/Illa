{"version":3,"file":"index-ae726d01.js","sources":["../../src/page/App/components/Actions/ActionPanel/RestApiPanel/BodyEditor/index.tsx","../../src/page/App/components/Actions/ActionPanel/RestApiPanel/style.ts","../../src/page/App/components/Actions/ActionPanel/RestApiPanel/index.tsx"],"sourcesContent":["import { RestAPIRawBodyInitial } from \"@illa-public/public-configs\"\nimport {\n  ActionItem,\n  RestAPIAction,\n  RestAPIBodyContent,\n  RestAPIBodyType,\n  RestAPIRawBody,\n} from \"@illa-public/public-types\"\nimport { Params } from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { Select } from \"@illa-design/react\"\nimport { CodeEditor } from \"@/components/CodeEditor\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { RecordEditor } from \"@/components/RecordEditor\"\nimport { BodyEditorProps } from \"@/page/App/components/Actions/ActionPanel/RestApiPanel/BodyEditor/interface\"\nimport { getSelectedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport {\n  bodyChooserStyle,\n  bodyEditorContainerStyle,\n  bodyLabelStyle,\n  bodySelectorStyle,\n  codeEditorStyle,\n  restRecordKeyStyle,\n  restRecordValueStyle,\n} from \"./style\"\n\nexport const BodyEditor: FC<BodyEditorProps> = (props) => {\n  const { t } = useTranslation()\n\n  const actionItem = props.actionItem\n  const bodyType = actionItem.content.bodyType\n  const body = actionItem.content.body\n  const isFormData = bodyType === \"form-data\"\n\n  const selectedAction = useSelector(getSelectedAction) as ActionItem<\n    RestAPIAction<RestAPIBodyContent>\n  >\n  const dispatch = useDispatch()\n\n  let mode: CODE_LANG = CODE_LANG.JAVASCRIPT\n  if (bodyType === \"raw\") {\n    switch ((body as RestAPIRawBody).type) {\n      case \"text\":\n        mode = CODE_LANG.JAVASCRIPT\n        break\n      case \"json\":\n        mode = CODE_LANG.JSON\n        break\n      case \"xml\":\n        mode = CODE_LANG.XML\n        break\n      case \"javascript\":\n        mode = CODE_LANG.JAVASCRIPT\n        break\n      case \"html\":\n        mode = CODE_LANG.HTML\n        break\n    }\n  }\n\n  const handleActionTypeChange = useCallback(\n    (value: string) => {\n      let newBody = null\n      const content =\n        selectedAction?.content as RestAPIAction<RestAPIBodyContent>\n      if (\n        selectedAction.resourceID === actionItem.resourceID &&\n        content.method !== \"GET\" &&\n        content.bodyType !== \"none\" &&\n        content.bodyType === value\n      ) {\n        newBody = content.body\n      } else {\n        switch (value) {\n          case \"none\":\n            newBody = null\n            break\n          case \"x-www-form-urlencoded\":\n            newBody = [{ key: \"\", value: \"\" }] as Params[]\n            break\n          case \"form-data\":\n            newBody = [{ key: \"\", type: \"\", value: \"\" }] as Params[]\n            break\n          case \"raw\":\n            newBody = RestAPIRawBodyInitial\n            break\n          case \"binary\":\n            newBody = \"\"\n            break\n        }\n      }\n      dispatch(\n        configActions.updateCachedAction({\n          ...actionItem,\n          content: {\n            ...actionItem.content,\n            bodyType: value as RestAPIBodyType,\n            body: newBody,\n          },\n        }),\n      )\n    },\n    [actionItem, dispatch, selectedAction.content, selectedAction.resourceID],\n  )\n\n  const handleOnBodyChange = useCallback(\n    (value: string | Params[]) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...actionItem,\n          content: {\n            ...actionItem.content,\n            body: value,\n          },\n        }),\n      )\n    },\n    [actionItem, dispatch],\n  )\n\n  const handleRecordEditorValueChange = useCallback(\n    (index: number, key: string, type: string, value: string) => {\n      let newList: Params[] = [...(body as Params[])]\n      newList[index] = isFormData\n        ? { key, type, value }\n        : ({ key, value } as Params)\n      handleOnBodyChange(newList)\n    },\n    [body, handleOnBodyChange, isFormData],\n  )\n\n  const handleRawBodyTypeChange = useCallback(\n    (value: string, paramName: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...actionItem,\n          content: {\n            ...actionItem.content,\n            body: {\n              ...(body as RestAPIRawBody),\n              [paramName]: value,\n            },\n          },\n        }),\n      )\n    },\n    [actionItem, body, dispatch],\n  )\n\n  const handleFormUrlencodedValueChange = (\n    index: number,\n    key: string,\n    v: string,\n  ) => {\n    handleRecordEditorValueChange(index, key, \"\", v)\n  }\n\n  const handleOnAddKeys = useCallback(() => {\n    const newListItem = (\n      isFormData ? { key: \"\", type: \"\", value: \"\" } : { key: \"\", value: \"\" }\n    ) as Params\n    const newList: Params[] = [...(body as Params[]), newListItem]\n    handleOnBodyChange(newList)\n  }, [body, handleOnBodyChange, isFormData])\n\n  const handleOnDeleteKeys = useCallback(\n    (index: number) => {\n      let newList: Params[] = [...(body as Params[])]\n      const newListItem = (\n        isFormData ? { key: \"\", type: \"\", value: \"\" } : { key: \"\", value: \"\" }\n      ) as Params\n      newList.splice(index, 1)\n      if (newList.length === 0) {\n        newList = [newListItem]\n      }\n      handleOnBodyChange(newList)\n    },\n    [body, handleOnBodyChange, isFormData],\n  )\n\n  return (\n    <div css={bodyEditorContainerStyle}>\n      <span css={bodyLabelStyle}>\n        {t(\"editor.action.resource.restapi.label.body\")}\n      </span>\n      <div css={bodyChooserStyle}>\n        <div css={bodySelectorStyle}>\n          <Select\n            colorScheme=\"techPurple\"\n            value={bodyType}\n            options={[\n              \"none\",\n              \"form-data\",\n              \"x-www-form-urlencoded\",\n              \"raw\",\n              \"binary\",\n            ]}\n            bdRadius={bodyType === \"raw\" ? \"8px 0 0 8px\" : \"8px\"}\n            onChange={(v) => handleActionTypeChange(v as string)}\n          />\n          {bodyType === \"raw\" && (\n            <Select\n              bdRadius=\"0 8px 8px 0\"\n              colorScheme=\"techPurple\"\n              w=\"162px\"\n              ml=\"-1px\"\n              value={(body as RestAPIRawBody).type}\n              options={[\"text\", \"json\", \"xml\", \"javascript\", \"html\"]}\n              onChange={(val) => handleRawBodyTypeChange(val as string, \"type\")}\n            />\n          )}\n        </div>\n        {bodyType === \"raw\" && (\n          <div css={codeEditorStyle}>\n            <CodeEditor\n              showLineNumbers\n              lang={mode}\n              value={(body as RestAPIRawBody).content}\n              expectValueType={VALIDATION_TYPES.STRING}\n              height=\"88px\"\n              onChange={(value) => handleRawBodyTypeChange(value, \"content\")}\n            />\n          </div>\n        )}\n        {bodyType === \"x-www-form-urlencoded\" && (\n          <RecordEditor\n            label=\"\"\n            name=\"body\"\n            records={body as Params[]}\n            onChangeKey={handleFormUrlencodedValueChange}\n            onChangeValue={handleFormUrlencodedValueChange}\n            onDelete={handleOnDeleteKeys}\n            onAdd={handleOnAddKeys}\n          />\n        )}\n        {bodyType === \"form-data\" && (\n          <RecordEditor\n            label=\"\"\n            name=\"body\"\n            records={body as Params[]}\n            customRender={(record, index) => {\n              return (\n                <>\n                  <CodeEditor\n                    value={record.key}\n                    singleLine\n                    height=\"32px\"\n                    onChange={(val) =>\n                      handleRecordEditorValueChange(\n                        index,\n                        val,\n                        record.type,\n                        record.value,\n                      )\n                    }\n                    wrapperCss={restRecordKeyStyle}\n                    expectValueType={VALIDATION_TYPES.STRING}\n                    lang={CODE_LANG.JAVASCRIPT}\n                    placeholder=\"key\"\n                  />\n                  <Select\n                    colorScheme=\"techPurple\"\n                    showSearch={true}\n                    defaultValue={record.type}\n                    value={record.type}\n                    w=\"0\"\n                    bdRadius=\"0\"\n                    flexGrow=\"1\"\n                    onChange={(val) =>\n                      handleRecordEditorValueChange(\n                        index,\n                        record.key,\n                        val as string,\n                        record.value,\n                      )\n                    }\n                    options={[\n                      {\n                        label: t(\n                          \"editor.action.panel.label.option.restapi.body_type.text\",\n                        ),\n                        value: \"text\",\n                      },\n                      {\n                        label: t(\n                          \"editor.action.panel.label.option.restapi.body_type.file\",\n                        ),\n                        value: \"file\",\n                      },\n                    ]}\n                  />\n                  <CodeEditor\n                    singleLine\n                    expectValueType={\n                      record.type === \"file\"\n                        ? VALIDATION_TYPES.OBJECT\n                        : VALIDATION_TYPES.STRING\n                    }\n                    value={record.value}\n                    onChange={(val) =>\n                      handleRecordEditorValueChange(\n                        index,\n                        record.key,\n                        record.type,\n                        val,\n                      )\n                    }\n                    height=\"32px\"\n                    wrapperCss={restRecordValueStyle}\n                    lang={CODE_LANG.JAVASCRIPT}\n                    placeholder={\n                      record.type === \"file\"\n                        ? t(\n                            \"editor.action.panel.placeholder.restapi.body_type.file\",\n                          )\n                        : \"value\"\n                    }\n                  />\n                </>\n              )\n            }}\n            onChangeKey={() => {}}\n            onChangeValue={() => {}}\n            onDelete={handleOnDeleteKeys}\n            onAdd={handleOnAddKeys}\n          />\n        )}\n        {bodyType === \"binary\" && (\n          <div css={codeEditorStyle}>\n            <CodeEditor\n              lang={CODE_LANG.JAVASCRIPT}\n              showLineNumbers\n              value={(body as string) ?? \"\"}\n              expectValueType={VALIDATION_TYPES.STRING}\n              height=\"88px\"\n              onChange={handleOnBodyChange}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nBodyEditor.displayName = \"BodyEditor\"\n","import { css } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/react\"\n\nexport const restapiPanelContainerStyle = css`\n  display: flex;\n  flex-direction: column;\n`\n\nexport const actionItemContainer = css`\n  padding: 8px 0;\n`\n\nexport const urlStyle = css`\n  width: 200px;\n  box-sizing: border-box;\n  color: ${getColor(\"grayBlue\", \"02\")};\n  font-weight: 400;\n  margin-left: 24px;\n  margin-right: 8px;\n  border-radius: 8px 0 0 8px;\n  font-size: 14px;\n  text-overflow: ellipsis;\n  overflow-wrap: break-word;\n  white-space: nowrap;\n  overflow: hidden;\n`\n\nexport const restapiItemStyle = css`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  min-height: 48px;\n  padding: 0 16px;\n`\n\nexport const restapiItemLabelStyle = css`\n  min-width: 160px;\n  font-size: 14px;\n  font-weight: 500;\n  text-align: right;\n  color: ${getColor(\"grayBlue\", \"02\")};\n`\n\nexport const restapiItemInputStyle = css`\n  flex-grow: 1;\n  width: 0;\n`\n","import {\n  ActionItem,\n  Params,\n  Resource,\n  RestAPIAction,\n  RestAPIBodyContent,\n  RestAPIBodyType,\n  RestAPIMethod,\n  RestApiAuth,\n  RestApiResource,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { Select, SelectValue, Trigger } from \"@illa-design/react\"\nimport { CodeEditor } from \"@/components/CodeEditor\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { RecordEditor } from \"@/components/RecordEditor\"\nimport { BodyEditor } from \"@/page/App/components/Actions/ActionPanel/RestApiPanel/BodyEditor\"\nimport {\n  actionItemContainer,\n  restapiItemInputStyle,\n  restapiItemLabelStyle,\n  restapiItemStyle,\n  urlStyle,\n} from \"@/page/App/components/Actions/ActionPanel/RestApiPanel/style\"\nimport { TransformerComponent } from \"@/page/App/components/Actions/ActionPanel/TransformerComponent\"\nimport {\n  getCachedAction,\n  getSelectedAction,\n} from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { RootState } from \"@/store\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nconst resetAPIMethodSelectOptions: RestAPIMethod[] = [\n  \"GET\",\n  \"POST\",\n  \"PUT\",\n  \"HEAD\",\n  \"PATCH\",\n  \"DELETE\",\n  \"OPTIONS\",\n]\n\nconst RestApiPanel: FC = () => {\n  const { t } = useTranslation()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    RestAPIAction<RestAPIBodyContent>\n  >\n  const selectedAction = useSelector(getSelectedAction) as ActionItem<\n    RestAPIAction<RestAPIBodyContent>\n  >\n  const content = cachedAction.content as RestAPIAction<RestAPIBodyContent>\n  const dispatch = useDispatch()\n\n  const currentResource = useSelector((state: RootState) => {\n    return state.resource.find((r) => r.resourceID === cachedAction?.resourceID)\n  })\n\n  const handleChangeMethod = useCallback(\n    (value?: SelectValue) => {\n      let newBodyType: RestAPIBodyType = \"none\"\n      let newBody = null\n\n      if (value !== \"GET\") {\n        if (\n          selectedAction.resourceID === cachedAction.resourceID &&\n          selectedAction.content.method === value\n        ) {\n          newBodyType = selectedAction.content.bodyType\n          newBody = selectedAction.content.body\n        }\n      }\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...content,\n            method: value as RestAPIMethod,\n            bodyType: newBodyType,\n            body: newBody,\n          },\n        }),\n      )\n    },\n    [\n      cachedAction,\n      content,\n      dispatch,\n      selectedAction.content.body,\n      selectedAction.content.bodyType,\n      selectedAction.content.method,\n      selectedAction.resourceID,\n    ],\n  )\n\n  return (\n    <div css={actionItemContainer}>\n      <div css={restapiItemStyle}>\n        <span css={restapiItemLabelStyle}>\n          {t(\"editor.action.resource.restapi.label.action_type\")}\n        </span>\n        <Select\n          colorScheme=\"techPurple\"\n          ml=\"16px\"\n          value={content.method}\n          w=\"160px\"\n          maxW=\"160px\"\n          options={resetAPIMethodSelectOptions}\n          onChange={handleChangeMethod}\n        />\n        <Trigger\n          position=\"top-start\"\n          content={\n            currentResource?.content\n              ? (currentResource as Resource<RestApiResource<RestApiAuth>>)\n                  .content.baseUrl\n              : \"\"\n          }\n        >\n          <div css={urlStyle}>\n            {currentResource?.content\n              ? (currentResource as Resource<RestApiResource<RestApiAuth>>)\n                  .content.baseUrl\n              : \"\"}\n          </div>\n        </Trigger>\n        <CodeEditor\n          singleLine\n          wrapperCss={restapiItemInputStyle}\n          expectValueType={VALIDATION_TYPES.STRING}\n          value={content.url}\n          placeholder={t(\"editor.action.form.placeholder.url\")}\n          lang={CODE_LANG.JAVASCRIPT}\n          onChange={(value) => {\n            dispatch(\n              configActions.updateCachedAction({\n                ...cachedAction,\n                content: {\n                  ...content,\n                  url: value,\n                },\n              }),\n            )\n          }}\n        />\n      </div>\n      <RecordEditor\n        records={content.urlParams}\n        label={t(\"editor.action.resource.restapi.label.url_parameters\")}\n        onChangeKey={(index, key, v) => {\n          let newList: Params[] = [...content.urlParams]\n          newList[index] = { key, value: v } as Params\n          dispatch(\n            configActions.updateCachedAction({\n              ...cachedAction,\n              content: {\n                ...content,\n                urlParams: newList,\n              },\n            }),\n          )\n        }}\n        onChangeValue={(index, key, v) => {\n          let newList: Params[] = [...content.urlParams]\n          newList[index] = { key, value: v } as Params\n          dispatch(\n            configActions.updateCachedAction({\n              ...cachedAction,\n              content: {\n                ...content,\n                urlParams: newList,\n              },\n            }),\n          )\n        }}\n        onDelete={(index, _record) => {\n          let newList: Params[] = [...content.urlParams]\n          newList.splice(index, 1)\n          if (newList.length === 0) {\n            newList = [{ key: \"\", value: \"\" }]\n          }\n          dispatch(\n            configActions.updateCachedAction({\n              ...cachedAction,\n              content: {\n                ...content,\n                urlParams: newList,\n              },\n            }),\n          )\n        }}\n        onAdd={() => {\n          let newList: Params[] = [\n            ...content.urlParams,\n            { key: \"\", value: \"\" } as Params,\n          ]\n          dispatch(\n            configActions.updateCachedAction({\n              ...cachedAction,\n              content: {\n                ...content,\n                urlParams: newList,\n              },\n            }),\n          )\n        }}\n      />\n      <RecordEditor\n        records={content.headers}\n        label={t(\"editor.action.resource.restapi.label.headers\")}\n        onChangeKey={(index, key, v) => {\n          let newList: Params[] = [...content.headers]\n          newList[index] = { key, value: v } as Params\n          dispatch(\n            configActions.updateCachedAction({\n              ...cachedAction,\n              content: {\n                ...content,\n                headers: newList,\n              },\n            }),\n          )\n        }}\n        onChangeValue={(index, key, v) => {\n          let newList: Params[] = [...content.headers]\n          newList[index] = { key, value: v } as Params\n          dispatch(\n            configActions.updateCachedAction({\n              ...cachedAction,\n              content: {\n                ...content,\n                headers: newList,\n              },\n            }),\n          )\n        }}\n        onDelete={(index) => {\n          let newList: Params[] = [...content.headers]\n          newList.splice(index, 1)\n          if (newList.length === 0) {\n            newList = [{ key: \"\", value: \"\" }]\n          }\n          dispatch(\n            configActions.updateCachedAction({\n              ...cachedAction,\n              content: {\n                ...content,\n                headers: newList,\n              },\n            }),\n          )\n        }}\n        onAdd={() => {\n          let newList: Params[] = [\n            ...content.headers,\n            { key: \"\", value: \"\" } as Params,\n          ]\n          dispatch(\n            configActions.updateCachedAction({\n              ...cachedAction,\n              content: {\n                ...content,\n                headers: newList,\n              },\n            }),\n          )\n        }}\n      />\n      <RecordEditor\n        records={content.cookies}\n        label={t(\"editor.action.resource.restapi.label.cookies\")}\n        onChangeKey={(index, key, v) => {\n          let newList: Params[] = [...content.cookies]\n          newList[index] = { key, value: v } as Params\n          dispatch(\n            configActions.updateCachedAction({\n              ...cachedAction,\n              content: {\n                ...content,\n                cookies: newList,\n              },\n            }),\n          )\n        }}\n        onChangeValue={(index, key, v) => {\n          let newList: Params[] = [...content.cookies]\n          newList[index] = { key, value: v } as Params\n          dispatch(\n            configActions.updateCachedAction({\n              ...cachedAction,\n              content: {\n                ...content,\n                cookies: newList,\n              },\n            }),\n          )\n        }}\n        onDelete={(index) => {\n          let newList: Params[] = [...content.cookies]\n          newList.splice(index, 1)\n          if (newList.length === 0) {\n            newList = [{ key: \"\", value: \"\" }]\n          }\n          dispatch(\n            configActions.updateCachedAction({\n              ...cachedAction,\n              content: {\n                ...content,\n                cookies: newList,\n              },\n            }),\n          )\n        }}\n        onAdd={() => {\n          let newList: Params[] = [\n            ...content.cookies,\n            { key: \"\", value: \"\" } as Params,\n          ]\n          dispatch(\n            configActions.updateCachedAction({\n              ...cachedAction,\n              content: {\n                ...content,\n                cookies: newList,\n              },\n            }),\n          )\n        }}\n      />\n      {![\"GET\", \"HEAD\"].includes(content.method) && (\n        <BodyEditor actionItem={cachedAction} />\n      )}\n      <TransformerComponent />\n    </div>\n  )\n}\n\nRestApiPanel.displayName = \"RestApiPanel\"\nexport default RestApiPanel\n"],"names":["BodyEditor","props","t","useTranslation","actionItem","bodyType","body","isFormData","selectedAction","useSelector","getSelectedAction","dispatch","useDispatch","mode","CODE_LANG","handleActionTypeChange","useCallback","value","newBody","content","RestAPIRawBodyInitial","configActions","handleOnBodyChange","handleRecordEditorValueChange","index","key","type","newList","handleRawBodyTypeChange","paramName","handleFormUrlencodedValueChange","v","handleOnAddKeys","newListItem","handleOnDeleteKeys","jsxs","bodyEditorContainerStyle","jsx","bodyLabelStyle","bodyChooserStyle","bodySelectorStyle","Select","val","codeEditorStyle","CodeEditor","VALIDATION_TYPES","RecordEditor","record","Fragment","restRecordKeyStyle","restRecordValueStyle","css","actionItemContainer","urlStyle","getColor","restapiItemStyle","restapiItemLabelStyle","restapiItemInputStyle","resetAPIMethodSelectOptions","RestApiPanel","cachedAction","getCachedAction","currentResource","state","r","handleChangeMethod","newBodyType","Trigger","_record","TransformerComponent"],"mappings":"8qCA8Ba,MAAAA,EAAmCC,GAAU,CAClD,KAAA,CAAE,EAAAC,GAAMC,IAERC,EAAaH,EAAM,WACnBI,EAAWD,EAAW,QAAQ,SAC9BE,EAAOF,EAAW,QAAQ,KAC1BG,EAAaF,IAAa,YAE1BG,EAAiBC,EAAYC,CAAiB,EAG9CC,EAAWC,IAEjB,IAAIC,EAAkBC,EAAU,WAChC,GAAIT,IAAa,MACf,OAASC,EAAwB,KAAM,CACrC,IAAK,OACHO,EAAOC,EAAU,WACjB,MACF,IAAK,OACHD,EAAOC,EAAU,KACjB,MACF,IAAK,MACHD,EAAOC,EAAU,IACjB,MACF,IAAK,aACHD,EAAOC,EAAU,WACjB,MACF,IAAK,OACHD,EAAOC,EAAU,KACjB,KACJ,CAGF,MAAMC,EAAyBC,EAAA,YAC5BC,GAAkB,CACjB,IAAIC,EAAU,KACd,MAAMC,EACJX,GAAA,YAAAA,EAAgB,QAClB,GACEA,EAAe,aAAeJ,EAAW,YACzCe,EAAQ,SAAW,OACnBA,EAAQ,WAAa,QACrBA,EAAQ,WAAaF,EAErBC,EAAUC,EAAQ,SAElB,QAAQF,EAAO,CACb,IAAK,OACOC,EAAA,KACV,MACF,IAAK,wBACHA,EAAU,CAAC,CAAE,IAAK,GAAI,MAAO,GAAI,EACjC,MACF,IAAK,YACOA,EAAA,CAAC,CAAE,IAAK,GAAI,KAAM,GAAI,MAAO,GAAI,EAC3C,MACF,IAAK,MACOA,EAAAE,EACV,MACF,IAAK,SACOF,EAAA,GACV,KACJ,CAEFP,EACEU,EAAc,mBAAmB,CAC/B,GAAGjB,EACH,QAAS,CACP,GAAGA,EAAW,QACd,SAAUa,EACV,KAAMC,CACR,CAAA,CACD,CAAA,CAEL,EACA,CAACd,EAAYO,EAAUH,EAAe,QAASA,EAAe,UAAU,CAAA,EAGpEc,EAAqBN,EAAA,YACxBC,GAA6B,CAC5BN,EACEU,EAAc,mBAAmB,CAC/B,GAAGjB,EACH,QAAS,CACP,GAAGA,EAAW,QACd,KAAMa,CACR,CAAA,CACD,CAAA,CAEL,EACA,CAACb,EAAYO,CAAQ,CAAA,EAGjBY,EAAgCP,EAAA,YACpC,CAACQ,EAAeC,EAAaC,EAAcT,IAAkB,CACvD,IAAAU,EAAoB,CAAC,GAAIrB,CAAiB,EACtCqB,EAAAH,CAAK,EAAIjB,EACb,CAAE,IAAAkB,EAAK,KAAAC,EAAM,MAAAT,GACZ,CAAE,IAAAQ,EAAK,MAAAR,GACZK,EAAmBK,CAAO,CAC5B,EACA,CAACrB,EAAMgB,EAAoBf,CAAU,CAAA,EAGjCqB,EAA0BZ,EAAA,YAC9B,CAACC,EAAeY,IAAsB,CACpClB,EACEU,EAAc,mBAAmB,CAC/B,GAAGjB,EACH,QAAS,CACP,GAAGA,EAAW,QACd,KAAM,CACJ,GAAIE,EACJ,CAACuB,CAAS,EAAGZ,CACf,CACF,CAAA,CACD,CAAA,CAEL,EACA,CAACb,EAAYE,EAAMK,CAAQ,CAAA,EAGvBmB,EAAkC,CACtCN,EACAC,EACAM,IACG,CAC2BR,EAAAC,EAAOC,EAAK,GAAIM,CAAC,CAAA,EAG3CC,EAAkBhB,EAAAA,YAAY,IAAM,CACxC,MAAMiB,EACJ1B,EAAa,CAAE,IAAK,GAAI,KAAM,GAAI,MAAO,EAAA,EAAO,CAAE,IAAK,GAAI,MAAO,EAAG,EAEjEoB,EAAoB,CAAC,GAAIrB,EAAmB2B,CAAW,EAC7DX,EAAmBK,CAAO,CACzB,EAAA,CAACrB,EAAMgB,EAAoBf,CAAU,CAAC,EAEnC2B,EAAqBlB,EAAA,YACxBQ,GAAkB,CACb,IAAAG,EAAoB,CAAC,GAAIrB,CAAiB,EAC9C,MAAM2B,EACJ1B,EAAa,CAAE,IAAK,GAAI,KAAM,GAAI,MAAO,EAAA,EAAO,CAAE,IAAK,GAAI,MAAO,EAAG,EAE/DoB,EAAA,OAAOH,EAAO,CAAC,EACnBG,EAAQ,SAAW,IACrBA,EAAU,CAACM,CAAW,GAExBX,EAAmBK,CAAO,CAC5B,EACA,CAACrB,EAAMgB,EAAoBf,CAAU,CAAA,EAIrC,OAAA4B,EAAC,MAAI,CAAA,IAAKC,EACR,SAAA,CAAAC,EAAC,OAAK,CAAA,IAAKC,EACR,SAAApC,EAAE,2CAA2C,EAChD,EACAiC,EAAC,MAAI,CAAA,IAAKI,EACR,SAAA,CAACJ,EAAA,MAAA,CAAI,IAAKK,EACR,SAAA,CAAAH,EAACI,EAAA,CACC,YAAY,aACZ,MAAOpC,EACP,QAAS,CACP,OACA,YACA,wBACA,MACA,QACF,EACA,SAAUA,IAAa,MAAQ,cAAgB,MAC/C,SAAW0B,GAAMhB,EAAuBgB,CAAW,CAAA,CACrD,EACC1B,IAAa,OACZgC,EAACI,EAAA,CACC,SAAS,cACT,YAAY,aACZ,EAAE,QACF,GAAG,OACH,MAAQnC,EAAwB,KAChC,QAAS,CAAC,OAAQ,OAAQ,MAAO,aAAc,MAAM,EACrD,SAAWoC,GAAQd,EAAwBc,EAAe,MAAM,CAAA,CAClE,CAAA,EAEJ,EACCrC,IAAa,OACXgC,EAAA,MAAA,CAAI,IAAKM,EACR,SAAAN,EAACO,EAAA,CACC,gBAAe,GACf,KAAM/B,EACN,MAAQP,EAAwB,QAChC,gBAAiBuC,EAAiB,OAClC,OAAO,OACP,SAAW5B,GAAUW,EAAwBX,EAAO,SAAS,CAAA,CAAA,EAEjE,EAEDZ,IAAa,yBACZgC,EAACS,EAAA,CACC,MAAM,GACN,KAAK,OACL,QAASxC,EACT,YAAawB,EACb,cAAeA,EACf,SAAUI,EACV,MAAOF,CAAA,CACT,EAED3B,IAAa,aACZgC,EAACS,EAAA,CACC,MAAM,GACN,KAAK,OACL,QAASxC,EACT,aAAc,CAACyC,EAAQvB,IAGjBW,EAAAa,EAAA,CAAA,SAAA,CAAAX,EAACO,EAAA,CACC,MAAOG,EAAO,IACd,WAAU,GACV,OAAO,OACP,SAAWL,GACTnB,EACEC,EACAkB,EACAK,EAAO,KACPA,EAAO,KACT,EAEF,WAAYE,EACZ,gBAAiBJ,EAAiB,OAClC,KAAM/B,EAAU,WAChB,YAAY,KAAA,CACd,EACAuB,EAACI,EAAA,CACC,YAAY,aACZ,WAAY,GACZ,aAAcM,EAAO,KACrB,MAAOA,EAAO,KACd,EAAE,IACF,SAAS,IACT,SAAS,IACT,SAAWL,GACTnB,EACEC,EACAuB,EAAO,IACPL,EACAK,EAAO,KACT,EAEF,QAAS,CACP,CACE,MAAO7C,EACL,yDACF,EACA,MAAO,MACT,EACA,CACE,MAAOA,EACL,yDACF,EACA,MAAO,MACT,CACF,CAAA,CACF,EACAmC,EAACO,EAAA,CACC,WAAU,GACV,gBACEG,EAAO,OAAS,OACZF,EAAiB,OACjBA,EAAiB,OAEvB,MAAOE,EAAO,MACd,SAAWL,GACTnB,EACEC,EACAuB,EAAO,IACPA,EAAO,KACPL,CACF,EAEF,OAAO,OACP,WAAYQ,EACZ,KAAMpC,EAAU,WAChB,YACEiC,EAAO,OAAS,OACZ7C,EACE,wDAAA,EAEF,OAAA,CAER,CACF,CAAA,CAAA,EAGJ,YAAa,IAAM,CAAC,EACpB,cAAe,IAAM,CAAC,EACtB,SAAUgC,EACV,MAAOF,CAAA,CACT,EAED3B,IAAa,UACXgC,EAAA,MAAA,CAAI,IAAKM,EACR,SAAAN,EAACO,EAAA,CACC,KAAM9B,EAAU,WAChB,gBAAe,GACf,MAAQR,GAAmB,GAC3B,gBAAiBuC,EAAiB,OAClC,OAAO,OACP,SAAUvB,CAAA,CAAA,EAEd,CAAA,EAEJ,CACF,CAAA,CAAA,CAEJ,EAEAtB,EAAW,YAAc,aCzViBmD;AAAA;AAAA;AAAA,EAKnC,MAAMC,EAAsBD;AAAA;AAAA,EAItBE,EAAWF;AAAA;AAAA;AAAA,WAGbG,EAAS,WAAY,IAAI,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYxBC,EAAmBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQnBK,EAAwBL;AAAA;AAAA;AAAA;AAAA;AAAA,WAK1BG,EAAS,WAAY,IAAI,CAAC;AAAA,EAGxBG,EAAwBN;AAAA;AAAA;AAAA,ECR/BO,GAA+C,CACnD,MACA,OACA,MACA,OACA,QACA,SACA,SACF,EAEMC,GAAmB,IAAM,CACvB,KAAA,CAAE,EAAAzD,GAAMC,IACRyD,EAAenD,EAAYoD,CAAe,EAG1CrD,EAAiBC,EAAYC,CAAiB,EAG9CS,EAAUyC,EAAa,QACvBjD,EAAWC,IAEXkD,EAAkBrD,EAAasD,GAC5BA,EAAM,SAAS,KAAMC,GAAMA,EAAE,cAAeJ,GAAA,YAAAA,EAAc,WAAU,CAC5E,EAEKK,EAAqBjD,EAAA,YACxBC,GAAwB,CACvB,IAAIiD,EAA+B,OAC/BhD,EAAU,KAEVD,IAAU,OAEVT,EAAe,aAAeoD,EAAa,YAC3CpD,EAAe,QAAQ,SAAWS,IAElCiD,EAAc1D,EAAe,QAAQ,SACrCU,EAAUV,EAAe,QAAQ,MAGrCG,EACEU,EAAc,mBAAmB,CAC/B,GAAGuC,EACH,QAAS,CACP,GAAGzC,EACH,OAAQF,EACR,SAAUiD,EACV,KAAMhD,CACR,CAAA,CACD,CAAA,CAEL,EACA,CACE0C,EACAzC,EACAR,EACAH,EAAe,QAAQ,KACvBA,EAAe,QAAQ,SACvBA,EAAe,QAAQ,OACvBA,EAAe,UACjB,CAAA,EAIA,OAAA2B,EAAC,MAAI,CAAA,IAAKiB,EACR,SAAA,CAACjB,EAAA,MAAA,CAAI,IAAKoB,EACR,SAAA,CAAAlB,EAAC,OAAK,CAAA,IAAKmB,EACR,SAAAtD,EAAE,kDAAkD,EACvD,EACAmC,EAACI,EAAA,CACC,YAAY,aACZ,GAAG,OACH,MAAOtB,EAAQ,OACf,EAAE,QACF,KAAK,QACL,QAASuC,GACT,SAAUO,CAAA,CACZ,EACA5B,EAAC8B,EAAA,CACC,SAAS,YACT,QACEL,GAAA,MAAAA,EAAiB,QACZA,EACE,QAAQ,QACX,GAGN,SAAAzB,EAAC,OAAI,IAAKgB,EACP,oBAAiB,QACbS,EACE,QAAQ,QACX,EACN,CAAA,CAAA,CACF,EACAzB,EAACO,EAAA,CACC,WAAU,GACV,WAAYa,EACZ,gBAAiBZ,EAAiB,OAClC,MAAO1B,EAAQ,IACf,YAAajB,EAAE,oCAAoC,EACnD,KAAMY,EAAU,WAChB,SAAWG,GAAU,CACnBN,EACEU,EAAc,mBAAmB,CAC/B,GAAGuC,EACH,QAAS,CACP,GAAGzC,EACH,IAAKF,CACP,CAAA,CACD,CAAA,CAEL,CAAA,CACF,CAAA,EACF,EACAoB,EAACS,EAAA,CACC,QAAS3B,EAAQ,UACjB,MAAOjB,EAAE,qDAAqD,EAC9D,YAAa,CAACsB,EAAOC,EAAKM,IAAM,CAC9B,IAAIJ,EAAoB,CAAC,GAAGR,EAAQ,SAAS,EAC7CQ,EAAQH,CAAK,EAAI,CAAE,IAAAC,EAAK,MAAOM,CAAE,EACjCpB,EACEU,EAAc,mBAAmB,CAC/B,GAAGuC,EACH,QAAS,CACP,GAAGzC,EACH,UAAWQ,CACb,CAAA,CACD,CAAA,CAEL,EACA,cAAe,CAACH,EAAOC,EAAKM,IAAM,CAChC,IAAIJ,EAAoB,CAAC,GAAGR,EAAQ,SAAS,EAC7CQ,EAAQH,CAAK,EAAI,CAAE,IAAAC,EAAK,MAAOM,CAAE,EACjCpB,EACEU,EAAc,mBAAmB,CAC/B,GAAGuC,EACH,QAAS,CACP,GAAGzC,EACH,UAAWQ,CACb,CAAA,CACD,CAAA,CAEL,EACA,SAAU,CAACH,EAAO4C,IAAY,CAC5B,IAAIzC,EAAoB,CAAC,GAAGR,EAAQ,SAAS,EACrCQ,EAAA,OAAOH,EAAO,CAAC,EACnBG,EAAQ,SAAW,IACrBA,EAAU,CAAC,CAAE,IAAK,GAAI,MAAO,GAAI,GAEnChB,EACEU,EAAc,mBAAmB,CAC/B,GAAGuC,EACH,QAAS,CACP,GAAGzC,EACH,UAAWQ,CACb,CAAA,CACD,CAAA,CAEL,EACA,MAAO,IAAM,CACX,IAAIA,EAAoB,CACtB,GAAGR,EAAQ,UACX,CAAE,IAAK,GAAI,MAAO,EAAG,CAAA,EAEvBR,EACEU,EAAc,mBAAmB,CAC/B,GAAGuC,EACH,QAAS,CACP,GAAGzC,EACH,UAAWQ,CACb,CAAA,CACD,CAAA,CAEL,CAAA,CACF,EACAU,EAACS,EAAA,CACC,QAAS3B,EAAQ,QACjB,MAAOjB,EAAE,8CAA8C,EACvD,YAAa,CAACsB,EAAOC,EAAKM,IAAM,CAC9B,IAAIJ,EAAoB,CAAC,GAAGR,EAAQ,OAAO,EAC3CQ,EAAQH,CAAK,EAAI,CAAE,IAAAC,EAAK,MAAOM,CAAE,EACjCpB,EACEU,EAAc,mBAAmB,CAC/B,GAAGuC,EACH,QAAS,CACP,GAAGzC,EACH,QAASQ,CACX,CAAA,CACD,CAAA,CAEL,EACA,cAAe,CAACH,EAAOC,EAAKM,IAAM,CAChC,IAAIJ,EAAoB,CAAC,GAAGR,EAAQ,OAAO,EAC3CQ,EAAQH,CAAK,EAAI,CAAE,IAAAC,EAAK,MAAOM,CAAE,EACjCpB,EACEU,EAAc,mBAAmB,CAC/B,GAAGuC,EACH,QAAS,CACP,GAAGzC,EACH,QAASQ,CACX,CAAA,CACD,CAAA,CAEL,EACA,SAAWH,GAAU,CACnB,IAAIG,EAAoB,CAAC,GAAGR,EAAQ,OAAO,EACnCQ,EAAA,OAAOH,EAAO,CAAC,EACnBG,EAAQ,SAAW,IACrBA,EAAU,CAAC,CAAE,IAAK,GAAI,MAAO,GAAI,GAEnChB,EACEU,EAAc,mBAAmB,CAC/B,GAAGuC,EACH,QAAS,CACP,GAAGzC,EACH,QAASQ,CACX,CAAA,CACD,CAAA,CAEL,EACA,MAAO,IAAM,CACX,IAAIA,EAAoB,CACtB,GAAGR,EAAQ,QACX,CAAE,IAAK,GAAI,MAAO,EAAG,CAAA,EAEvBR,EACEU,EAAc,mBAAmB,CAC/B,GAAGuC,EACH,QAAS,CACP,GAAGzC,EACH,QAASQ,CACX,CAAA,CACD,CAAA,CAEL,CAAA,CACF,EACAU,EAACS,EAAA,CACC,QAAS3B,EAAQ,QACjB,MAAOjB,EAAE,8CAA8C,EACvD,YAAa,CAACsB,EAAOC,EAAKM,IAAM,CAC9B,IAAIJ,EAAoB,CAAC,GAAGR,EAAQ,OAAO,EAC3CQ,EAAQH,CAAK,EAAI,CAAE,IAAAC,EAAK,MAAOM,CAAE,EACjCpB,EACEU,EAAc,mBAAmB,CAC/B,GAAGuC,EACH,QAAS,CACP,GAAGzC,EACH,QAASQ,CACX,CAAA,CACD,CAAA,CAEL,EACA,cAAe,CAACH,EAAOC,EAAKM,IAAM,CAChC,IAAIJ,EAAoB,CAAC,GAAGR,EAAQ,OAAO,EAC3CQ,EAAQH,CAAK,EAAI,CAAE,IAAAC,EAAK,MAAOM,CAAE,EACjCpB,EACEU,EAAc,mBAAmB,CAC/B,GAAGuC,EACH,QAAS,CACP,GAAGzC,EACH,QAASQ,CACX,CAAA,CACD,CAAA,CAEL,EACA,SAAWH,GAAU,CACnB,IAAIG,EAAoB,CAAC,GAAGR,EAAQ,OAAO,EACnCQ,EAAA,OAAOH,EAAO,CAAC,EACnBG,EAAQ,SAAW,IACrBA,EAAU,CAAC,CAAE,IAAK,GAAI,MAAO,GAAI,GAEnChB,EACEU,EAAc,mBAAmB,CAC/B,GAAGuC,EACH,QAAS,CACP,GAAGzC,EACH,QAASQ,CACX,CAAA,CACD,CAAA,CAEL,EACA,MAAO,IAAM,CACX,IAAIA,EAAoB,CACtB,GAAGR,EAAQ,QACX,CAAE,IAAK,GAAI,MAAO,EAAG,CAAA,EAEvBR,EACEU,EAAc,mBAAmB,CAC/B,GAAGuC,EACH,QAAS,CACP,GAAGzC,EACH,QAASQ,CACX,CAAA,CACD,CAAA,CAEL,CAAA,CACF,EACC,CAAC,CAAC,MAAO,MAAM,EAAE,SAASR,EAAQ,MAAM,GACvCkB,EAACrC,EAAW,CAAA,WAAY4D,CAAc,CAAA,IAEvCS,EAAqB,EAAA,CACxB,CAAA,CAAA,CAEJ,EAEAV,GAAa,YAAc"}