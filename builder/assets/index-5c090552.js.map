{"version":3,"file":"index-5c090552.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/ChartSetter/chartDatasetsSetter/utils.tsx","../../src/page/App/components/InspectPanel/PanelSetters/ChartSetter/chartDatasetsSetter/listBody.tsx","../../src/page/App/components/InspectPanel/PanelSetters/ChartSetter/chartDatasetsSetter/index.tsx"],"sourcesContent":["import { ChartType } from \"chart.js\"\nimport { difference } from \"lodash-es\"\nimport { v4 } from \"uuid\"\nimport { CHART_COLOR_TYPE_CONFIG } from \"@/page/App/components/InspectPanel/PanelSetters/ChartSetter/chartDatasetsSetter/listItem\"\nimport { CHART_DATASET_AGGREGATION_METHOD } from \"@/widgetLibrary/ChartWidget\"\n\nexport let datasetNameSet = new Set<string>()\n\nconst generateDatasetName = () => {\n  let i = 1\n  let datasetName = `Dataset ${i}`\n  while (datasetNameSet.has(datasetName)) {\n    i++\n    datasetName = `Dataset ${i}`\n  }\n  return datasetName\n}\n\nexport const generateDatasetItem = (\n  chartType: ChartType,\n  isGroup: boolean,\n  hasColor: string[],\n  hasDatasetNames: string[],\n) => {\n  const presetColor = CHART_COLOR_TYPE_CONFIG[\"illa-preset\"]\n  let color: string | string[] =\n    presetColor[hasColor.length % presetColor.length]\n  if (isGroup || chartType === \"pie\") {\n    color = \"illa-preset\"\n  } else {\n    if (hasColor.length <= presetColor.length) {\n      const diff = difference(presetColor, hasColor)\n      if (diff.length > 0) {\n        color = diff[0]\n      }\n    } else {\n      color = presetColor[hasColor.length % presetColor.length]\n    }\n  }\n\n  datasetNameSet = new Set<string>(hasDatasetNames)\n\n  const datasetName = generateDatasetName()\n\n  return {\n    id: v4(),\n    datasetName: datasetName,\n    datasetValues: \"\",\n    aggregationMethod: CHART_DATASET_AGGREGATION_METHOD.SUM,\n    type: chartType,\n    color: color,\n  }\n}\n","import { FC } from \"react\"\nimport { ListBodyProps } from \"@/page/App/components/InspectPanel/PanelSetters/ChartSetter/chartDatasetsSetter/interface\"\nimport { ListItem } from \"./listItem\"\n\nexport const ListBody: FC<ListBodyProps> = (props) => {\n  const { datasets } = props\n  return (\n    <>\n      {datasets?.map((dataset, index) => {\n        return (\n          <ListItem\n            index={index}\n            key={dataset.id}\n            color={dataset.color}\n            isHidden={dataset.isHidden}\n            datasetMethod={dataset.aggregationMethod}\n            datasetName={dataset.datasetName}\n          />\n        )\n      })}\n    </>\n  )\n}\n","import { get } from \"lodash-es\"\nimport { FC, useCallback, useMemo } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { DatasetsProvider } from \"@/page/App/components/InspectPanel/PanelSetters/ChartSetter/chartDatasetsSetter/datasetsContext\"\nimport { ChartDatasetsSetterProps } from \"@/page/App/components/InspectPanel/PanelSetters/ChartSetter/chartDatasetsSetter/interface\"\nimport { generateDatasetItem } from \"@/page/App/components/InspectPanel/PanelSetters/ChartSetter/chartDatasetsSetter/utils\"\nimport { AddActionLabel } from \"@/page/App/components/InspectPanel/PanelSetters/PublicComponent/Label/addActionLabel\"\nimport { getExecutionResult } from \"@/redux/currentApp/executionTree/executionSelector\"\nimport { RootState } from \"@/store\"\nimport { ListBody } from \"./listBody\"\nimport { chartDataSetterContainerStyle } from \"./style\"\n\nconst ChartDatasetsSetter: FC<ChartDatasetsSetterProps> = (props) => {\n  const {\n    value,\n    childrenSetter,\n    handleUpdateDsl,\n    attrName,\n    widgetDisplayName,\n    labelName,\n    labelDesc,\n  } = props\n\n  const targetComponentProps = useSelector<RootState, Record<string, any>>(\n    (rootState) => {\n      const executionTree = getExecutionResult(rootState)\n      return get(executionTree, widgetDisplayName, {})\n    },\n  )\n\n  const isCanGroupBy = useMemo(() => {\n    return !!get(targetComponentProps, \"groupBy\", \"\")\n  }, [targetComponentProps])\n\n  const chartType = useMemo(() => {\n    return get(targetComponentProps, \"chartType\", \"bar\")\n  }, [targetComponentProps])\n\n  const hasColor = useMemo(() => {\n    if (!Array.isArray(value)) return []\n    return value.map((v) => v.color)\n  }, [value])\n\n  const hasDatasetNames = useMemo(() => {\n    if (!Array.isArray(value)) return []\n    return value.map((v) => v.datasetName)\n  }, [value])\n\n  const handleAddDataSet = useCallback(async () => {\n    let oldDatasets = Array.isArray(value) ? value : []\n    const newDatasetItem = generateDatasetItem(\n      chartType,\n      isCanGroupBy,\n      hasColor,\n      hasDatasetNames,\n    )\n    handleUpdateDsl(attrName, [...oldDatasets, newDatasetItem])\n  }, [\n    attrName,\n    chartType,\n    handleUpdateDsl,\n    hasColor,\n    hasDatasetNames,\n    isCanGroupBy,\n    value,\n  ])\n\n  if (\n    !childrenSetter ||\n    !Array.isArray(childrenSetter) ||\n    childrenSetter.length < 1\n  )\n    return null\n\n  return (\n    <DatasetsProvider\n      attrPath={attrName}\n      handleUpdateDsl={handleUpdateDsl}\n      widgetDisplayName={widgetDisplayName}\n      childrenSetter={childrenSetter}\n      datasets={value}\n    >\n      <div css={chartDataSetterContainerStyle}>\n        <AddActionLabel\n          labelName={labelName}\n          labelDesc={labelDesc}\n          handleAddItem={handleAddDataSet}\n        />\n        <ListBody datasets={value} />\n      </div>\n    </DatasetsProvider>\n  )\n}\n\nChartDatasetsSetter.displayName = \"ChartDatasetsSetter\"\n\nexport default ChartDatasetsSetter\n"],"names":["datasetNameSet","generateDatasetName","i","datasetName","generateDatasetItem","chartType","isGroup","hasColor","hasDatasetNames","presetColor","CHART_COLOR_TYPE_CONFIG","color","diff","difference","v4","CHART_DATASET_AGGREGATION_METHOD","ListBody","props","datasets","jsx","Fragment","dataset","index","ListItem","ChartDatasetsSetter","value","childrenSetter","handleUpdateDsl","attrName","widgetDisplayName","labelName","labelDesc","targetComponentProps","useSelector","rootState","executionTree","getExecutionResult","get","isCanGroupBy","useMemo","v","handleAddDataSet","useCallback","oldDatasets","newDatasetItem","DatasetsProvider","jsxs","chartDataSetterContainerStyle","AddActionLabel"],"mappings":"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"}