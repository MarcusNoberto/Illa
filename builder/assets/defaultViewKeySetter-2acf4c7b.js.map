{"version":3,"file":"defaultViewKeySetter-2acf4c7b.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/ContainerSetter/defaultViewKeySetter.tsx"],"sourcesContent":["import { get } from \"lodash-es\"\nimport { FC, useCallback, useMemo } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { ViewItemShape } from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/interface\"\nimport { ContainerDefaultViewKeySetterProps } from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/interface\"\nimport BaseInput from \"@/page/App/components/InspectPanel/PanelSetters/InputSetter/BaseInput\"\nimport { getExecutionResult } from \"@/redux/currentApp/executionTree/executionSelector\"\nimport { RootState } from \"@/store\"\n\nconst ContainerDefaultViewKeySetter: FC<ContainerDefaultViewKeySetterProps> = (\n  props,\n) => {\n  const {\n    handleUpdateMultiAttrDSL,\n    handleUpdateOtherMultiAttrDSL,\n    widgetDisplayName,\n  } = props\n\n  const targetComponentProps = useSelector<RootState, Record<string, any>>(\n    (rootState) => {\n      const executionTree = getExecutionResult(rootState)\n      return get(executionTree, widgetDisplayName, {})\n    },\n  )\n\n  const realViews = useMemo(() => {\n    return get(targetComponentProps, \"viewList\", []) as ViewItemShape[]\n  }, [targetComponentProps])\n\n  const linkWidgetDisplayName = useMemo(() => {\n    return get(targetComponentProps, \"linkWidgetDisplayName\")\n  }, [targetComponentProps])\n\n  const handleUpdateDefaultView = useCallback(\n    (attrPath: string, value: string) => {\n      const defaultViewIndex = realViews.findIndex((view) => view.key === value)\n      let currentIndex = 0\n      let currentKey = realViews[currentIndex].key\n      if (defaultViewIndex > -1) {\n        currentIndex = defaultViewIndex\n        currentKey = realViews[currentIndex].key\n      }\n      handleUpdateMultiAttrDSL?.({\n        [attrPath]: value,\n        currentIndex,\n        currentKey,\n      })\n      if (linkWidgetDisplayName && Array.isArray(linkWidgetDisplayName)) {\n        linkWidgetDisplayName.forEach((name) => {\n          handleUpdateOtherMultiAttrDSL?.(name, {\n            currentIndex,\n            currentKey,\n          })\n        })\n      }\n    },\n    [\n      realViews,\n      linkWidgetDisplayName,\n      handleUpdateMultiAttrDSL,\n      handleUpdateOtherMultiAttrDSL,\n    ],\n  )\n\n  return <BaseInput {...props} handleUpdateDsl={handleUpdateDefaultView} />\n}\n\nContainerDefaultViewKeySetter.displayName = \"ContainerDefaultViewKeySetter\"\nexport default ContainerDefaultViewKeySetter\n"],"names":["ContainerDefaultViewKeySetter","props","handleUpdateMultiAttrDSL","handleUpdateOtherMultiAttrDSL","widgetDisplayName","targetComponentProps","useSelector","rootState","executionTree","getExecutionResult","get","realViews","useMemo","linkWidgetDisplayName","handleUpdateDefaultView","useCallback","attrPath","value","defaultViewIndex","view","currentIndex","currentKey","name","jsx","BaseInput"],"mappings":"okBASM,MAAAA,EACJC,GACG,CACG,KAAA,CACJ,yBAAAC,EACA,8BAAAC,EACA,kBAAAC,CACE,EAAAH,EAEEI,EAAuBC,EAC1BC,GAAc,CACP,MAAAC,EAAgBC,EAAmBF,CAAS,EAClD,OAAOG,EAAIF,EAAeJ,EAAmB,CAAE,CAAA,CACjD,CAAA,EAGIO,EAAYC,EAAAA,QAAQ,IACjBF,EAAIL,EAAsB,WAAY,CAAE,CAAA,EAC9C,CAACA,CAAoB,CAAC,EAEnBQ,EAAwBD,EAAAA,QAAQ,IAC7BF,EAAIL,EAAsB,uBAAuB,EACvD,CAACA,CAAoB,CAAC,EAEnBS,EAA0BC,EAAA,YAC9B,CAACC,EAAkBC,IAAkB,CACnC,MAAMC,EAAmBP,EAAU,UAAWQ,GAASA,EAAK,MAAQF,CAAK,EACzE,IAAIG,EAAe,EACfC,EAAaV,EAAUS,CAAY,EAAE,IACrCF,EAAmB,KACNE,EAAAF,EACFG,EAAAV,EAAUS,CAAY,EAAE,KAEZlB,GAAA,MAAAA,EAAA,CACzB,CAACc,CAAQ,EAAGC,EACZ,aAAAG,EACA,WAAAC,CAAA,GAEER,GAAyB,MAAM,QAAQA,CAAqB,GACxCA,EAAA,QAASS,GAAS,CACtCnB,GAAA,MAAAA,EAAgCmB,EAAM,CACpC,aAAAF,EACA,WAAAC,CAAA,EACD,CACF,CAEL,EACA,CACEV,EACAE,EACAX,EACAC,CACF,CAAA,EAGF,OAAQoB,EAAAC,EAAA,CAAW,GAAGvB,EAAO,gBAAiBa,CAAyB,CAAA,CACzE,EAEAd,EAA8B,YAAc"}