{"version":3,"file":"statistics-64e9f2ab.js","sources":["../../src/widgetLibrary/StatisticsWidget/style.ts","../../src/widgetLibrary/StatisticsWidget/statistics.tsx"],"sourcesContent":["import { css } from \"@emotion/react\"\nimport {\n  getColor,\n  getSpecialThemeColor,\n  globalColor,\n  illaPrefix,\n} from \"@illa-design/react\"\n\nconst overflowStyle = css`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`\n\nconst getAlignItems = (textAlign?: string) => {\n  let alignItemsStyle = css``\n  if (!textAlign || textAlign === \"start\") {\n    alignItemsStyle = css`\n      align-items: flex-start;\n    `\n  }\n  if (textAlign === \"center\") {\n    alignItemsStyle = css`\n      align-items: center;\n    `\n  }\n  if (textAlign === \"end\") {\n    alignItemsStyle = css`\n      align-items: flex-end;\n    `\n  }\n  return alignItemsStyle\n}\n\nexport const getStatisticWrapperStyle = (textAlign?: string) => {\n  const alignItemsStyle = getAlignItems(textAlign)\n  return css`\n    display: flex;\n    gap: 4px;\n    flex-direction: column;\n    align-items: center;\n    ${alignItemsStyle};\n  `\n}\nexport const getSecondaryStatisticStyle = css`\n  max-width: 100%;\n  overflow: hidden;\n  & span {\n    font-size: 12px;\n    font-weight: 500;\n    line-height: 18px;\n  }\n`\n\nexport const getStatisticStyle = css`\n  max-width: 100%;\n  overflow: hidden;\n  white-space: nowrap;\n  line-height: 36px;\n`\n\nexport const getPrefixIconStyle = (color?: string, secondary?: boolean) => {\n  const size = secondary ? 12 : 24\n  return css`\n    color: ${getSpecialThemeColor(color || \"\")};\n    display: inline-flex;\n    height: 100%;\n    align-items: center;\n    & > svg {\n      width: ${size}px;\n      height: ${size}px;\n    }\n  `\n}\n\nexport const primaryStatisticContainerStyle = css`\n  display: flex;\n  flex-wrap: nowrap;\n  gap: 8px;\n  align-items: center;\n`\n\nexport const getStatisticsContainerStyle = (textAlign?: string) => {\n  let justifyContentStyle = css``\n  if (textAlign === \"end\") {\n    justifyContentStyle = css`\n      justify-content: flex-end;\n    `\n  }\n  if (textAlign === \"center\") {\n    justifyContentStyle = css`\n      justify-content: center;\n    `\n  }\n\n  return css`\n    ${justifyContentStyle};\n    display: flex;\n    flex-wrap: wrap;\n    overflow: hidden;\n    align-items: center;\n    gap: 8px;\n  `\n}\n\nexport const getSecondaryStatisticContainerStyle = (color?: string) => {\n  return css`\n    display: flex;\n    gap: 2px;\n    align-items: center;\n    height: 18px;\n    padding: 0 4px;\n    border-radius: 2px;\n    background: ${getColor(color || \"\", \"08\")};\n  `\n}\n\nexport const getStatisticLabelStyle = (textAlign?: string) => {\n  let textAlignStyle = css``\n  if (textAlign === \"end\") {\n    textAlignStyle = css`\n      text-align: right;\n    `\n  }\n  if (textAlign === \"center\") {\n    textAlignStyle = css`\n      text-align: center;\n    `\n  }\n\n  return css`\n    ${textAlignStyle};\n    max-width: 100%;\n    color: ${globalColor(`--${illaPrefix}-grayBlue-04`)};\n    ${overflowStyle};\n    font-size: 12px;\n    line-height: 16px;\n  `\n}\n","import { FC, useCallback, useEffect, useMemo, useRef } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { Statistic } from \"@illa-design/react\"\nimport { getBuilderInfo } from \"@/redux/builderInfo/builderInfoSelector\"\nimport { AllData } from \"@/widgetLibrary/IconWidget/utils\"\nimport { AutoHeightContainer } from \"@/widgetLibrary/PublicSector/AutoHeightContainer\"\nimport { TooltipWrapper } from \"@/widgetLibrary/PublicSector/TooltipWrapper\"\nimport {\n  StatisticWidgetProps,\n  WrappedStatisticProps,\n} from \"@/widgetLibrary/StatisticsWidget/interface\"\nimport {\n  getPrefixIconStyle,\n  getSecondaryStatisticContainerStyle,\n  getSecondaryStatisticStyle,\n  getStatisticLabelStyle,\n  getStatisticStyle,\n  getStatisticWrapperStyle,\n  getStatisticsContainerStyle,\n  primaryStatisticContainerStyle,\n} from \"@/widgetLibrary/StatisticsWidget/style\"\n\nconst getNumberGroupSeparator = (value: number | undefined, lang: string) => {\n  if (value === undefined) {\n    return \"\"\n  }\n  const numberFormat = new Intl.NumberFormat(lang, {\n    style: \"decimal\",\n  })\n  const parts = numberFormat\n    .formatToParts(value)\n    .filter((part) => part.type === \"group\")\n  return parts[0]?.value ?? \"\"\n}\n\nconst getIcon = (iconName: string) => (iconName && AllData[iconName]) || null\n\nconst getTrendSignAndIcon = (\n  show: boolean,\n  value?: number,\n  positiveSign?: string,\n  negativeSign?: string,\n  color?: string,\n  secondary?: boolean,\n) => {\n  const positiveSignIcon = getIcon(positiveSign ?? \"\")\n  const negativeSignIcon = getIcon(negativeSign ?? \"\")\n  const icon = (value ?? 0) >= 0 ? positiveSignIcon : negativeSignIcon\n\n  return (\n    show &&\n    icon && (\n      <span css={getPrefixIconStyle(color, secondary)}>{icon && icon({})}</span>\n    )\n  )\n}\n\nexport const WrappedStatistic: FC<WrappedStatisticProps> = (props) => {\n  const builderInfo = useSelector(getBuilderInfo)\n  const {\n    label,\n    primaryValue,\n    secondaryValue,\n    decimalPlace,\n    prefixText,\n    suffixText,\n    secondaryPrefixText,\n    secondarySuffixText,\n    showTrendSign,\n    positiveSign,\n    negativeSign,\n    showSeparator,\n    enableTrendColor,\n    secondaryDecimalPlace,\n    secondaryShowTrendSign,\n    secondaryPositiveSign,\n    secondaryNegativeSign,\n    secondaryShowSeparator,\n    secondaryEnableTrendColor,\n    textAlign,\n    handleOnClick,\n    colorScheme,\n    negativeColorScheme,\n    positiveColorScheme,\n  } = props\n\n  const groupSeparator = showSeparator\n    ? getNumberGroupSeparator(primaryValue, builderInfo.language)\n    : \"\"\n  const secondaryGroupSeparator = secondaryShowSeparator\n    ? getNumberGroupSeparator(secondaryValue, builderInfo.language)\n    : \"\"\n\n  const getColor = useCallback(\n    (value?: number, enableTrendColor?: boolean) => {\n      return enableTrendColor\n        ? value !== undefined && value >= 0\n          ? positiveColorScheme\n          : negativeColorScheme\n        : colorScheme\n    },\n    [colorScheme, negativeColorScheme, positiveColorScheme],\n  )\n\n  const color = getColor(primaryValue, enableTrendColor)\n  const secondaryColor = getColor(secondaryValue, secondaryEnableTrendColor)\n\n  const icon = getTrendSignAndIcon(\n    !!showTrendSign,\n    primaryValue,\n    positiveSign,\n    negativeSign,\n    color,\n  )\n\n  const secondaryIcon = getTrendSignAndIcon(\n    !!secondaryShowTrendSign,\n    secondaryValue,\n    secondaryPositiveSign,\n    secondaryNegativeSign,\n    secondaryColor,\n    true,\n  )\n\n  const suffixNode = useMemo(\n    () => (\n      <>\n        {secondaryValue !== undefined && (\n          <div css={getSecondaryStatisticContainerStyle(secondaryColor)}>\n            {secondaryIcon}\n            <Statistic\n              _css={getSecondaryStatisticStyle}\n              groupSeparator={secondaryGroupSeparator}\n              value={secondaryValue}\n              precision={secondaryDecimalPlace}\n              prefix={secondaryPrefixText}\n              suffix={secondarySuffixText}\n              colorScheme={secondaryColor}\n            />\n          </div>\n        )}\n      </>\n    ),\n    [\n      secondaryColor,\n      secondaryDecimalPlace,\n      secondaryGroupSeparator,\n      secondaryIcon,\n      secondaryPrefixText,\n      secondarySuffixText,\n      secondaryValue,\n    ],\n  )\n\n  return (\n    <div css={getStatisticWrapperStyle(textAlign)} onClick={handleOnClick}>\n      <div css={getStatisticLabelStyle(textAlign)}>{label}</div>\n      <div css={getStatisticsContainerStyle(textAlign)}>\n        <div css={primaryStatisticContainerStyle}>\n          {icon}\n          <Statistic\n            _css={getStatisticStyle}\n            value={primaryValue}\n            precision={decimalPlace}\n            prefix={prefixText}\n            suffix={suffixText}\n            colorScheme={color}\n            groupSeparator={groupSeparator}\n          />\n        </div>\n        {suffixNode}\n      </div>\n    </div>\n  )\n}\nWrappedStatistic.displayName = \"WrappedStatistic\"\n\nexport const StatisticWidget: FC<StatisticWidgetProps> = (props) => {\n  const {\n    primaryValue,\n    triggerEventHandler,\n    handleUpdateDsl,\n    tooltipText,\n    updateComponentHeight,\n    updateComponentRuntimeProps,\n    deleteComponentRuntimeProps,\n  } = props\n\n  const previousValueRef = useRef<number | undefined>(primaryValue)\n  const signalRef = useRef<boolean>(false)\n\n  useEffect(() => {\n    if (signalRef.current) {\n      signalRef.current = false\n      return\n    }\n    previousValueRef.current = primaryValue\n  }, [primaryValue])\n\n  useEffect(() => {\n    updateComponentRuntimeProps({\n      setPrimaryValue: (value: number) => {\n        signalRef.current = true\n        handleUpdateDsl({ primaryValue: value })\n      },\n      resetPrimaryValue: () => {\n        handleUpdateDsl({\n          primaryValue: previousValueRef.current,\n        })\n      },\n    })\n    return () => {\n      deleteComponentRuntimeProps()\n    }\n  }, [\n    deleteComponentRuntimeProps,\n    handleUpdateDsl,\n    updateComponentRuntimeProps,\n  ])\n\n  const handleOnClick = useCallback(() => {\n    triggerEventHandler(\"click\")\n  }, [triggerEventHandler])\n\n  return (\n    <AutoHeightContainer\n      updateComponentHeight={updateComponentHeight}\n      enable={true}\n    >\n      <TooltipWrapper tooltipText={tooltipText} tooltipDisabled={!tooltipText}>\n        <div>\n          <WrappedStatistic {...props} handleOnClick={handleOnClick} />\n        </div>\n      </TooltipWrapper>\n    </AutoHeightContainer>\n  )\n}\nStatisticWidget.displayName = \"StatisticWidget\"\nexport default StatisticWidget\n"],"names":["overflowStyle","css","getAlignItems","textAlign","alignItemsStyle","getStatisticWrapperStyle","getSecondaryStatisticStyle","getStatisticStyle","getPrefixIconStyle","color","secondary","size","getSpecialThemeColor","primaryStatisticContainerStyle","getStatisticsContainerStyle","justifyContentStyle","getSecondaryStatisticContainerStyle","getColor","getStatisticLabelStyle","textAlignStyle","globalColor","illaPrefix","getNumberGroupSeparator","value","lang","_a","part","getIcon","iconName","AllData","getTrendSignAndIcon","show","positiveSign","negativeSign","positiveSignIcon","negativeSignIcon","icon","jsx","WrappedStatistic","props","builderInfo","useSelector","getBuilderInfo","label","primaryValue","secondaryValue","decimalPlace","prefixText","suffixText","secondaryPrefixText","secondarySuffixText","showTrendSign","showSeparator","enableTrendColor","secondaryDecimalPlace","secondaryShowTrendSign","secondaryPositiveSign","secondaryNegativeSign","secondaryShowSeparator","secondaryEnableTrendColor","handleOnClick","colorScheme","negativeColorScheme","positiveColorScheme","groupSeparator","secondaryGroupSeparator","useCallback","secondaryColor","secondaryIcon","suffixNode","useMemo","Statistic","jsxs","StatisticWidget","triggerEventHandler","handleUpdateDsl","tooltipText","updateComponentHeight","updateComponentRuntimeProps","deleteComponentRuntimeProps","previousValueRef","useRef","signalRef","useEffect","AutoHeightContainer","TooltipWrapper"],"mappings":"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"}