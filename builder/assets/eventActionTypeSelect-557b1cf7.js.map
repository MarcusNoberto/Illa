{"version":3,"file":"eventActionTypeSelect-557b1cf7.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/SelectSetter/eventActionTypeSelect.tsx"],"sourcesContent":["import { get } from \"lodash-es\"\nimport { FC, useCallback, useMemo } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { getWidgetExecutionResult } from \"@/redux/currentApp/executionTree/executionSelector\"\nimport { BaseSelectSetterProps } from \"./interface\"\nimport SearchSelectSetter from \"./searchSelect\"\n\nconst EventActionTypeSelect: FC<BaseSelectSetterProps> = (props) => {\n  const {\n    attrName,\n    parentAttrName,\n    handleUpdateDsl,\n    widgetDisplayName,\n    widgetOrAction,\n  } = props\n\n  const widgetDisplayNameMapProps = useSelector(getWidgetExecutionResult)\n  const selectedAction = useSelector(getCachedAction)\n\n  const oldEvent = useMemo(() => {\n    if (widgetOrAction === \"WIDGET\") {\n      return get(\n        widgetDisplayNameMapProps,\n        `${widgetDisplayName}.${parentAttrName}`,\n        {},\n      )\n    } else {\n      return get(selectedAction, `content.${parentAttrName}`, {})\n    }\n  }, [\n    widgetOrAction,\n    widgetDisplayNameMapProps,\n    widgetDisplayName,\n    parentAttrName,\n    selectedAction,\n  ])\n\n  const _finalAttrPath = parentAttrName ? parentAttrName : attrName\n  const handleUpdateDSLInner = useCallback(\n    (attrPath: string, value: unknown) => {\n      handleUpdateDsl(attrPath, {\n        actionType: value,\n        id: oldEvent?.id,\n        eventType: oldEvent?.eventType,\n      })\n    },\n    [handleUpdateDsl, oldEvent?.eventType, oldEvent?.id],\n  )\n\n  return (\n    <SearchSelectSetter\n      {...props}\n      attrName={_finalAttrPath}\n      handleUpdateDsl={handleUpdateDSLInner}\n    />\n  )\n}\nEventActionTypeSelect.displayName = \"EventActionTypeSelect\"\nexport default EventActionTypeSelect\n"],"names":["EventActionTypeSelect","props","attrName","parentAttrName","handleUpdateDsl","widgetDisplayName","widgetOrAction","widgetDisplayNameMapProps","useSelector","getWidgetExecutionResult","selectedAction","getCachedAction","oldEvent","useMemo","get","_finalAttrPath","handleUpdateDSLInner","useCallback","attrPath","value","jsx","SearchSelectSetter"],"mappings":"2cAQM,MAAAA,EAAoDC,GAAU,CAC5D,KAAA,CACJ,SAAAC,EACA,eAAAC,EACA,gBAAAC,EACA,kBAAAC,EACA,eAAAC,CACE,EAAAL,EAEEM,EAA4BC,EAAYC,CAAwB,EAChEC,EAAiBF,EAAYG,CAAe,EAE5CC,EAAWC,EAAAA,QAAQ,IACnBP,IAAmB,SACdQ,EACLP,EACA,GAAGF,CAAiB,IAAIF,CAAc,GACtC,CAAC,CAAA,EAGIW,EAAIJ,EAAgB,WAAWP,CAAc,GAAI,CAAA,CAAE,EAE3D,CACDG,EACAC,EACAF,EACAF,EACAO,CAAA,CACD,EAEKK,EAAiBZ,GAAkCD,EACnDc,EAAuBC,EAAA,YAC3B,CAACC,EAAkBC,IAAmB,CACpCf,EAAgBc,EAAU,CACxB,WAAYC,EACZ,GAAIP,GAAA,YAAAA,EAAU,GACd,UAAWA,GAAA,YAAAA,EAAU,SAAA,CACtB,CACH,EACA,CAACR,EAAiBQ,GAAA,YAAAA,EAAU,UAAWA,GAAA,YAAAA,EAAU,EAAE,CAAA,EAInD,OAAAQ,EAACC,EAAA,CACE,GAAGpB,EACJ,SAAUc,EACV,gBAAiBC,CAAA,CAAA,CAGvB,EACAhB,EAAsB,YAAc"}