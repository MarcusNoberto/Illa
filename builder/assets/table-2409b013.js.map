{"version":3,"file":"table-2409b013.js","sources":["../../src/widgetLibrary/TableWidget/table.tsx"],"sourcesContent":["import { convertPathToString } from \"@illa-public/dynamic-string\"\nimport { PaginationState } from \"@tanstack/react-table\"\nimport {\n  CellContext,\n  Table as ReactTable,\n  RowSelectionState,\n} from \"@tanstack/table-core\"\nimport { klona } from \"klona/json\"\nimport { debounce, isEqual, toPath } from \"lodash-es\"\nimport {\n  FC,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\"\nimport { useSelector } from \"react-redux\"\nimport {\n  FilterOperator,\n  FilterOptions,\n  Table,\n  TableHandler,\n  isFilterOption,\n  isNumber,\n  isObject,\n} from \"@illa-design/react\"\nimport { getIllaMode } from \"@/redux/config/configSelector\"\nimport { applyAlignmentStyle } from \"@/widgetLibrary/TableWidget/style\"\nimport {\n  ColumnItemShape,\n  TableWidgetProps,\n  WrappedTableProps,\n} from \"./interface\"\nimport {\n  getCellForType,\n  getMappedValueFromCellContext,\n  getStringPropertyValue,\n  transTableColumnEvent,\n} from \"./utils\"\n\nexport const WrappedTable = forwardRef<TableHandler<any>, WrappedTableProps>(\n  (props, ref) => {\n    const {\n      displayName,\n      data,\n      loading,\n      emptyState,\n      columns,\n      columnSizing,\n      filter,\n      refresh,\n      download,\n      downloadRawData,\n      overFlow,\n      pageSize,\n      pageIndex = 0,\n      rowSelection,\n      defaultSort,\n      columnVisibility,\n      multiRowSelection,\n      enableSingleCellSelection,\n      clickOutsideToResetSelection,\n      enableServerSidePagination,\n      totalRowCount,\n      paginationType,\n      nextBeforeCursor,\n      nextAfterCursor,\n      handleOnRefresh,\n      handleOnRowClick,\n      handleOnSortingChange,\n      handleOnPaginationChange,\n      handleOnFiltersChange,\n      handleOnRowSelectChange,\n      handleOnCellSelect,\n      handleUpdateMultiExecutionResult,\n      handleUpdateOriginalDSLMultiAttr,\n    } = props\n\n    const mode = useSelector(getIllaMode)\n    const [cachedData, setCachedData] = useState<any[]>([])\n\n    const formatData = useMemo(() => {\n      if (Array.isArray(data)) {\n        return data\n      }\n      return []\n    }, [data])\n\n    const isCursorPaginationEnabled = useMemo(() => {\n      return (\n        (paginationType === \"cursorBased\" ||\n          paginationType === \"graphqlRelayCursorBased\") &&\n        enableServerSidePagination\n      )\n    }, [paginationType, enableServerSidePagination])\n\n    const cursorBasedData = useMemo(() => {\n      const _pageSize = pageSize ? pageSize : data?.length ?? 10\n      const paginationOffset = pageIndex * _pageSize\n\n      return cachedData.slice(paginationOffset, paginationOffset + _pageSize)\n    }, [cachedData, pageIndex, pageSize, data?.length])\n\n    const updateCachedData = useCallback(\n      (data: Array<unknown>) => {\n        if (paginationType === \"cursorBased\") {\n          setCachedData((prevData = []) => {\n            if (isEqual(prevData, data)) {\n              return prevData\n            }\n            return [...prevData, ...data]\n          })\n        }\n      },\n      [paginationType],\n    )\n\n    useEffect(() => {\n      updateCachedData(formatData)\n    }, [formatData, updateCachedData])\n\n    const handleUpdateMulti = useCallback(\n      (value: Record<string, any>) => {\n        if (mode === \"edit\") {\n          handleUpdateOriginalDSLMultiAttr(value, true)\n        } else {\n          handleUpdateMultiExecutionResult([\n            {\n              displayName,\n              value,\n            },\n          ])\n        }\n      },\n      [\n        mode,\n        handleUpdateMultiExecutionResult,\n        handleUpdateOriginalDSLMultiAttr,\n        displayName,\n      ],\n    )\n\n    const onRowSelectionChange = useCallback(\n      (value?: RowSelectionState) => {\n        let selectedRow: unknown[] = []\n        let selectedRowIndex: unknown[] = []\n        if (isObject(value)) {\n          Object.keys(value)?.map((key) => {\n            const index = Number(key)\n            if (formatData[index]) {\n              selectedRow.push(formatData[index])\n              selectedRowIndex.push(index)\n            }\n          })\n        }\n        const updateValue = {\n          selectedRowIndex,\n          selectedRow,\n          rowSelection: value,\n        }\n        handleUpdateMulti(updateValue)\n        handleOnRowSelectChange?.()\n      },\n      [formatData, handleUpdateMulti, handleOnRowSelectChange],\n    )\n\n    const onPaginationChange = useCallback(\n      (paginationState: PaginationState, table: ReactTable<any>) => {\n        const data = table.getSortedRowModel().rows\n        const displayedData = data?.map((item) => {\n          const dataRecord: Record<string, unknown> = {}\n          item.getVisibleCells().forEach((cell) => {\n            dataRecord[cell.column.id] = cell.getValue()\n          })\n          return dataRecord\n        })\n        const displayedDataIndices = data?.map((item) => {\n          return item.index\n        })\n        const { pageIndex: _pageIndex, pageSize } = paginationState\n        const paginationOffset = _pageIndex > 0 ? _pageIndex * pageSize : 0\n        const updateValue: Record<string, unknown> = {\n          pageIndex: _pageIndex,\n          paginationOffset,\n          displayedData,\n          displayedDataIndices,\n        }\n        if (enableServerSidePagination) {\n          if (paginationType === \"cursorBased\") {\n            if (pageIndex > _pageIndex) {\n              // updateValue[\"beforeCursor\"] = nextAfterCursor\n            } else {\n              updateValue[\"afterCursor\"] = nextAfterCursor\n            }\n          } else if (paginationType === \"graphqlRelayCursorBased\") {\n            if (pageIndex > _pageIndex) {\n              updateValue[\"beforeCursor\"] = nextBeforeCursor\n              updateValue[\"afterCursor\"] = null\n            } else {\n              updateValue[\"beforeCursor\"] = null\n              updateValue[\"afterCursor\"] = nextAfterCursor\n            }\n          }\n        }\n        // only update execution result\n        handleUpdateMultiExecutionResult([\n          {\n            displayName,\n            value: updateValue,\n          },\n        ])\n        handleOnPaginationChange?.()\n      },\n      [\n        displayName,\n        handleUpdateMultiExecutionResult,\n        handleOnPaginationChange,\n        enableServerSidePagination,\n        nextBeforeCursor,\n        nextAfterCursor,\n        paginationType,\n        pageIndex,\n      ],\n    )\n\n    const onFiltersChange = useCallback(\n      (filters: FilterOptions[], operator: FilterOperator) => {\n        handleUpdateMultiExecutionResult([\n          {\n            displayName,\n            value: {\n              filters,\n              filterOperator: operator,\n            },\n          },\n        ])\n        handleOnFiltersChange?.()\n      },\n      [displayName, handleUpdateMultiExecutionResult, handleOnFiltersChange],\n    )\n\n    return (\n      <Table\n        bordered\n        striped\n        borderedCell\n        pinedHeader\n        w=\"100%\"\n        h=\"100%\"\n        tableRef={ref}\n        enableColumnResizing={mode === \"edit\"}\n        enableSingleCellSelection={enableSingleCellSelection}\n        serverSidePagination={enableServerSidePagination}\n        total={totalRowCount}\n        colorScheme={\"techPurple\"}\n        rowSelection={rowSelection}\n        data={paginationType === \"cursorBased\" ? cursorBasedData : formatData}\n        columns={columns}\n        columnSizing={columnSizing}\n        filter={filter}\n        loading={loading}\n        refresh={refresh}\n        download={download}\n        downloadRawData={downloadRawData}\n        overFlow={overFlow}\n        pagination={{\n          pageSize: enableServerSidePagination\n            ? pageSize\n              ? pageSize\n              : data?.length\n            : pageSize,\n          disableSimplePageJump: isCursorPaginationEnabled,\n        }}\n        emptyProps={{ description: emptyState }}\n        defaultSort={defaultSort}\n        columnVisibility={columnVisibility}\n        multiRowSelection={multiRowSelection}\n        clickOutsideToResetRowSelect={clickOutsideToResetSelection}\n        onRefresh={handleOnRefresh}\n        onRowClick={handleOnRowClick}\n        onPaginationChange={onPaginationChange}\n        onGlobalFiltersChange={onFiltersChange}\n        onColumnFiltersChange={handleOnFiltersChange}\n        onColumnSizingChange={debounce((columnSizing) => {\n          handleUpdateMulti({ columnSizing })\n        }, 100)}\n        onRowSelectionChange={onRowSelectionChange}\n        onSortingChange={(sortState) => {\n          let sort\n          if (sortState?.length) {\n            sort = {\n              sortKey: sortState[0].id,\n              sortOrder: sortState[0].desc ? \"descend\" : \"ascend\",\n            }\n          }\n          handleUpdateMultiExecutionResult([\n            {\n              displayName,\n              value: { sort },\n            },\n          ])\n          handleOnSortingChange?.()\n        }}\n        onCellSelectionChange={(cell) => {\n          const selectedCell: Record<string, unknown> = cell\n            ? {\n                index: cell.row.index,\n                columnName: cell.column.id,\n                value: cell.getValue(),\n              }\n            : {}\n          if (cell?.column.columnDef.meta?.haveMappedValue) {\n            selectedCell[\"mappedValue\"] =\n              cell.column.columnDef.meta?.getRenderedValueAsString?.(\n                cell.getContext(),\n              )\n          }\n          handleUpdateMultiExecutionResult([\n            {\n              displayName,\n              value: { selectedCell },\n            },\n          ])\n          handleOnCellSelect()\n        }}\n      />\n    )\n  },\n)\n\nexport const TableWidget: FC<TableWidgetProps> = (props) => {\n  const {\n    emptyState,\n    selectedRow,\n    loading,\n    columns,\n    filter,\n    download,\n    overFlow,\n    pageSize,\n    dataSource,\n    dataSourceJS,\n    dataSourceMode,\n    displayName,\n    defaultSortKey,\n    defaultSortOrder,\n    multiRowSelection,\n    columnSizing,\n    handleUpdateDsl,\n    updateComponentRuntimeProps,\n    deleteComponentRuntimeProps,\n    handleUpdateOriginalDSLMultiAttr,\n    handleUpdateMultiExecutionResult,\n    triggerEventHandler,\n    triggerMappedEventHandler,\n    ...otherProps\n  } = props\n\n  const tableRef = useRef<TableHandler<any>>(null)\n\n  const handleOnRefresh = useCallback(() => {\n    triggerEventHandler(\"refresh\")\n  }, [triggerEventHandler])\n\n  const handleOnCellSelect = useCallback(() => {\n    triggerEventHandler(\"onCellSelect\")\n  }, [triggerEventHandler])\n\n  const handleOnRowClick = useCallback(() => {\n    triggerEventHandler(\"rowClick\")\n  }, [triggerEventHandler])\n\n  const handleOnRowSelectChange = useCallback(() => {\n    triggerEventHandler(\"rowSelectChange\")\n  }, [triggerEventHandler])\n\n  const handleOnSortingChange = useCallback(() => {\n    triggerEventHandler(\"sortingChange\")\n  }, [triggerEventHandler])\n\n  const handleOnPaginationChange = useCallback(() => {\n    triggerEventHandler(\"paginationChange\")\n  }, [triggerEventHandler])\n\n  const handleOnFiltersChange = useCallback(() => {\n    triggerEventHandler(\"filtersChange\")\n  }, [triggerEventHandler])\n\n  const handleOnClickMenuItem = useCallback(\n    (path: string, index?: number) => {\n      if (isNumber(index)) {\n        triggerMappedEventHandler(\n          \"clickMenuItem\",\n          path,\n          index,\n          (path) => {\n            return convertPathToString(toPath(path).slice(-2))\n          },\n          (dynamicString) => {\n            // if dynamicString contain currentRow return true\n            return dynamicString.includes(\"currentRow\")\n          },\n        )\n      } else {\n        triggerEventHandler(\"clickMenuItem\", path)\n      }\n    },\n    [triggerEventHandler, triggerMappedEventHandler],\n  )\n\n  const isColumnsKey = useCallback(\n    (key: string) => {\n      const columnsKeys = columns.map((item: ColumnItemShape) => {\n        return item.accessorKey\n      })\n      return columnsKeys.includes(key)\n    },\n    [columns],\n  )\n\n  const defaultSort = useMemo(() => {\n    if (!defaultSortKey || defaultSortKey === \"default\") return []\n    if (!isColumnsKey(defaultSortKey)) return []\n\n    return [\n      {\n        id: defaultSortKey,\n        desc: defaultSortOrder === \"descend\",\n      },\n    ]\n  }, [defaultSortOrder, defaultSortKey, isColumnsKey])\n\n  const columnVisibility = useMemo(() => {\n    const res: Record<string, boolean> = {}\n    columns?.forEach((item) => {\n      const { visible, accessorKey } = item as ColumnItemShape\n      if (!visible) {\n        res[accessorKey] = false\n      }\n    })\n    return res\n  }, [columns])\n\n  const columnsDef = useMemo(() => {\n    const res: ColumnItemShape[] = []\n    columns?.forEach((item, index) => {\n      const eventPath = `rowEvents.${index}`\n      const transItem = klona(item) as ColumnItemShape\n      transItem[\"meta\"] = {\n        haveMappedValue: \"mappedValue\" in transItem,\n        getBackgroundColor: (props: CellContext<any, unknown>) => {\n          return getMappedValueFromCellContext(\n            props,\n            transItem.backgroundColor,\n            transItem.fromCurrentRow,\n            \"backgroundColor\",\n            \"\",\n          )\n        },\n        getRenderedValueAsString: (props: CellContext<any, unknown>) => {\n          return getStringPropertyValue(\n            props,\n            transItem.mappedValue,\n            transItem.fromCurrentRow,\n          )\n        },\n        style: applyAlignmentStyle(item.alignment),\n        custom: item.custom,\n      }\n      transItem[\"cell\"] = getCellForType(\n        transItem,\n        eventPath,\n        handleOnClickMenuItem,\n        index,\n      )\n      res.push(transItem)\n    })\n    return res\n  }, [columns, handleOnClickMenuItem])\n\n  const realDataSourceArray = useMemo(() => {\n    if (dataSourceMode === \"dynamic\") {\n      return dataSourceJS ? dataSourceJS : []\n    }\n    return dataSource ? dataSource : []\n  }, [dataSource, dataSourceJS, dataSourceMode])\n\n  const rowEvents = useMemo(() => {\n    const res: Record<string, any> = {}\n    columns?.forEach((item, index) => {\n      const { events } = item as ColumnItemShape\n      if (events) {\n        res[index] = transTableColumnEvent(events, realDataSourceArray.length)\n      }\n    })\n    return res\n  }, [columns, realDataSourceArray?.length])\n\n  useEffect(() => {\n    handleUpdateOriginalDSLMultiAttr(\n      {\n        rowEvents,\n      },\n      true,\n    )\n  }, [handleUpdateOriginalDSLMultiAttr, rowEvents])\n\n  useEffect(() => {\n    // use accessorKey as origin column name\n    const customColumnIndices = columns.reduce<Record<number, string>>(\n      (acc, column, index) => {\n        if (column.custom) {\n          acc[index] = column.header\n        }\n        return acc\n      },\n      {},\n    )\n    const columnNameIndices = columns.reduce<Record<number, string>>(\n      (acc, column, index) => {\n        if (column.custom) {\n          acc[index] = column.header\n        } else {\n          acc[index] = column.accessorKey\n        }\n        return acc\n      },\n      {},\n    )\n    const renamedColumnNames = columns.reduce<Record<string, string>>(\n      (acc, column) => {\n        if (column.header !== column.accessorKey && !column.custom) {\n          acc[column.accessorKey] = column.header\n        }\n        return acc\n      },\n      {},\n    )\n    const columnVisibility = columns.reduce<Record<string, boolean>>(\n      (acc, column) => {\n        if (column.custom) {\n          acc[column.header] = !!column.visible\n        } else {\n          acc[column.accessorKey] = !!column.visible\n        }\n        return acc\n      },\n      {},\n    )\n    const columnMapper = columns.reduce<Record<string, unknown>>(\n      (acc, column) => {\n        if (column.custom) {\n          acc[column.header] = column\n        } else {\n          // use accessorKey as origin column name\n          acc[column.accessorKey] = column\n        }\n        return acc\n      },\n      {},\n    )\n\n    handleUpdateOriginalDSLMultiAttr(\n      {\n        customColumnIndices,\n        columnNameIndices,\n        renamedColumnNames,\n        columnVisibility,\n        columnMapper,\n      },\n      true,\n    )\n  }, [handleUpdateOriginalDSLMultiAttr, columns])\n\n  useEffect(() => {\n    updateComponentRuntimeProps({\n      clearSelection: () => {\n        tableRef.current?.clearSelection()\n      },\n      clearFilters: () => {\n        tableRef.current?.setGlobalFilters([], \"and\")\n      },\n      setFilters: (filters: unknown, operator: string) => {\n        const filterOperator =\n          operator === \"and\" || operator === \"or\" ? operator : \"and\"\n        if (Array.isArray(filters)) {\n          const filterOptions = filters.filter((value) => {\n            return isFilterOption(value)\n          })\n          tableRef.current?.setGlobalFilters(filterOptions, filterOperator)\n        }\n      },\n      setSort: (sortKey: string, order: string) => {\n        if (isColumnsKey(sortKey)) {\n          tableRef.current?.table.setSorting([\n            {\n              id: sortKey,\n              desc: order !== \"ascend\",\n            },\n          ])\n        }\n      },\n      selectPage: (pageIndex: number) => {\n        if (!isNumber(pageIndex)) {\n          console.error(\"TypeError: value is not a number\")\n          return\n        }\n        tableRef.current?.selectPage(pageIndex)\n      },\n      selectRow: (indexOrIndices: unknown) => {\n        if (isNumber(indexOrIndices)) {\n          tableRef.current?.selectRow({ [indexOrIndices]: true })\n        } else if (Array.isArray(indexOrIndices)) {\n          const rowSelection = indexOrIndices\n            .slice(0, multiRowSelection ? undefined : 1)\n            .reduce((acc, value) => {\n              if (isNumber(value)) {\n                acc[value] = true\n              }\n              console.error(`TypeError: ${value} is not a number`)\n              return acc\n            }, {})\n          tableRef.current?.selectRow(rowSelection)\n        } else {\n          console.error(\"TypeError: value is not a number or array\")\n        }\n      },\n    })\n    return () => {\n      deleteComponentRuntimeProps()\n    }\n  }, [\n    updateComponentRuntimeProps,\n    deleteComponentRuntimeProps,\n    displayName,\n    multiRowSelection,\n    isColumnsKey,\n  ])\n\n  return (\n    <WrappedTable\n      {...otherProps}\n      ref={tableRef}\n      selectedRow={selectedRow}\n      displayName={displayName}\n      data={realDataSourceArray}\n      emptyState={emptyState}\n      loading={loading}\n      filter={filter}\n      columns={columnsDef}\n      columnSizing={columnSizing}\n      download={download}\n      overFlow={overFlow}\n      pageSize={pageSize}\n      columnVisibility={columnVisibility}\n      defaultSort={defaultSort}\n      multiRowSelection={multiRowSelection}\n      triggerMappedEventHandler={triggerMappedEventHandler}\n      updateComponentRuntimeProps={updateComponentRuntimeProps}\n      deleteComponentRuntimeProps={deleteComponentRuntimeProps}\n      handleUpdateOriginalDSLMultiAttr={handleUpdateOriginalDSLMultiAttr}\n      handleUpdateMultiExecutionResult={handleUpdateMultiExecutionResult}\n      handleUpdateDsl={handleUpdateDsl}\n      handleOnCellSelect={handleOnCellSelect}\n      handleOnSortingChange={handleOnSortingChange}\n      handleOnPaginationChange={handleOnPaginationChange}\n      handleOnFiltersChange={handleOnFiltersChange}\n      handleOnRowSelectChange={handleOnRowSelectChange}\n      handleOnRowClick={handleOnRowClick}\n      handleOnRefresh={handleOnRefresh}\n    />\n  )\n}\n\nWrappedTable.displayName = \"WrappedTable\"\nexport default TableWidget\n"],"names":["WrappedTable","forwardRef","props","ref","displayName","data","loading","emptyState","columns","columnSizing","filter","refresh","download","downloadRawData","overFlow","pageSize","pageIndex","rowSelection","defaultSort","columnVisibility","multiRowSelection","enableSingleCellSelection","clickOutsideToResetSelection","enableServerSidePagination","totalRowCount","paginationType","nextBeforeCursor","nextAfterCursor","handleOnRefresh","handleOnRowClick","handleOnSortingChange","handleOnPaginationChange","handleOnFiltersChange","handleOnRowSelectChange","handleOnCellSelect","handleUpdateMultiExecutionResult","handleUpdateOriginalDSLMultiAttr","mode","useSelector","getIllaMode","cachedData","setCachedData","useState","formatData","useMemo","isCursorPaginationEnabled","cursorBasedData","_pageSize","paginationOffset","updateCachedData","useCallback","prevData","isEqual","useEffect","handleUpdateMulti","value","onRowSelectionChange","selectedRow","selectedRowIndex","isObject","_a","key","index","onPaginationChange","paginationState","table","displayedData","item","dataRecord","cell","displayedDataIndices","_pageIndex","updateValue","onFiltersChange","filters","operator","jsx","Table","debounce","sortState","sort","selectedCell","_c","_b","TableWidget","dataSource","dataSourceJS","dataSourceMode","defaultSortKey","defaultSortOrder","handleUpdateDsl","updateComponentRuntimeProps","deleteComponentRuntimeProps","triggerEventHandler","triggerMappedEventHandler","otherProps","tableRef","useRef","handleOnClickMenuItem","path","isNumber","convertPathToString","toPath","dynamicString","isColumnsKey","res","visible","accessorKey","columnsDef","eventPath","transItem","klona","getMappedValueFromCellContext","getStringPropertyValue","applyAlignmentStyle","getCellForType","realDataSourceArray","rowEvents","events","transTableColumnEvent","customColumnIndices","acc","column","columnNameIndices","renamedColumnNames","columnMapper","filterOperator","filterOptions","isFilterOption","sortKey","order","indexOrIndices"],"mappings":"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"}