{"version":3,"file":"index-35652f1d.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/DataGridSetter/ColumnMappedSelect/style.ts","../../src/page/App/components/InspectPanel/PanelSetters/DataGridSetter/ColumnMappedSelect/index.tsx"],"sourcesContent":["import { css } from \"@emotion/react\"\n\nexport const basicDynamicSetterContainerStyle = css`\n  display: flex;\n  padding: 8px 0;\n  flex-direction: column;\n  gap: 8px;\n  width: 100%;\n`\nexport const dynamicSelectHeaderStyle = css`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`\nexport const dynamicSelectSetterStyle = css`\n  width: 100%;\n`\n","import { hasDynamicStringSnippet } from \"@illa-public/dynamic-string\"\nimport { get, isString } from \"lodash-es\"\nimport { FC, useCallback, useMemo } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { Select } from \"@illa-design/react\"\nimport { CodeEditor } from \"@/components/CodeEditor\"\nimport {\n  CODE_LANG,\n  CODE_TYPE,\n} from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport {\n  getNeedComputedValueWithDataList,\n  realInputValueWithDataList,\n} from \"@/page/App/components/InspectPanel/PanelSetters/DataGridSetter/utils\"\nimport { DynamicIcon } from \"@/page/App/components/InspectPanel/PanelSetters/PublicComponent/DynamicIcon\"\nimport { PanelLabel } from \"@/page/App/components/InspectPanel/components/Label\"\nimport {\n  getExecutionError,\n  getExecutionResult,\n} from \"@/redux/currentApp/executionTree/executionSelector\"\nimport { RootState } from \"@/store\"\nimport { ColumnMappedSelectProps } from \"./interface\"\nimport {\n  basicDynamicSetterContainerStyle,\n  dynamicSelectHeaderStyle,\n  dynamicSelectSetterStyle,\n} from \"./style\"\n\nconst ColumnMappedSelect: FC<ColumnMappedSelectProps> = (props) => {\n  const {\n    placeholder,\n    attrName,\n    handleUpdateDsl,\n    expectedType,\n    value,\n    widgetDisplayName,\n    labelName,\n    detailedDescription,\n    defaultValue,\n    labelDesc,\n    options,\n    wrappedCodeFunc,\n  } = props\n\n  const targetComponentProps = useSelector<RootState, Record<string, any>>(\n    (rootState) => {\n      const executionTree = getExecutionResult(rootState)\n      return get(executionTree, widgetDisplayName, {})\n    },\n  )\n\n  const isDynamic =\n    get(\n      targetComponentProps,\n      `${widgetDisplayName}.${attrName}JS`,\n      \"select\",\n    ) === \"dynamic\"\n\n  const executionErrors = useSelector(getExecutionError)\n  const isError = useMemo(() => {\n    return (\n      (executionErrors[`${widgetDisplayName}.${attrName}JS`] ?? [])?.length > 0\n    )\n  }, [attrName, executionErrors, widgetDisplayName])\n\n  const handleClickFxButton = useCallback(() => {\n    if (isDynamic) {\n      handleUpdateDsl(`${widgetDisplayName}.${attrName}JS`, \"select\")\n      handleUpdateDsl(attrName, undefined)\n    } else {\n      handleUpdateDsl(`${widgetDisplayName}.${attrName}JS`, \"dynamic\")\n    }\n  }, [attrName, handleUpdateDsl, isDynamic, widgetDisplayName])\n\n  const dataSourceMode = get(targetComponentProps, \"dataSourceMode\", \"dynamic\")\n\n  const finalWrapperCode = useMemo(() => {\n    if (\n      hasDynamicStringSnippet(value ?? \"\") &&\n      isString(value) &&\n      value?.includes(\"currentRow\")\n    ) {\n      return (value: string) => {\n        return getNeedComputedValueWithDataList(\n          value,\n          widgetDisplayName,\n          dataSourceMode,\n        )\n      }\n    }\n    return wrappedCodeFunc\n  }, [value, wrappedCodeFunc, widgetDisplayName, dataSourceMode])\n\n  const finalValue = useMemo(() => {\n    const v = value ?? defaultValue\n\n    if (widgetDisplayName && isString(v) && v.includes(\"currentRow\")) {\n      return realInputValueWithDataList(\n        value ?? defaultValue,\n        widgetDisplayName,\n      )\n    }\n\n    if (value === undefined && defaultValue === undefined) {\n      return undefined\n    }\n    if (!isString(value ?? defaultValue)) {\n      return `{{ ${value ?? defaultValue} }}`\n    }\n    return value ?? defaultValue\n  }, [widgetDisplayName, value, defaultValue])\n\n  const onChange = useCallback(\n    (value: string) => {\n      let output = value\n      if (\n        hasDynamicStringSnippet(value ?? \"\") &&\n        value.includes(\"currentRow\")\n      ) {\n        output = getNeedComputedValueWithDataList(\n          value,\n          widgetDisplayName,\n          dataSourceMode,\n        )\n        handleUpdateDsl(attrName, output)\n      } else {\n        if (output === \"\") {\n          handleUpdateDsl(attrName, undefined)\n        } else {\n          handleUpdateDsl(attrName, output)\n        }\n      }\n    },\n    [attrName, dataSourceMode, handleUpdateDsl, widgetDisplayName],\n  )\n\n  return (\n    <div css={basicDynamicSetterContainerStyle}>\n      <div css={dynamicSelectHeaderStyle}>\n        <PanelLabel labelName={labelName} labelDesc={labelDesc} />\n        <DynamicIcon\n          isDynamic={isDynamic}\n          onClick={handleClickFxButton}\n          hasRightContent={false}\n        />\n      </div>\n      <div css={dynamicSelectSetterStyle}>\n        {isDynamic ? (\n          <CodeEditor\n            value={finalValue ?? \"\"}\n            onChange={onChange}\n            showLineNumbers={false}\n            placeholder={placeholder}\n            expectValueType={expectedType}\n            lang={CODE_LANG.JAVASCRIPT}\n            maxHeight=\"208px\"\n            minHeight=\"30px\"\n            maxWidth=\"100%\"\n            codeType={CODE_TYPE.EXPRESSION}\n            modalTitle={labelName}\n            modalDescription={labelDesc ?? detailedDescription}\n            scopeOfAutoComplete=\"page\"\n            wrappedCodeFunc={finalWrapperCode}\n          />\n        ) : (\n          <Select\n            colorScheme=\"techPurple\"\n            placeholder={placeholder}\n            options={options}\n            value={finalValue}\n            onChange={(v) => handleUpdateDsl?.(attrName, v)}\n            showSearch\n            allowClear\n            error={isError}\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n\nColumnMappedSelect.displayName = \"ColumnMappedSelect\"\nexport default ColumnMappedSelect\n"],"names":["basicDynamicSetterContainerStyle","css","dynamicSelectHeaderStyle","dynamicSelectSetterStyle","ColumnMappedSelect","props","placeholder","attrName","handleUpdateDsl","expectedType","value","widgetDisplayName","labelName","detailedDescription","defaultValue","labelDesc","options","wrappedCodeFunc","targetComponentProps","useSelector","rootState","executionTree","getExecutionResult","get","isDynamic","executionErrors","getExecutionError","isError","useMemo","_a","handleClickFxButton","useCallback","dataSourceMode","finalWrapperCode","hasDynamicStringSnippet","isString","getNeedComputedValueWithDataList","finalValue","v","realInputValueWithDataList","onChange","output","jsxs","jsx","PanelLabel","DynamicIcon","CodeEditor","CODE_LANG","CODE_TYPE","Select"],"mappings":"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"}