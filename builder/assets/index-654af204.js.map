{"version":3,"file":"index-654af204.js","sources":["../../src/components/RecordEditor/style.ts","../../src/components/RecordEditor/index.tsx"],"sourcesContent":["import { SerializedStyles, css } from \"@emotion/react\"\nimport { getColor, globalColor, illaPrefix } from \"@illa-design/react\"\n\nexport function applyRecordEditorContainerStyle(label: string) {\n  return css`\n    display: flex;\n    padding-right: ${label !== \"\" ? \"16px\" : \"0\"};\n    flex-direction: row;\n  `\n}\n\nexport const recordEditorStyle = css`\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n`\n\nexport const recordStyle = css`\n  display: inline-flex;\n  flex-direction: row;\n  align-items: center;\n  min-height: 48px;\n\n  & > button {\n    color: ${globalColor(`--${illaPrefix}-grayBlue-05`)};\n\n    :hover {\n      color: ${globalColor(`--${illaPrefix}-grayBlue-02`)};\n      transition: color 200ms ease-in-out;\n    }\n  }\n`\n\nexport const recordKeyStyle = css`\n  min-width: 160px;\n  flex-grow: 1;\n  width: 0;\n  height: auto;\n\n  .ͼ1.cm-editor {\n    border-radius: 8px 0 0 8px;\n  }\n`\n\nexport const recordValueStyle = css`\n  margin-left: -1px;\n  flex-grow: 1;\n  width: 0;\n  height: auto;\n\n  .ͼ1.cm-editor {\n    border-radius: 0;\n  }\n`\n\nexport function applyRecordValueStyle(fillOnly?: boolean): SerializedStyles {\n  const fillStyle = fillOnly\n    ? css`\n        .ͼ1.cm-editor {\n          border-radius: 0 8px 8px 0;\n        }\n      `\n    : css`\n        .ͼ1.cm-editor {\n          border-radius: 0;\n        }\n      `\n\n  return css`\n    margin-left: -1px;\n    flex-grow: 1;\n    width: 0;\n    height: auto;\n    ${fillStyle};\n  `\n}\n\nexport const recordEditorLabelStyle = css`\n  min-width: 160px;\n  margin-left: 16px;\n  margin-right: 16px;\n  height: 48px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: end;\n  font-size: 14px;\n  font-weight: 500;\n  color: ${globalColor(`--${illaPrefix}-grayBlue-02`)};\n`\n\nexport const subLabelStyle = css`\n  line-height: 20px;\n  color: ${getColor(\"techPurple\", \"03\")};\n  font-size: 12px;\n  cursor: pointer;\n`\n","import { FC, useMemo } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport {\n  AddIcon,\n  Button,\n  DeleteIcon,\n  Input,\n  globalColor,\n  illaPrefix,\n} from \"@illa-design/react\"\nimport { CodeEditor } from \"@/components/CodeEditor\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport { RecordEditorProps } from \"./interface\"\nimport {\n  applyRecordEditorContainerStyle,\n  applyRecordValueStyle,\n  recordEditorLabelStyle,\n  recordEditorStyle,\n  recordKeyStyle,\n  recordStyle,\n  subLabelStyle,\n} from \"./style\"\n\nexport const RecordEditor: FC<RecordEditorProps> = (props) => {\n  const {\n    fillOnly,\n    name,\n    records,\n    customRender,\n    label,\n    subLabel,\n    onSubLabelClick,\n    onDelete,\n    onAdd,\n    withoutCodeMirror,\n    onChangeKey,\n    onChangeValue,\n    valueInputType,\n  } = props\n\n  const { t } = useTranslation()\n\n  const valueExpectedType = useMemo(\n    () =>\n      valueInputType\n        ? valueInputType === VALIDATION_TYPES.ANY\n          ? undefined\n          : valueInputType\n        : VALIDATION_TYPES.STRING,\n    [valueInputType],\n  )\n\n  const recordList = useMemo(() => {\n    return (\n      <>\n        {records?.map((record, index) => {\n          if (customRender) {\n            return (\n              <div css={recordStyle} key={index}>\n                {customRender(record, index, fillOnly)}\n                <Button\n                  type=\"button\"\n                  ml=\"-1px\"\n                  minW=\"32px\"\n                  variant=\"outline\"\n                  bdRadius=\"0 8px 8px 0\"\n                  colorScheme=\"grayBlue\"\n                  onClick={() => {\n                    onDelete?.(index, record, name)\n                  }}\n                  leftIcon={<DeleteIcon />}\n                />\n              </div>\n            )\n          }\n          return (\n            <div css={recordStyle} key={index}>\n              {withoutCodeMirror ? (\n                <Input\n                  colorScheme={\"techPurple\"}\n                  height=\"32px\"\n                  value={record.key}\n                  readOnly={fillOnly}\n                  minW=\"160px\"\n                  width=\"0\"\n                  flexGrow=\"1\"\n                  bdRadius=\"8px 0 0 8px\"\n                  placeholder=\"key\"\n                  onChange={(value) => {\n                    onChangeKey?.(index, value.trim(), record.value, name)\n                  }}\n                />\n              ) : (\n                <CodeEditor\n                  wrapperCss={recordKeyStyle}\n                  height=\"32px\"\n                  editable={!fillOnly}\n                  value={record.key}\n                  lang={CODE_LANG.JAVASCRIPT}\n                  placeholder=\"key\"\n                  expectValueType={VALIDATION_TYPES.STRING}\n                  onChange={(value) => {\n                    onChangeKey?.(index, value.trim(), record.value, name)\n                  }}\n                  singleLine\n                />\n              )}\n              {withoutCodeMirror ? (\n                <Input\n                  colorScheme={\"techPurple\"}\n                  height=\"32px\"\n                  bdRadius={fillOnly ? \"0 8px 8px 0\" : \"0\"}\n                  ml=\"-1px\"\n                  placeholder=\"value\"\n                  minW=\"160px\"\n                  width=\"0\"\n                  flexGrow=\"1\"\n                  value={record.value}\n                  onChange={(value) => {\n                    onChangeValue?.(index, record.key, value.trim(), name)\n                  }}\n                />\n              ) : (\n                <CodeEditor\n                  height=\"32px\"\n                  wrapperCss={applyRecordValueStyle(fillOnly)}\n                  lang={CODE_LANG.JAVASCRIPT}\n                  placeholder=\"value\"\n                  value={record.value}\n                  expectValueType={valueExpectedType}\n                  singleLine\n                  onChange={(value) => {\n                    onChangeValue?.(index, record.key, value.trim(), name)\n                  }}\n                />\n              )}\n              {!fillOnly && (\n                <Button\n                  type=\"button\"\n                  ml=\"-1px\"\n                  minW=\"32px\"\n                  variant=\"outline\"\n                  bdRadius=\"0 8px 8px 0\"\n                  colorScheme=\"grayBlue\"\n                  onClick={() => {\n                    onDelete?.(index, record, name)\n                  }}\n                  leftIcon={<DeleteIcon />}\n                />\n              )}\n            </div>\n          )\n        })}\n      </>\n    )\n  }, [\n    customRender,\n    fillOnly,\n    name,\n    onChangeKey,\n    onChangeValue,\n    onDelete,\n    records,\n    valueExpectedType,\n    withoutCodeMirror,\n  ])\n\n  return (\n    <div css={applyRecordEditorContainerStyle(label)}>\n      {label != \"\" && (\n        <span css={recordEditorLabelStyle}>\n          <span>{label}</span>\n          {subLabel && (\n            <span css={subLabelStyle} onClick={onSubLabelClick}>\n              {subLabel}\n            </span>\n          )}\n        </span>\n      )}\n      <div css={recordEditorStyle}>\n        {recordList}\n        {!fillOnly && (\n          <span>\n            <Button\n              type=\"button\"\n              mb=\"8px\"\n              pd=\"1px 8px\"\n              colorScheme=\"techPurple\"\n              size=\"medium\"\n              variant=\"text\"\n              onClick={() => {\n                onAdd?.(name)\n              }}\n              leftIcon={\n                <AddIcon color={globalColor(`--${illaPrefix}-techPurple-03`)} />\n              }\n            >\n              {t(\"editor.action.panel.btn.new\")}\n            </Button>\n          </span>\n        )}\n      </div>\n    </div>\n  )\n}\n\nRecordEditor.displayName = \"RecordEditor\"\n"],"names":["applyRecordEditorContainerStyle","label","css","recordEditorStyle","recordStyle","globalColor","illaPrefix","recordKeyStyle","recordValueStyle","applyRecordValueStyle","fillOnly","fillStyle","recordEditorLabelStyle","subLabelStyle","getColor","RecordEditor","props","name","records","customRender","subLabel","onSubLabelClick","onDelete","onAdd","withoutCodeMirror","onChangeKey","onChangeValue","valueInputType","t","useTranslation","valueExpectedType","useMemo","VALIDATION_TYPES","recordList","jsx","Fragment","record","index","jsxs","Button","DeleteIcon","Input","value","CodeEditor","CODE_LANG","AddIcon"],"mappings":"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"}