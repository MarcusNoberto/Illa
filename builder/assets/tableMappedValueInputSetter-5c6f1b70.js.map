{"version":3,"file":"tableMappedValueInputSetter-5c6f1b70.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/TableSetter/tableMappedValueInputSetter.tsx"],"sourcesContent":["import { get, toPath } from \"lodash-es\"\nimport { FC, useCallback, useMemo } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { BaseInputSetterProps } from \"@/page/App/components/InspectPanel/PanelSetters/InputSetter/interface\"\nimport { getExecutionResult } from \"@/redux/currentApp/executionTree/executionSelector\"\nimport { RootState } from \"@/store\"\nimport { JSToString, stringToJS } from \"@/utils/evaluateDynamicString/utils\"\nimport BaseInput from \"../InputSetter/BaseInput\"\n\nconst realInputValue = (\n  attrValue: string | undefined,\n  dataPath: string,\n  widgetDisplayName: string,\n) => {\n  if (attrValue === \"\" || attrValue == undefined) return \"\"\n  const value = `${attrValue.substring(\n    `{{${widgetDisplayName}.${dataPath}.map((currentRow) => ( `.length,\n    attrValue.length - 4,\n  )}`\n  return attrValue.includes(\"currentRow\") ? JSToString(value) : attrValue\n}\n\nconst getNeedComputedValue = (\n  value: string,\n  dataPath: string,\n  widgetDisplayName: string,\n) => {\n  const stringToCanEvaluate = stringToJS(value)\n  if (stringToCanEvaluate === \"\") {\n    return stringToCanEvaluate\n  }\n  return `{{${widgetDisplayName}.${dataPath}.map((currentRow) => ( ${stringToCanEvaluate}))}}`\n}\n\nconst TableMappedValueInputSetter: FC<BaseInputSetterProps> = (props) => {\n  const { parentAttrName, handleUpdateDsl, value, widgetDisplayName } = props\n\n  const targetComponentProps = useSelector<RootState, Record<string, any>>(\n    (rootState) => {\n      const executionTree = getExecutionResult(rootState)\n      return get(executionTree, widgetDisplayName, {})\n    },\n  )\n\n  const isDynamic = useMemo(() => {\n    const dataSourceMode = get(targetComponentProps, \"dataSourceMode\", \"select\")\n    return dataSourceMode === \"dynamic\"\n  }, [targetComponentProps])\n\n  const fromCurrentRow = useMemo(() => {\n    return get(\n      targetComponentProps,\n      `${parentAttrName}.fromCurrentRow`,\n      {},\n    ) as Record<string, boolean>\n  }, [targetComponentProps, parentAttrName])\n\n  const dataPath = useMemo(() => {\n    if (isDynamic) {\n      return \"dataSourceJS\"\n    }\n    return \"dataSource\"\n  }, [isDynamic])\n\n  const handleValueChange = useCallback(\n    (attrName: string, value: string) => {\n      const isFromCurrentRow = value.includes(\"currentRow\")\n      const output = isFromCurrentRow\n        ? getNeedComputedValue(value, dataPath, widgetDisplayName)\n        : value\n      const paths = toPath(attrName)\n      const name = paths.at(-1) as string\n      handleUpdateDsl(attrName, output)\n      handleUpdateDsl(`${parentAttrName}.fromCurrentRow`, {\n        ...fromCurrentRow,\n        [name]: isFromCurrentRow,\n      })\n    },\n    [\n      dataPath,\n      fromCurrentRow,\n      handleUpdateDsl,\n      parentAttrName,\n      widgetDisplayName,\n    ],\n  )\n\n  const wrappedCodeFunc = useCallback(\n    (code: string) => {\n      const fromCurrentRow = code.includes(\"currentRow\")\n      const output = fromCurrentRow\n        ? getNeedComputedValue(code, dataPath, widgetDisplayName)\n        : code\n      return output\n    },\n    [dataPath, widgetDisplayName],\n  )\n\n  return (\n    <BaseInput\n      {...props}\n      value={realInputValue(value, dataPath, widgetDisplayName)}\n      wrappedCodeFunc={wrappedCodeFunc}\n      handleUpdateDsl={handleValueChange}\n    />\n  )\n}\n\nTableMappedValueInputSetter.displayName = \"TableMappedValueInputSetter\"\nexport default TableMappedValueInputSetter\n"],"names":["realInputValue","attrValue","dataPath","widgetDisplayName","value","JSToString","getNeedComputedValue","stringToCanEvaluate","stringToJS","TableMappedValueInputSetter","props","parentAttrName","handleUpdateDsl","targetComponentProps","useSelector","rootState","executionTree","getExecutionResult","get","isDynamic","useMemo","fromCurrentRow","handleValueChange","useCallback","attrName","isFromCurrentRow","output","name","toPath","wrappedCodeFunc","code","jsx","BaseInput"],"mappings":"2lBASA,MAAMA,EAAiB,CACrBC,EACAC,EACAC,IACG,CACC,GAAAF,IAAc,IAAMA,GAAa,KAAkB,MAAA,GACjD,MAAAG,EAAQ,GAAGH,EAAU,UACzB,KAAKE,CAAiB,IAAID,CAAQ,0BAA0B,OAC5DD,EAAU,OAAS,CACpB,CAAA,GACD,OAAOA,EAAU,SAAS,YAAY,EAAII,EAAWD,CAAK,EAAIH,CAChE,EAEMK,EAAuB,CAC3BF,EACAF,EACAC,IACG,CACG,MAAAI,EAAsBC,EAAWJ,CAAK,EAC5C,OAAIG,IAAwB,GACnBA,EAEF,KAAKJ,CAAiB,IAAID,CAAQ,0BAA0BK,CAAmB,MACxF,EAEME,EAAyDC,GAAU,CACvE,KAAM,CAAE,eAAAC,EAAgB,gBAAAC,EAAiB,MAAAR,EAAO,kBAAAD,GAAsBO,EAEhEG,EAAuBC,EAC1BC,GAAc,CACP,MAAAC,EAAgBC,EAAmBF,CAAS,EAClD,OAAOG,EAAIF,EAAeb,EAAmB,CAAE,CAAA,CACjD,CAAA,EAGIgB,EAAYC,EAAAA,QAAQ,IACDF,EAAIL,EAAsB,iBAAkB,QAAQ,IACjD,UACzB,CAACA,CAAoB,CAAC,EAEnBQ,EAAiBD,EAAAA,QAAQ,IACtBF,EACLL,EACA,GAAGF,CAAc,kBACjB,CAAC,CAAA,EAEF,CAACE,EAAsBF,CAAc,CAAC,EAEnCT,EAAWkB,EAAAA,QAAQ,IACnBD,EACK,eAEF,aACN,CAACA,CAAS,CAAC,EAERG,EAAoBC,EAAA,YACxB,CAACC,EAAkBpB,IAAkB,CAC7B,MAAAqB,EAAmBrB,EAAM,SAAS,YAAY,EAC9CsB,EAASD,EACXnB,EAAqBF,EAAOF,EAAUC,CAAiB,EACvDC,EAEEuB,EADQC,EAAOJ,CAAQ,EACV,GAAG,EAAE,EACxBZ,EAAgBY,EAAUE,CAAM,EAChBd,EAAA,GAAGD,CAAc,kBAAmB,CAClD,GAAGU,EACH,CAACM,CAAI,EAAGF,CAAA,CACT,CACH,EACA,CACEvB,EACAmB,EACAT,EACAD,EACAR,CACF,CAAA,EAGI0B,EAAkBN,EAAA,YACrBO,GACwBA,EAAK,SAAS,YAAY,EAE7CxB,EAAqBwB,EAAM5B,EAAUC,CAAiB,EACtD2B,EAGN,CAAC5B,EAAUC,CAAiB,CAAA,EAI5B,OAAA4B,EAACC,EAAA,CACE,GAAGtB,EACJ,MAAOV,EAAeI,EAAOF,EAAUC,CAAiB,EACxD,gBAAA0B,EACA,gBAAiBP,CAAA,CAAA,CAGvB,EAEAb,EAA4B,YAAc"}