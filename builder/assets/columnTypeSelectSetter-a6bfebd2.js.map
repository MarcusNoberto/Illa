{"version":3,"file":"columnTypeSelectSetter-a6bfebd2.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/TableSetter/columnTypeSelectSetter.tsx"],"sourcesContent":["import { FC, useCallback } from \"react\"\nimport BaseSelectSetter from \"@/page/App/components/InspectPanel/PanelSetters/SelectSetter/baseSelect\"\nimport { BaseSelectSetterProps } from \"@/page/App/components/InspectPanel/PanelSetters/SelectSetter/interface\"\nimport {\n  generateNewButtonCellContent,\n  generateNewIconCellContent,\n} from \"@/page/App/components/InspectPanel/PanelSetters/TableSetter/CellSetter/utils/generateNewColumns\"\nimport {\n  ColumnType,\n  ColumnTypeOption,\n  Columns,\n} from \"@/widgetLibrary/TableWidget/interface\"\n\ninterface ColumnTypeSelectSetterProps extends BaseSelectSetterProps {}\n\nconst ColumnTypeSelectSetter: FC<ColumnTypeSelectSetterProps> = (props) => {\n  const { parentAttrName, handleUpdateMultiAttrDSL } = props\n\n  const handleUpdateDsl = useCallback(\n    (attrName: string, value: ColumnType) => {\n      let columnProps: Record<string, unknown> = {}\n      switch (value) {\n        case Columns.Date:\n          columnProps[`${parentAttrName}.format`] = \"YYYY-MM-DD\"\n          break\n        case Columns.DateTime:\n          columnProps[`${parentAttrName}.format`] = \"YYYY-MM-DD HH:mm:ss\"\n          break\n        case Columns.Time:\n          columnProps[`${parentAttrName}.format`] = \"HH:mm:ss\"\n          break\n        case Columns.ButtonGroup:\n          columnProps[`${parentAttrName}.buttonGroupContent`] = [\n            generateNewButtonCellContent(1),\n            generateNewButtonCellContent(2),\n          ]\n          break\n        case Columns.IconGroup:\n          columnProps[`${parentAttrName}.iconGroupContent`] = [\n            generateNewIconCellContent(1),\n          ]\n          break\n      }\n      handleUpdateMultiAttrDSL?.({\n        ...columnProps,\n        [attrName]: value,\n      })\n    },\n    [handleUpdateMultiAttrDSL, parentAttrName],\n  )\n\n  return (\n    <BaseSelectSetter\n      {...props}\n      handleUpdateDsl={handleUpdateDsl}\n      options={ColumnTypeOption}\n    />\n  )\n}\n\nColumnTypeSelectSetter.displayName = \"ColumnTypeSelectSetter\"\n\nexport default ColumnTypeSelectSetter\n"],"names":["ColumnTypeSelectSetter","props","parentAttrName","handleUpdateMultiAttrDSL","handleUpdateDsl","useCallback","attrName","value","columnProps","Columns","generateNewButtonCellContent","generateNewIconCellContent","jsx","BaseSelectSetter","ColumnTypeOption"],"mappings":"idAeM,MAAAA,EAA2DC,GAAU,CACnE,KAAA,CAAE,eAAAC,EAAgB,yBAAAC,CAA6B,EAAAF,EAE/CG,EAAkBC,EAAA,YACtB,CAACC,EAAkBC,IAAsB,CACvC,IAAIC,EAAuC,CAAA,EAC3C,OAAQD,EAAO,CACb,KAAKE,EAAQ,KACCD,EAAA,GAAGN,CAAc,SAAS,EAAI,aAC1C,MACF,KAAKO,EAAQ,SACCD,EAAA,GAAGN,CAAc,SAAS,EAAI,sBAC1C,MACF,KAAKO,EAAQ,KACCD,EAAA,GAAGN,CAAc,SAAS,EAAI,WAC1C,MACF,KAAKO,EAAQ,YACCD,EAAA,GAAGN,CAAc,qBAAqB,EAAI,CACpDQ,EAA6B,CAAC,EAC9BA,EAA6B,CAAC,CAAA,EAEhC,MACF,KAAKD,EAAQ,UACCD,EAAA,GAAGN,CAAc,mBAAmB,EAAI,CAClDS,EAA2B,CAAC,CAAA,EAE9B,KACJ,CAC2BR,GAAA,MAAAA,EAAA,CACzB,GAAGK,EACH,CAACF,CAAQ,EAAGC,CAAA,EAEhB,EACA,CAACJ,EAA0BD,CAAc,CAAA,EAIzC,OAAAU,EAACC,EAAA,CACE,GAAGZ,EACJ,gBAAAG,EACA,QAASU,CAAA,CAAA,CAGf,EAEAd,EAAuB,YAAc"}