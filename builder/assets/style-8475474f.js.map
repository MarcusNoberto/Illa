{"version":3,"file":"style-8475474f.js","sources":["../../../../packages/illa-public-component/ResourceGenerator/components/ControlledElement/style.ts","../../../../packages/illa-public-component/ResourceGenerator/components/ControlledElement/index.tsx","../../../../packages/illa-public-component/ResourceGenerator/components/ConfigElements/style.ts"],"sourcesContent":["import { SerializedStyles, css } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/react\"\n\nexport function applyConfigItemContainer(hasTextarea: boolean) {\n  if (hasTextarea) {\n    return css`\n      display: flex;\n      width: 100%;\n      flex-direction: row;\n      padding-left: 24px;\n    `\n  } else {\n    return css`\n      display: flex;\n      min-height: 48px;\n      align-items: center;\n      flex-direction: row;\n      padding-left: 24px;\n    `\n  }\n}\n\nexport const sslStyle = css`\n  font-size: 14px;\n  color: ${getColor(\"grayBlue\", \"02\")};\n  margin-left: 8px;\n`\n\nexport const configItemTip = css`\n  font-size: 14px;\n  color: ${getColor(\"grayBlue\", \"04\")};\n  font-weight: 400;\n  margin-left: 192px;\n  padding: 0 24px 8px 24px;\n  line-height: 22px;\n  min-height: 30px;\n  white-space: normal;\n`\n\nexport const labelContainer = css`\n  display: flex;\n  flex-direction: row;\n  justify-content: end;\n  min-width: 176px;\n  width: 176px;\n`\n\nexport function applyConfigItemLabelText(\n  color: string,\n  margin?: boolean,\n): SerializedStyles {\n  let marginLeft = css``\n  if (margin) {\n    marginLeft = css`\n      margin-left: 4px;\n    `\n  }\n  return css`\n    font-size: 14px;\n    color: ${color};\n    font-weight: 500;\n    ${marginLeft};\n  `\n}\n\nexport const hostInputContainer = css`\n  display: flex;\n  margin-left: 16px;\n  margin-right: 24px;\n  flex-direction: row;\n  width: 100%;\n  align-items: center;\n  gap: 8px;\n`\n","import { FC, Fragment, useCallback } from \"react\"\nimport { Controller, RegisterOptions } from \"react-hook-form\"\nimport {\n  Checkbox,\n  Input,\n  InputNumber,\n  Password,\n  RadioGroup,\n  Select,\n  Switch,\n  TextArea,\n  getColor,\n} from \"@illa-design/react\"\nimport { ControlledElementProps, DefaultValueType } from \"./interface\"\nimport {\n  applyConfigItemContainer,\n  applyConfigItemLabelText,\n  configItemTip,\n  hostInputContainer,\n  labelContainer,\n  sslStyle,\n} from \"./style\"\n\nexport const ControlledElement: FC<ControlledElementProps> = (props) => {\n  const {\n    title,\n    contentLabel,\n    isRequired = false,\n    defaultValue,\n    placeholders = [],\n    styles = [],\n    name,\n    tips,\n    controlledType,\n    control,\n    error,\n    options = [],\n    rules = [],\n    tipsStyle,\n    allowClear = false,\n    forceEqualWidth,\n    labelStyle,\n    onValueChange,\n  } = props\n\n  const filteredType = (\n    Array.isArray(controlledType) ? controlledType : [controlledType]\n  ).filter((type) => type.trim() && type !== \"none\")\n  const names = Array.isArray(name) ? name : [name]\n  const defaultValues = Array.isArray(defaultValue)\n    ? defaultValue\n    : [defaultValue]\n  const hasTextArea = filteredType.includes(\"textarea\")\n\n  const getElementByControlledType = useCallback(\n    (\n      type: string,\n      name: string,\n      defaultValue: DefaultValueType,\n      placeholder: string,\n      rules: RegisterOptions,\n      style: Record<string, string | number> | undefined = {},\n    ) => {\n      switch (type) {\n        case \"input\":\n          return (\n            <Controller\n              control={control}\n              defaultValue={defaultValue}\n              rules={rules}\n              render={({ field: { value, onChange, onBlur } }) => (\n                <Input\n                  w=\"100%\"\n                  {...style}\n                  onBlur={onBlur}\n                  onChange={onChange}\n                  value={value}\n                  error={error}\n                  colorScheme=\"techPurple\"\n                  placeholder={placeholder}\n                />\n              )}\n              name={name}\n            />\n          )\n        case \"checkbox\":\n          return (\n            <>\n              <Controller\n                control={control}\n                defaultValue={defaultValue}\n                rules={rules}\n                render={({ field: { value, onChange, onBlur } }) => (\n                  <Checkbox\n                    {...style}\n                    onBlur={onBlur}\n                    onChange={(value) => {\n                      onChange(value)\n                      onValueChange?.(value)\n                    }}\n                    checked={value}\n                    colorScheme=\"techPurple\"\n                    placeholder={placeholder}\n                  />\n                )}\n                name={name}\n              />\n              <span css={sslStyle}>{contentLabel}</span>\n            </>\n          )\n        case \"select\":\n          return (\n            <Controller\n              control={control}\n              defaultValue={defaultValue}\n              rules={rules}\n              render={({ field: { value, onChange, onBlur } }) => (\n                <Select\n                  value={value}\n                  onBlur={onBlur}\n                  allowClear={allowClear}\n                  onChange={(value) => {\n                    onValueChange?.(value as string)\n                    onChange(value)\n                  }}\n                  colorScheme=\"techPurple\"\n                  options={options}\n                />\n              )}\n              name={name}\n            />\n          )\n        case \"switch\":\n          return (\n            <>\n              <Controller\n                control={control}\n                defaultValue={defaultValue}\n                rules={rules}\n                render={({ field: { value, onChange, onBlur } }) => (\n                  <Switch\n                    checked={value}\n                    colorScheme=\"techPurple\"\n                    onChange={(open) => {\n                      onChange(open)\n                      onValueChange?.(open)\n                    }}\n                    onBlur={onBlur}\n                    {...style}\n                  />\n                )}\n                name={name}\n              />\n              <span css={sslStyle}>{contentLabel}</span>\n            </>\n          )\n        case \"number\":\n          return (\n            <Controller\n              control={control}\n              defaultValue={defaultValue}\n              rules={rules}\n              render={({ field: { value, onChange, onBlur } }) => (\n                <InputNumber\n                  onBlur={onBlur}\n                  onChange={onChange}\n                  value={value}\n                  colorScheme=\"techPurple\"\n                  w=\"100%\"\n                  placeholder={placeholder}\n                  {...style}\n                />\n              )}\n              name={name}\n            />\n          )\n        case \"password\":\n          return (\n            <Controller\n              control={control}\n              defaultValue={defaultValue}\n              rules={rules}\n              render={({ field: { value, onChange, onBlur } }) => (\n                <Password\n                  autoComplete=\"new-password\"\n                  colorScheme=\"techPurple\"\n                  w=\"100%\"\n                  onBlur={onBlur}\n                  onChange={onChange}\n                  value={value}\n                  placeholder={placeholder}\n                  {...style}\n                />\n              )}\n              name={name}\n            />\n          )\n        case \"radio\":\n          return (\n            <Controller\n              control={control}\n              defaultValue={defaultValue}\n              rules={rules}\n              render={({ field: { value, onChange, onBlur } }) => (\n                <RadioGroup\n                  colorScheme=\"techPurple\"\n                  w=\"100%\"\n                  type=\"radio\"\n                  onBlur={onBlur}\n                  onChange={onChange}\n                  value={value}\n                  placeholder={placeholder}\n                  options={options}\n                  {...style}\n                />\n              )}\n              name={name}\n            />\n          )\n        case \"radio-group\":\n          return (\n            <Controller\n              control={control}\n              defaultValue={defaultValue}\n              rules={rules}\n              render={({ field: { value, onChange, onBlur } }) => (\n                <RadioGroup\n                  colorScheme=\"gray\"\n                  w=\"100%\"\n                  type=\"button\"\n                  onBlur={onBlur}\n                  onChange={onChange}\n                  value={value}\n                  placeholder={placeholder}\n                  forceEqualWidth={forceEqualWidth}\n                  options={options}\n                  {...style}\n                />\n              )}\n              name={name}\n            />\n          )\n        case \"textarea\":\n          return (\n            <Controller\n              control={control}\n              defaultValue={defaultValue}\n              rules={rules}\n              render={({ field: { value, onChange, onBlur } }) => (\n                <TextArea\n                  w=\"100%\"\n                  h=\"100%\"\n                  pb=\"16px\"\n                  minH=\"240px\"\n                  colorScheme=\"techPurple\"\n                  onBlur={onBlur}\n                  onChange={onChange}\n                  value={value}\n                  autoSize={false}\n                  placeholder={placeholder}\n                  {...style}\n                />\n              )}\n              name={name}\n            />\n          )\n      }\n    },\n    [\n      allowClear,\n      contentLabel,\n      control,\n      error,\n      forceEqualWidth,\n      onValueChange,\n      options,\n    ],\n  )\n\n  return (\n    <>\n      {!!filteredType.length && (\n        <div css={applyConfigItemContainer(hasTextArea)}>\n          <div css={labelStyle ? labelStyle : labelContainer}>\n            {isRequired && (\n              <span css={applyConfigItemLabelText(getColor(\"red\", \"03\"))}>\n                *\n              </span>\n            )}\n            <span css={applyConfigItemLabelText(getColor(\"grayBlue\", \"02\"))}>\n              {title}\n            </span>\n          </div>\n          <div css={hostInputContainer}>\n            {filteredType.map((type, index) => (\n              <Fragment key={index}>\n                {getElementByControlledType(\n                  type,\n                  names[index],\n                  defaultValues[index],\n                  placeholders[index],\n                  rules[index],\n                  styles[index],\n                )}\n              </Fragment>\n            ))}\n          </div>\n        </div>\n      )}\n      {tips && <div css={tipsStyle ? tipsStyle : configItemTip}>{tips}</div>}\n    </>\n  )\n}\n\nControlledElement.displayName = \"ControlledElement\"\n","import { css } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/react\"\n\nexport const container = css`\n  width: 100%;\n  overflow: auto;\n  max-height: 656px;\n`\n\nexport function applyConfigItemLabelText(color: string, margin?: boolean) {\n  let marginLeft = css``\n  if (margin) {\n    marginLeft = css`\n      margin-left: 4px;\n    `\n  }\n  return css`\n    font-size: 14px;\n    color: ${color};\n    font-weight: 500;\n    ${marginLeft};\n  `\n}\n\nexport const configItemTip = css`\n  font-size: 14px;\n  font-weight: 400;\n  margin-left: 192px;\n  padding-bottom: 8px;\n  line-height: 22px;\n  padding-left: 24px;\n  color: ${getColor(\"grayBlue\", \"04\")};\n`\n\nexport const connectType = css`\n  display: flex;\n  height: 38px;\n  align-items: center;\n  padding-left: 24px;\n`\n\nexport const connectTypeStyle = css`\n  font-size: 14px;\n  height: 22px;\n  display: flex;\n  align-items: center;\n  color: ${getColor(\"grayBlue\", \"02\")};\n  margin-left: 16px;\n`\n\nexport const labelContainer = css`\n  display: flex;\n  justify-content: end;\n  min-width: 176px;\n`\n\nexport const optionLabelStyle = css`\n  height: 38px;\n  display: flex;\n  font-size: 14px;\n  font-weight: 500;\n  padding: 8px 24px;\n  color: ${getColor(\"grayBlue\", \"04\")};\n  align-items: center;\n`\n\nexport const errorMsgStyle = css`\n  position: relative;\n  font-size: 14px;\n  padding-left: 24px;\n  line-height: 22px;\n  color: ${getColor(\"orange\", \"03\")};\n`\n\nexport const errorIconStyle = css`\n  position: absolute;\n  font-size: 16px;\n  line-height: 0;\n  top: 3px;\n  left: 0;\n`\n\nexport const privateKeyItem = css`\n  display: flex;\n  width: 100%;\n  padding-top: 8px;\n  padding-left: 24px;\n  align-items: flex-start;\n`\n\nexport const configItem = css`\n  display: flex;\n  height: 48px;\n  align-items: center;\n  flex-direction: row;\n  padding-left: 24px;\n`\n"],"names":["applyConfigItemContainer","hasTextarea","css","sslStyle","getColor","configItemTip","labelContainer","applyConfigItemLabelText","color","margin","marginLeft","hostInputContainer","ControlledElement","props","title","contentLabel","isRequired","defaultValue","placeholders","styles","name","tips","controlledType","control","error","options","rules","tipsStyle","allowClear","forceEqualWidth","labelStyle","onValueChange","filteredType","type","names","defaultValues","hasTextArea","getElementByControlledType","useCallback","placeholder","style","jsx","Controller","value","onChange","onBlur","Input","jsxs","Fragment","Checkbox","Select","Switch","open","InputNumber","Password","RadioGroup","TextArea","index","container","optionLabelStyle","errorMsgStyle","errorIconStyle","privateKeyItem","configItem"],"mappings":"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"}