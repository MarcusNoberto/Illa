{"version":3,"file":"index-d5a9ce5a.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/utils/generateNewOptions.ts","../../src/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/context/viewsListContext.tsx","../../src/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/style.ts","../../src/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/header.tsx","../../src/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/dragIconAndLabel.tsx","../../src/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/listItem.tsx","../../src/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/listBody.tsx","../../src/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/index.tsx"],"sourcesContent":["import { v4 } from \"uuid\"\nimport { ViewItemShape } from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/interface\"\n\nexport let viewNameSet = new Set<string>()\n\nconst generateDatasetName = () => {\n  let i = 1\n  let ViewName = `View ${i}`\n  while (viewNameSet.has(ViewName)) {\n    i++\n    ViewName = `View ${i}`\n  }\n  return ViewName\n}\n\nexport const generateViewItemId = () => `views-${v4()}`\n\nexport const generateNewViewItem = (\n  hasViewNameSet: string[],\n): ViewItemShape => {\n  viewNameSet = new Set<string>(hasViewNameSet)\n  const viewName = generateDatasetName()\n\n  return {\n    id: generateViewItemId(),\n    key: viewName,\n    label: viewName,\n  }\n}\n","import { ComponentMapNode } from \"@illa-public/public-types\"\nimport { klona } from \"klona/json\"\nimport { get } from \"lodash-es\"\nimport { FC, ReactNode, createContext, useCallback, useMemo } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { PanelFieldConfig } from \"@/page/App/components/InspectPanel/interface\"\nimport { componentsActions } from \"@/redux/currentApp/components/componentsSlice\"\nimport { getExecutionResult } from \"@/redux/currentApp/executionTree/executionSelector\"\nimport { RootState } from \"@/store\"\nimport { newGenerateChildrenComponentNode } from \"@/utils/generators/generateComponentNode\"\nimport { BasicContainerConfig } from \"@/widgetLibrary/BasicContainer/BasicContainer\"\nimport { ViewItemShape } from \"../interface\"\nimport {\n  generateNewViewItem,\n  generateViewItemId,\n} from \"../utils/generateNewOptions\"\n\ninterface ProviderProps {\n  viewsList: ViewItemShape[]\n  childrenSetter: PanelFieldConfig[]\n  widgetDisplayName: string\n  attrPath: string\n  componentNode: ComponentMapNode\n  handleUpdateDsl: (attrPath: string, value: any) => void\n  handleUpdateMultiAttrDSL?: (updateSlice: Record<string, any>) => void\n  handleUpdateExecutionResult?: (\n    displayName: string,\n    updateSlice: Record<string, any>,\n  ) => void\n  handleUpdateOtherMultiAttrDSL?: (\n    displayName: string,\n    updateSlice: Record<string, any>,\n  ) => void\n  children: ReactNode\n}\n\ninterface Inject extends Omit<ProviderProps, \"children\"> {\n  currentViewIndex: number\n  handleDeleteOptionItem: (index: number) => void\n  handleCopyOptionItem: (index: number) => void\n  handleUpdateCurrentViewIndex: (index: number) => void\n  handleMoveOptionItem: (dragIndex: number, hoverIndex: number) => void\n}\n\nexport const ViewListSetterContext = createContext<Inject>({} as Inject)\n\nexport const ViewListSetterProvider: FC<ProviderProps> = (props) => {\n  const {\n    viewsList,\n    attrPath,\n    widgetDisplayName,\n    handleUpdateMultiAttrDSL,\n    handleUpdateExecutionResult,\n    componentNode,\n  } = props\n  const dispatch = useDispatch()\n  const executionResult = useSelector(getExecutionResult)\n\n  const targetComponentProps = useSelector<RootState, Record<string, any>>(\n    (rootState) => {\n      const executionTree = getExecutionResult(rootState)\n      return get(executionTree, widgetDisplayName, {})\n    },\n  )\n\n  const allViews = useMemo(() => {\n    return get(\n      executionResult,\n      `${widgetDisplayName}.${attrPath}`,\n      [],\n    ) as ViewItemShape[]\n  }, [attrPath, executionResult, widgetDisplayName])\n\n  const linkWidgetDisplayName = useMemo(() => {\n    return get(targetComponentProps, \"linkWidgetDisplayName\", \"\") as string\n  }, [targetComponentProps])\n\n  const currentViewIndex = useMemo(() => {\n    return get(executionResult, `${widgetDisplayName}.currentIndex`)\n  }, [executionResult, widgetDisplayName])\n\n  const allViewsKeys = useMemo(() => {\n    return allViews.map((view) => view.key)\n  }, [allViews])\n\n  const handleDeleteOptionItem = useCallback(\n    (index: number) => {\n      if (viewsList.length <= 1) return\n      const updatedArray = viewsList.filter(\n        (optionItem: Record<string, any>, i: number) => {\n          return i !== index\n        },\n      )\n\n      const currentChildrenNodeDisplayName = componentNode.childrenNode[index]\n\n      const updateSlice = {\n        [attrPath]: updatedArray,\n        currentIndex: 0,\n        currentKey: allViewsKeys[0],\n      }\n\n      if (currentViewIndex !== index) {\n        const oldCurrentViewKey = viewsList[currentViewIndex].key\n        const newCurrentViewIndex = updatedArray.findIndex(\n          (item) => item.key === oldCurrentViewKey,\n        )\n        if (newCurrentViewIndex !== -1) {\n          updateSlice.currentIndex = newCurrentViewIndex\n          updateSlice.currentKey = oldCurrentViewKey\n        }\n      }\n\n      handleUpdateMultiAttrDSL?.(updateSlice)\n      dispatch(\n        componentsActions.deleteComponentNodeReducer({\n          displayNames: [currentChildrenNodeDisplayName],\n        }),\n      )\n    },\n    [\n      allViewsKeys,\n      attrPath,\n      componentNode.childrenNode,\n      currentViewIndex,\n      dispatch,\n      handleUpdateMultiAttrDSL,\n      viewsList,\n    ],\n  )\n\n  const handleCopyOptionItem = useCallback(\n    (index: number) => {\n      let targetOptionItem = viewsList.find(\n        (optionItem: Record<string, any>, i: number) => {\n          return i === index\n        },\n      )\n      if (!targetOptionItem) return\n      const newChildrenNodes = newGenerateChildrenComponentNode(\n        BasicContainerConfig,\n        componentNode.displayName,\n      )\n      const newItem = generateNewViewItem(allViewsKeys)\n      targetOptionItem = {\n        ...targetOptionItem,\n        key: newItem.key,\n        id: generateViewItemId(),\n      }\n      const updatedArray = [...viewsList, targetOptionItem]\n      handleUpdateMultiAttrDSL?.({\n        [attrPath]: updatedArray,\n      })\n      dispatch(componentsActions.addComponentReducer([newChildrenNodes]))\n    },\n    [\n      allViewsKeys,\n      attrPath,\n      componentNode.displayName,\n      dispatch,\n      handleUpdateMultiAttrDSL,\n      viewsList,\n    ],\n  )\n\n  const handleUpdateCurrentViewIndex = useCallback(\n    (index: number) => {\n      if (index > viewsList.length || index < 0) return\n      const currentViewKey = allViews[index].key\n      handleUpdateExecutionResult?.(widgetDisplayName, {\n        currentIndex: index,\n        currentKey: currentViewKey || index,\n      })\n      if (linkWidgetDisplayName) {\n        if (Array.isArray(linkWidgetDisplayName)) {\n          linkWidgetDisplayName.forEach((linkDisplayName) => {\n            handleUpdateExecutionResult?.(linkDisplayName, {\n              currentIndex: index,\n              currentKey: currentViewKey || index,\n            })\n          })\n        } else {\n          handleUpdateExecutionResult?.(linkWidgetDisplayName, {\n            currentIndex: index,\n            currentKey: currentViewKey || index,\n          })\n          const linkWidgetLinkedDisplayName = get(\n            executionResult,\n            `${linkWidgetDisplayName}.linkWidgetDisplayName`,\n            [],\n          )\n          linkWidgetLinkedDisplayName &&\n            Array.isArray(linkWidgetLinkedDisplayName) &&\n            linkWidgetLinkedDisplayName.forEach((name) => {\n              name !== widgetDisplayName &&\n                handleUpdateExecutionResult?.(name, {\n                  currentIndex: index,\n                  currentKey: currentViewKey || index,\n                })\n            })\n        }\n      }\n    },\n    [\n      allViews,\n      executionResult,\n      handleUpdateExecutionResult,\n      linkWidgetDisplayName,\n      viewsList.length,\n      widgetDisplayName,\n    ],\n  )\n\n  const handleMoveOptionItem = useCallback(\n    (dragIndex: number, hoverIndex: number) => {\n      const dragOptionItem = viewsList[dragIndex]\n      const currentSelected = viewsList[currentViewIndex]\n      const newComponentNode = klona(componentNode.childrenNode)\n      ;[newComponentNode[dragIndex], newComponentNode[hoverIndex]] = [\n        newComponentNode[hoverIndex],\n        newComponentNode[dragIndex],\n      ]\n      const newViews = [...viewsList]\n      newViews.splice(dragIndex, 1)\n      newViews.splice(hoverIndex, 0, dragOptionItem)\n      const newSelectedIndex = newViews.findIndex(\n        (view) => view.key === currentSelected.key,\n      )\n      const newSelectedKey = newViews[newSelectedIndex].key\n      handleUpdateMultiAttrDSL?.({\n        [attrPath]: newViews,\n        currentIndex: newSelectedIndex,\n        currentKey: newSelectedKey,\n      })\n      dispatch(\n        componentsActions.sortComponentNodeChildrenReducer({\n          parentDisplayName: componentNode.displayName,\n          newChildrenNode: newComponentNode,\n        }),\n      )\n    },\n    [\n      attrPath,\n      componentNode.childrenNode,\n      componentNode.displayName,\n      currentViewIndex,\n      dispatch,\n      handleUpdateMultiAttrDSL,\n      viewsList,\n    ],\n  )\n  const value = {\n    ...props,\n    handleDeleteOptionItem,\n    handleCopyOptionItem,\n    currentViewIndex,\n    handleUpdateCurrentViewIndex,\n    handleMoveOptionItem,\n  }\n\n  return (\n    <ViewListSetterContext.Provider value={value}>\n      {props.children}\n    </ViewListSetterContext.Provider>\n  )\n}\n\nViewListSetterProvider.displayName = \"OptionListSetterProvider\"\n","import { css } from \"@emotion/react\"\nimport { globalColor, illaPrefix } from \"@illa-design/react\"\n\nexport const setterPublicWrapper = css`\n  padding: 8px 16px;\n  width: 100%;\n`\n\nexport const viewSetterWrapperStyle = css`\n  width: 100%;\n  border-radius: 8px;\n  border: 1px solid ${globalColor(`--${illaPrefix}-grayBlue-08`)};\n`\n\nexport const HeaderWrapperStyle = css`\n  width: 100%;\n  background-color: ${globalColor(`--${illaPrefix}-grayBlue-09`)};\n  padding: 8px 8px 8px 16px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n\nexport const HeaderLabelStyle = css`\n  color: ${globalColor(`--${illaPrefix}-grayBlue-02`)};\n  font-weight: 500;\n  font-size: 14px;\n`\n\nexport const applyOptionStyle = (isSelect: boolean) => {\n  return css`\n    width: 16px;\n    height: 16px;\n    border-radius: 8px;\n    border: ${isSelect\n      ? `4px solid ${globalColor(`--${illaPrefix}-techPurple-03`)}`\n      : `2px solid ${globalColor(`--${illaPrefix}-grayBlue-08`)}`};\n    cursor: pointer;\n  `\n}\n\nexport const labelAndDragIconWrapperStyle = css`\n  display: flex;\n  align-items: center;\n  flex: 0;\n`\n\nexport const labelWrapperStyle = css`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  white-space: nowrap;\n`\n\nexport const actionWrapperStyle = css`\n  display: flex;\n  align-items: center;\n  gap: 16px;\n`\n\nexport const iconStyle = css`\n  cursor: pointer;\n  width: 16px;\n  height: 16px;\n  color: ${globalColor(`--${illaPrefix}-grayBlue-04`)};\n`\n\nexport const copyIconStyle = css`\n  ${iconStyle};\n  visibility: hidden;\n`\n\nexport const moveIconStyle = css`\n  cursor: move;\n  color: ${globalColor(`--${illaPrefix}-grayBlue-04`)};\n  width: 16px;\n  height: 16px;\n  visibility: hidden;\n`\n\nexport const listItemTriggerWrapperStyle = css`\n  width: 100%;\n  height: 40px;\n  padding: 9px 16px 9px 0;\n  display: flex;\n  justify-content: space-between;\n  user-select: none;\n  :hover {\n    #dragIcon {\n      visibility: visible;\n    }\n    #copyIcon {\n      visibility: visible;\n    }\n  }\n`\n","import { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { AddIcon, Button } from \"@illa-design/react\"\nimport {\n  HeaderLabelStyle,\n  HeaderWrapperStyle,\n} from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/style\"\n\nexport interface HeaderProps {\n  labelName: string\n  addAction: () => void\n  hasAddAction: boolean\n}\n\nexport const Header: FC<HeaderProps> = (props) => {\n  const { t } = useTranslation()\n  const { labelName, addAction, hasAddAction } = props\n  return (\n    <div css={HeaderWrapperStyle}>\n      <span css={HeaderLabelStyle}>{labelName}</span>\n      {hasAddAction && (\n        <Button\n          leftIcon={<AddIcon />}\n          colorScheme=\"techPurple\"\n          variant=\"text\"\n          onClick={addAction}\n        >\n          {t(\"editor.inspect.setter_content.column_setter.new\")}\n        </Button>\n      )}\n    </div>\n  )\n}\n","import { get } from \"lodash-es\"\nimport { FC, MouseEvent, useCallback, useContext, useMemo } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useSelector } from \"react-redux\"\nimport {\n  DragPointIcon,\n  Trigger,\n  WarningCircleIcon,\n  globalColor,\n  illaPrefix,\n} from \"@illa-design/react\"\nimport { ViewListSetterContext } from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/context/viewsListContext\"\nimport {\n  DragIconAndLabelProps,\n  ViewItemShape,\n} from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/interface\"\nimport {\n  applyOptionStyle,\n  labelAndDragIconWrapperStyle,\n  labelWrapperStyle,\n  moveIconStyle,\n} from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/style\"\nimport { getExecutionResult } from \"@/redux/currentApp/executionTree/executionSelector\"\n\ninterface optionIconProps {\n  isSelected: boolean\n  onClick: (e: MouseEvent<HTMLDivElement>) => void\n}\n\nconst OptionIcon: FC<optionIconProps> = ({ isSelected, onClick }) => {\n  return <div css={applyOptionStyle(isSelected)} onClick={onClick} />\n}\n\nexport const DragIconAndLabel: FC<DragIconAndLabelProps> = (props) => {\n  const { index, label, isSelected } = props\n  const { widgetDisplayName, attrPath, handleUpdateCurrentViewIndex } =\n    useContext(ViewListSetterContext)\n\n  const { t } = useTranslation()\n  const executionResult = useSelector(getExecutionResult)\n\n  const currentViews = useMemo(() => {\n    return get(executionResult, `${widgetDisplayName}.${attrPath}.${index}`, {})\n  }, [attrPath, executionResult, index, widgetDisplayName])\n\n  const otherViewKeys = useMemo(() => {\n    const allViews = get(\n      executionResult,\n      `${widgetDisplayName}.${attrPath}`,\n      [],\n    ) as ViewItemShape[]\n    return allViews\n      .map((views, i) => views.key || i)\n      .filter((key, i) => i != index)\n  }, [attrPath, executionResult, index, widgetDisplayName])\n\n  const isDuplicationKey = useMemo(() => {\n    return otherViewKeys.some((viewKey) => viewKey == currentViews.key)\n  }, [otherViewKeys, currentViews])\n\n  const handleChangeCurrentView = useCallback(\n    (e: MouseEvent<HTMLDivElement>) => {\n      e.stopPropagation()\n      handleUpdateCurrentViewIndex(index)\n    },\n    [handleUpdateCurrentViewIndex, index],\n  )\n\n  return (\n    <span css={labelAndDragIconWrapperStyle}>\n      <DragPointIcon css={moveIconStyle} id=\"dragIcon\" />\n      <div css={labelWrapperStyle}>\n        <OptionIcon isSelected={isSelected} onClick={handleChangeCurrentView} />\n        <span style={{ maxWidth: \"147px\" }}>{label}</span>\n        {isDuplicationKey && (\n          <Trigger\n            trigger=\"hover\"\n            showArrow={false}\n            position=\"bottom\"\n            content={`${t(\"widget.container.key_duplicated\")}`}\n          >\n            <WarningCircleIcon\n              color={globalColor(`--${illaPrefix}-orange-03`)}\n            />\n          </Trigger>\n        )}\n      </div>\n    </span>\n  )\n}\n\nDragIconAndLabel.displayName = \"DragIconAndLabel\"\n","import { FC, useCallback, useContext, useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useSelector } from \"react-redux\"\nimport { CopyIcon, ReduceIcon, Trigger } from \"@illa-design/react\"\nimport { ViewListSetterContext } from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/context/viewsListContext\"\nimport { DragIconAndLabel } from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/dragIconAndLabel\"\nimport { ViewItemShape } from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/interface\"\nimport {\n  actionWrapperStyle,\n  copyIconStyle,\n  iconStyle,\n  listItemTriggerWrapperStyle,\n} from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/style\"\nimport { BaseModal } from \"@/page/App/components/InspectPanel/PanelSetters/PublicComponent/Modal\"\nimport { SelectedProvider } from \"@/page/App/components/InspectPanel/context/selectedContext\"\nimport { getComponentNodeBySingleSelected } from \"@/redux/currentApp/components/componentsSelector\"\n\ninterface ListItemProps {\n  value: ViewItemShape\n  index: number\n  label?: string\n  isSelected: boolean\n}\n\nexport const ListItem: FC<ListItemProps> = (props) => {\n  const { label, index, isSelected } = props\n  const [modalVisible, setModalVisible] = useState(false)\n  const {\n    handleDeleteOptionItem,\n    handleCopyOptionItem,\n    attrPath,\n    widgetDisplayName,\n    childrenSetter,\n    handleUpdateDsl,\n    handleUpdateMultiAttrDSL,\n    handleUpdateOtherMultiAttrDSL,\n  } = useContext(ViewListSetterContext)\n  const { t } = useTranslation()\n\n  const handleCloseModal = useCallback(() => {\n    setModalVisible(false)\n  }, [])\n\n  const singleSelectedComponentNode = useSelector(\n    getComponentNodeBySingleSelected,\n  )\n\n  const widgetType = singleSelectedComponentNode?.type || \"\"\n  const widgetParentDisplayName = singleSelectedComponentNode?.parentNode || \"\"\n  const widgetProps = singleSelectedComponentNode?.props || {}\n\n  return (\n    <Trigger\n      withoutPadding\n      colorScheme=\"white\"\n      popupVisible={modalVisible}\n      content={\n        <SelectedProvider\n          widgetType={widgetType}\n          widgetDisplayName={widgetDisplayName}\n          widgetParentDisplayName={widgetParentDisplayName}\n          widgetProps={widgetProps}\n          handleUpdateDsl={handleUpdateDsl}\n          handleUpdateMultiAttrDSL={(updateSlice) => {\n            handleUpdateMultiAttrDSL?.(updateSlice)\n          }}\n          handleUpdateOtherMultiAttrDSL={(displayName, updateSlice) => {\n            handleUpdateOtherMultiAttrDSL?.(displayName, updateSlice)\n          }}\n          widgetOrAction=\"WIDGET\"\n        >\n          <BaseModal\n            title={t(\"editor.inspect.setter_content.option_list.model_title\")}\n            handleCloseModal={handleCloseModal}\n            attrPath={`${attrPath}.${index}`}\n            widgetDisplayName={widgetDisplayName}\n            childrenSetter={childrenSetter}\n          />\n        </SelectedProvider>\n      }\n      trigger=\"click\"\n      showArrow={false}\n      position=\"left\"\n      clickOutsideToClose\n      onVisibleChange={(visible) => {\n        setModalVisible(visible)\n      }}\n    >\n      <span css={listItemTriggerWrapperStyle}>\n        <DragIconAndLabel index={index} label={label} isSelected={isSelected} />\n        <span css={actionWrapperStyle}>\n          <CopyIcon\n            css={copyIconStyle}\n            id=\"copyIcon\"\n            onClick={(e) => {\n              e.stopPropagation()\n              handleCopyOptionItem(index)\n            }}\n          />\n          <ReduceIcon\n            css={iconStyle}\n            onClick={(e) => {\n              e.stopPropagation()\n              handleDeleteOptionItem(index)\n            }}\n          />\n        </span>\n      </span>\n    </Trigger>\n  )\n}\n","import { AnimatePresence, Reorder } from \"framer-motion\"\nimport { isEqual, omit } from \"lodash-es\"\nimport {\n  FC,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport { ViewListSetterContext } from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/context/viewsListContext\"\nimport { ViewItemShape } from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/interface\"\nimport { removeNativeStyle } from \"@/page/App/components/InspectPanel/PanelSetters/TableSetter/ColumnSetter/style\"\nimport { componentsActions } from \"@/redux/currentApp/components/componentsSlice\"\nimport { ListItem } from \"./listItem\"\n\ninterface ItemsProps extends ViewItemShape {\n  childrenNode?: string\n}\n\nexport const ListBody: FC = () => {\n  const dispatch = useDispatch()\n  const {\n    viewsList,\n    componentNode,\n    currentViewIndex,\n    attrPath,\n    handleUpdateMultiAttrDSL,\n  } = useContext(ViewListSetterContext)\n\n  const originItems: ItemsProps[] = viewsList.map((view, index) => {\n    if (Array.isArray(componentNode.childrenNode)) {\n      return { ...view, childrenNode: componentNode.childrenNode[index] }\n    }\n    return { ...view, childrenNode: \"\" }\n  })\n\n  const [items, setItems] = useState<ItemsProps[]>(originItems)\n  const currentSelected = useMemo(\n    () => viewsList[currentViewIndex],\n    [viewsList, currentViewIndex],\n  )\n\n  const onDragEnd = useCallback(() => {\n    const newComponentNode: string[] = []\n    const newViewList: ViewItemShape[] = []\n    items.forEach((item) => {\n      item?.childrenNode && newComponentNode.push(item.childrenNode)\n      newViewList.push(omit(item, [\"childrenNode\"]))\n    })\n    const newSelectedIndex = newViewList.findIndex(\n      (view) => view.key === currentSelected.key,\n    )\n    const newSelectedKey = newViewList[newSelectedIndex].key\n    handleUpdateMultiAttrDSL?.({\n      [attrPath]: newViewList,\n      currentIndex: newSelectedIndex,\n      currentKey: newSelectedKey,\n    })\n    dispatch(\n      componentsActions.sortComponentNodeChildrenReducer({\n        parentDisplayName: componentNode.displayName,\n        newChildrenNode: newComponentNode,\n      }),\n    )\n  }, [\n    items,\n    handleUpdateMultiAttrDSL,\n    attrPath,\n    dispatch,\n    componentNode.displayName,\n    currentSelected?.key,\n  ])\n\n  useEffect(() => {\n    if (!isEqual(viewsList, items)) {\n      setItems(\n        viewsList.map((view, index) => {\n          if (Array.isArray(componentNode.childrenNode)) {\n            return { ...view, childrenNode: componentNode.childrenNode[index] }\n          }\n          return { ...view, childrenNode: \"\" }\n        }),\n      )\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [componentNode.childrenNode, viewsList])\n\n  const updateItem = (values: ItemsProps[]) => {\n    if (isEqual(values, items)) return\n    setItems(values)\n  }\n\n  if (!Array.isArray(viewsList)) return null\n\n  return (\n    <AnimatePresence initial={false}>\n      <Reorder.Group\n        axis=\"y\"\n        initial={false}\n        values={items}\n        onReorder={updateItem}\n        css={removeNativeStyle}\n      >\n        {items.map((item, index) => {\n          const { id, label, key } = item\n          return (\n            <Reorder.Item\n              initial={false}\n              css={removeNativeStyle}\n              key={item.id}\n              value={item}\n              onDragEnd={onDragEnd}\n            >\n              <ListItem\n                value={item}\n                label={label}\n                key={id}\n                index={index}\n                isSelected={key === currentSelected?.key}\n              />\n            </Reorder.Item>\n          )\n        })}\n      </Reorder.Group>\n    </AnimatePresence>\n  )\n}\n","import { ComponentMapNode } from \"@illa-public/public-types\"\nimport { get } from \"lodash-es\"\nimport { FC, memo, useCallback, useMemo } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { ViewListSetterProvider } from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/context/viewsListContext\"\nimport { Header } from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/header\"\nimport {\n  ViewItemShape,\n  ViewSetterProps,\n} from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/interface\"\nimport { ListBody } from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/listBody\"\nimport {\n  setterPublicWrapper,\n  viewSetterWrapperStyle,\n} from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/style\"\nimport { generateNewViewItem } from \"@/page/App/components/InspectPanel/PanelSetters/ContainerSetter/ViewsSetter/utils/generateNewOptions\"\nimport {\n  getComponentMap,\n  searchComponentFromMap,\n} from \"@/redux/currentApp/components/componentsSelector\"\nimport { componentsActions } from \"@/redux/currentApp/components/componentsSlice\"\nimport { getExecutionResult } from \"@/redux/currentApp/executionTree/executionSelector\"\nimport store, { RootState } from \"@/store\"\nimport { newGenerateChildrenComponentNode } from \"@/utils/generators/generateComponentNode\"\nimport { BasicContainerConfig } from \"@/widgetLibrary/BasicContainer/BasicContainer\"\n\nconst ViewsSetter: FC<ViewSetterProps> = memo((props: ViewSetterProps) => {\n  const {\n    value,\n    attrName,\n    widgetDisplayName,\n    childrenSetter,\n    handleUpdateExecutionResult,\n    handleUpdateMultiAttrDSL,\n    handleUpdateOtherMultiAttrDSL,\n    componentNode,\n  } = props\n  const { t } = useTranslation()\n  const executionResult = useSelector(getExecutionResult)\n  const dispatch = useDispatch()\n\n  const targetComponentProps = useSelector<RootState, Record<string, any>>(\n    (rootState) => {\n      const executionTree = getExecutionResult(rootState)\n      return get(executionTree, widgetDisplayName, {})\n    },\n  )\n\n  const linkWidgetDisplayName = useMemo(() => {\n    return get(targetComponentProps, \"linkWidgetDisplayName\", \"\") as string\n  }, [targetComponentProps])\n\n  const allViews = useMemo(() => {\n    return get(\n      executionResult,\n      `${widgetDisplayName}.${attrName}`,\n      [],\n    ) as ViewItemShape[]\n  }, [attrName, executionResult, widgetDisplayName])\n\n  const allViewsKeys = useMemo(() => {\n    return allViews.map((view) => view.key)\n  }, [allViews])\n\n  const updateMultiAttrDSL = useCallback(\n    (updateSlice: Record<string, unknown>) => {\n      handleUpdateMultiAttrDSL?.(updateSlice)\n      if (linkWidgetDisplayName) {\n        if (Array.isArray(linkWidgetDisplayName)) {\n          linkWidgetDisplayName.forEach((linkDisplayName) => {\n            handleUpdateOtherMultiAttrDSL?.(linkDisplayName, updateSlice)\n          })\n        } else {\n          handleUpdateOtherMultiAttrDSL?.(linkWidgetDisplayName, updateSlice)\n          const linkWidgetLinkedDisplayName = get(\n            executionResult,\n            `${linkWidgetDisplayName}.linkWidgetDisplayName`,\n            [],\n          )\n          linkWidgetLinkedDisplayName &&\n            Array.isArray(linkWidgetLinkedDisplayName) &&\n            linkWidgetLinkedDisplayName.forEach((name) => {\n              name !== widgetDisplayName &&\n                handleUpdateOtherMultiAttrDSL?.(name, updateSlice)\n            })\n        }\n      }\n    },\n    [\n      executionResult,\n      handleUpdateMultiAttrDSL,\n      handleUpdateOtherMultiAttrDSL,\n      linkWidgetDisplayName,\n      widgetDisplayName,\n    ],\n  )\n\n  const handleUpdateDsl = useCallback(\n    (attrName: string, value: any) => {\n      handleUpdateMultiAttrDSL?.({\n        [attrName]: value,\n      })\n      if (linkWidgetDisplayName) {\n        if (Array.isArray(linkWidgetDisplayName)) {\n          linkWidgetDisplayName.forEach((linkDisplayName) => {\n            handleUpdateOtherMultiAttrDSL?.(linkDisplayName, {\n              [attrName]: value,\n            })\n          })\n        } else {\n          handleUpdateOtherMultiAttrDSL?.(linkWidgetDisplayName, {\n            [attrName]: value,\n          })\n          const linkWidgetLinkedDisplayName = get(\n            executionResult,\n            `${linkWidgetDisplayName}.linkWidgetDisplayName`,\n            [],\n          )\n          linkWidgetLinkedDisplayName &&\n            Array.isArray(linkWidgetLinkedDisplayName) &&\n            linkWidgetLinkedDisplayName.forEach((name) => {\n              name !== widgetDisplayName &&\n                handleUpdateOtherMultiAttrDSL?.(name, {\n                  [attrName]: value,\n                })\n            })\n        }\n      }\n    },\n    [\n      handleUpdateMultiAttrDSL,\n      linkWidgetDisplayName,\n      handleUpdateOtherMultiAttrDSL,\n      executionResult,\n      widgetDisplayName,\n    ],\n  )\n\n  const _componentNode = useMemo(() => {\n    if (componentNode.type === \"CONTAINER_WIDGET\") {\n      return componentNode\n    }\n    const finalNode = searchComponentFromMap(\n      getComponentMap(store.getState()),\n      linkWidgetDisplayName,\n    )\n    if (finalNode?.type === \"CONTAINER_WIDGET\") return finalNode\n    return {} as ComponentMapNode\n  }, [componentNode, linkWidgetDisplayName])\n\n  const handleAddViewItem = useCallback(() => {\n    const newItem = generateNewViewItem(allViewsKeys)\n    const newChildrenNodes = newGenerateChildrenComponentNode(\n      BasicContainerConfig,\n      _componentNode?.displayName,\n    )\n    handleUpdateMultiAttrDSL?.({\n      [attrName]: [...value, newItem],\n    })\n    if (linkWidgetDisplayName) {\n      if (Array.isArray(linkWidgetDisplayName)) {\n        linkWidgetDisplayName.forEach((linkDisplayName) => {\n          handleUpdateOtherMultiAttrDSL?.(linkDisplayName, {\n            [attrName]: [...value, newItem],\n          })\n        })\n      } else {\n        handleUpdateOtherMultiAttrDSL?.(linkWidgetDisplayName, {\n          [attrName]: [...value, newItem],\n        })\n        const linkWidgetLinkedDisplayName = get(\n          executionResult,\n          `${linkWidgetDisplayName}.linkWidgetDisplayName`,\n          [],\n        )\n        linkWidgetLinkedDisplayName &&\n          Array.isArray(linkWidgetLinkedDisplayName) &&\n          linkWidgetLinkedDisplayName.forEach((name) => {\n            name !== widgetDisplayName &&\n              handleUpdateOtherMultiAttrDSL?.(name, {\n                [attrName]: [...value, newItem],\n              })\n          })\n      }\n    }\n    dispatch(componentsActions.addComponentReducer([newChildrenNodes]))\n  }, [\n    _componentNode?.displayName,\n    allViewsKeys,\n    attrName,\n    dispatch,\n    executionResult,\n    handleUpdateMultiAttrDSL,\n    handleUpdateOtherMultiAttrDSL,\n    linkWidgetDisplayName,\n    value,\n    widgetDisplayName,\n  ])\n\n  return (\n    <ViewListSetterProvider\n      viewsList={value}\n      childrenSetter={childrenSetter || []}\n      widgetDisplayName={widgetDisplayName}\n      attrPath={attrName}\n      handleUpdateDsl={handleUpdateDsl}\n      handleUpdateMultiAttrDSL={updateMultiAttrDSL}\n      handleUpdateExecutionResult={handleUpdateExecutionResult}\n      handleUpdateOtherMultiAttrDSL={handleUpdateOtherMultiAttrDSL}\n      componentNode={_componentNode}\n    >\n      <div css={setterPublicWrapper}>\n        <div css={viewSetterWrapperStyle}>\n          <Header\n            labelName={t(\"editor.inspect.setter_content.view_setter.views\")}\n            addAction={handleAddViewItem}\n            hasAddAction\n          />\n          <ListBody />\n        </div>\n      </div>\n    </ViewListSetterProvider>\n  )\n})\n\nViewsSetter.displayName = \"ViewsSetter\"\n\nexport default ViewsSetter\n"],"names":["viewNameSet","generateDatasetName","i","ViewName","generateViewItemId","v4","generateNewViewItem","hasViewNameSet","viewName","ViewListSetterContext","createContext","ViewListSetterProvider","props","viewsList","attrPath","widgetDisplayName","handleUpdateMultiAttrDSL","handleUpdateExecutionResult","componentNode","dispatch","useDispatch","executionResult","useSelector","getExecutionResult","targetComponentProps","rootState","executionTree","get","allViews","useMemo","linkWidgetDisplayName","currentViewIndex","allViewsKeys","view","handleDeleteOptionItem","useCallback","index","updatedArray","optionItem","currentChildrenNodeDisplayName","updateSlice","oldCurrentViewKey","newCurrentViewIndex","item","componentsActions","handleCopyOptionItem","targetOptionItem","newChildrenNodes","newGenerateChildrenComponentNode","BasicContainerConfig","newItem","handleUpdateCurrentViewIndex","currentViewKey","linkDisplayName","linkWidgetLinkedDisplayName","name","handleMoveOptionItem","dragIndex","hoverIndex","dragOptionItem","currentSelected","newComponentNode","klona","newViews","newSelectedIndex","newSelectedKey","value","setterPublicWrapper","css","viewSetterWrapperStyle","globalColor","illaPrefix","HeaderWrapperStyle","HeaderLabelStyle","applyOptionStyle","isSelect","labelAndDragIconWrapperStyle","labelWrapperStyle","actionWrapperStyle","iconStyle","copyIconStyle","moveIconStyle","listItemTriggerWrapperStyle","Header","t","useTranslation","labelName","addAction","hasAddAction","jsxs","jsx","Button","AddIcon","OptionIcon","isSelected","onClick","DragIconAndLabel","label","useContext","currentViews","otherViewKeys","views","key","isDuplicationKey","viewKey","handleChangeCurrentView","e","DragPointIcon","Trigger","WarningCircleIcon","ListItem","modalVisible","setModalVisible","useState","childrenSetter","handleUpdateDsl","handleUpdateOtherMultiAttrDSL","handleCloseModal","singleSelectedComponentNode","getComponentNodeBySingleSelected","widgetType","widgetParentDisplayName","widgetProps","SelectedProvider","displayName","BaseModal","visible","CopyIcon","ReduceIcon","ListBody","originItems","items","setItems","onDragEnd","newViewList","omit","useEffect","isEqual","updateItem","values","AnimatePresence","Reorder","removeNativeStyle","id","ViewsSetter","memo","attrName","updateMultiAttrDSL","_componentNode","finalNode","searchComponentFromMap","getComponentMap","store","handleAddViewItem"],"mappings":"mjBAGW,IAAAA,MAAkB,IAE7B,MAAMC,GAAsB,IAAM,CAChC,IAAIC,EAAI,EACJC,EAAW,QAAQD,CAAC,GACjB,KAAAF,EAAY,IAAIG,CAAQ,GAC7BD,IACAC,EAAW,QAAQD,CAAC,GAEf,OAAAC,CACT,EAEaC,EAAqB,IAAM,SAASC,EAAA,CAAI,GAExCC,EACXC,GACkB,CACJP,EAAA,IAAI,IAAYO,CAAc,EAC5C,MAAMC,EAAWP,KAEV,MAAA,CACL,GAAIG,EAAmB,EACvB,IAAKI,EACL,MAAOA,CAAA,CAEX,ECgBaC,EAAwBC,EAAAA,cAAsB,CAAA,CAAY,EAE1DC,EAA6CC,GAAU,CAC5D,KAAA,CACJ,UAAAC,EACA,SAAAC,EACA,kBAAAC,EACA,yBAAAC,EACA,4BAAAC,EACA,cAAAC,CACE,EAAAN,EACEO,EAAWC,IACXC,EAAkBC,EAAYC,CAAkB,EAEhDC,EAAuBF,EAC1BG,GAAc,CACP,MAAAC,EAAgBH,EAAmBE,CAAS,EAClD,OAAOE,EAAID,EAAeX,EAAmB,CAAE,CAAA,CACjD,CAAA,EAGIa,EAAWC,EAAAA,QAAQ,IAChBF,EACLN,EACA,GAAGN,CAAiB,IAAID,CAAQ,GAChC,CAAC,CAAA,EAEF,CAACA,EAAUO,EAAiBN,CAAiB,CAAC,EAE3Ce,EAAwBD,EAAAA,QAAQ,IAC7BF,EAAIH,EAAsB,wBAAyB,EAAE,EAC3D,CAACA,CAAoB,CAAC,EAEnBO,EAAmBF,EAAAA,QAAQ,IACxBF,EAAIN,EAAiB,GAAGN,CAAiB,eAAe,EAC9D,CAACM,EAAiBN,CAAiB,CAAC,EAEjCiB,EAAeH,EAAAA,QAAQ,IACpBD,EAAS,IAAKK,GAASA,EAAK,GAAG,EACrC,CAACL,CAAQ,CAAC,EAEPM,EAAyBC,EAAA,YAC5BC,GAAkB,CACjB,GAAIvB,EAAU,QAAU,EAAG,OAC3B,MAAMwB,EAAexB,EAAU,OAC7B,CAACyB,EAAiCpC,IACzBA,IAAMkC,CACf,EAGIG,EAAiCrB,EAAc,aAAakB,CAAK,EAEjEI,EAAc,CAClB,CAAC1B,CAAQ,EAAGuB,EACZ,aAAc,EACd,WAAYL,EAAa,CAAC,CAAA,EAG5B,GAAID,IAAqBK,EAAO,CACxB,MAAAK,EAAoB5B,EAAUkB,CAAgB,EAAE,IAChDW,EAAsBL,EAAa,UACtCM,GAASA,EAAK,MAAQF,CAAA,EAErBC,IAAwB,KAC1BF,EAAY,aAAeE,EAC3BF,EAAY,WAAaC,EAE7B,CAEAzB,GAAA,MAAAA,EAA2BwB,GAC3BrB,EACEyB,EAAkB,2BAA2B,CAC3C,aAAc,CAACL,CAA8B,CAAA,CAC9C,CAAA,CAEL,EACA,CACEP,EACAlB,EACAI,EAAc,aACda,EACAZ,EACAH,EACAH,CACF,CAAA,EAGIgC,EAAuBV,EAAA,YAC1BC,GAAkB,CACjB,IAAIU,EAAmBjC,EAAU,KAC/B,CAACyB,EAAiCpC,IACzBA,IAAMkC,CACf,EAEF,GAAI,CAACU,EAAkB,OACvB,MAAMC,EAAmBC,EACvBC,EACA/B,EAAc,WAAA,EAEVgC,EAAU5C,EAAoB0B,CAAY,EAC7Bc,EAAA,CACjB,GAAGA,EACH,IAAKI,EAAQ,IACb,GAAI9C,EAAmB,CAAA,EAEzB,MAAMiC,EAAe,CAAC,GAAGxB,EAAWiC,CAAgB,EACzB9B,GAAA,MAAAA,EAAA,CACzB,CAACF,CAAQ,EAAGuB,CAAA,GAEdlB,EAASyB,EAAkB,oBAAoB,CAACG,CAAgB,CAAC,CAAC,CACpE,EACA,CACEf,EACAlB,EACAI,EAAc,YACdC,EACAH,EACAH,CACF,CAAA,EAGIsC,EAA+BhB,EAAA,YAClCC,GAAkB,CACb,GAAAA,EAAQvB,EAAU,QAAUuB,EAAQ,EAAG,OACrC,MAAAgB,EAAiBxB,EAASQ,CAAK,EAAE,IAKvC,GAJAnB,GAAA,MAAAA,EAA8BF,EAAmB,CAC/C,aAAcqB,EACd,WAAYgB,GAAkBhB,CAAA,GAE5BN,EACE,GAAA,MAAM,QAAQA,CAAqB,EACfA,EAAA,QAASuB,GAAoB,CACjDpC,GAAA,MAAAA,EAA8BoC,EAAiB,CAC7C,aAAcjB,EACd,WAAYgB,GAAkBhB,CAAA,EAC/B,CACF,MACI,CACLnB,GAAA,MAAAA,EAA8Ba,EAAuB,CACnD,aAAcM,EACd,WAAYgB,GAAkBhB,CAAA,GAEhC,MAAMkB,EAA8B3B,EAClCN,EACA,GAAGS,CAAqB,yBACxB,CAAC,CAAA,EAEHwB,GACE,MAAM,QAAQA,CAA2B,GACzCA,EAA4B,QAASC,GAAS,CACnCA,IAAAxC,IACPE,GAAA,MAAAA,EAA8BsC,EAAM,CAClC,aAAcnB,EACd,WAAYgB,GAAkBhB,CAAA,GAC/B,CACJ,CACL,CAEJ,EACA,CACER,EACAP,EACAJ,EACAa,EACAjB,EAAU,OACVE,CACF,CAAA,EAGIyC,EAAuBrB,EAAA,YAC3B,CAACsB,EAAmBC,IAAuB,CACnC,MAAAC,EAAiB9C,EAAU4C,CAAS,EACpCG,EAAkB/C,EAAUkB,CAAgB,EAC5C8B,EAAmBC,GAAM5C,EAAc,YAAY,EACxD,CAAC2C,EAAiBJ,CAAS,EAAGI,EAAiBH,CAAU,CAAC,EAAI,CAC7DG,EAAiBH,CAAU,EAC3BG,EAAiBJ,CAAS,CAAA,EAEtB,MAAAM,EAAW,CAAC,GAAGlD,CAAS,EACrBkD,EAAA,OAAON,EAAW,CAAC,EACnBM,EAAA,OAAOL,EAAY,EAAGC,CAAc,EAC7C,MAAMK,EAAmBD,EAAS,UAC/B9B,GAASA,EAAK,MAAQ2B,EAAgB,GAAA,EAEnCK,EAAiBF,EAASC,CAAgB,EAAE,IACvBhD,GAAA,MAAAA,EAAA,CACzB,CAACF,CAAQ,EAAGiD,EACZ,aAAcC,EACd,WAAYC,CAAA,GAEd9C,EACEyB,EAAkB,iCAAiC,CACjD,kBAAmB1B,EAAc,YACjC,gBAAiB2C,CAAA,CAClB,CAAA,CAEL,EACA,CACE/C,EACAI,EAAc,aACdA,EAAc,YACda,EACAZ,EACAH,EACAH,CACF,CAAA,EAEIqD,EAAQ,CACZ,GAAGtD,EACH,uBAAAsB,EACA,qBAAAW,EACA,iBAAAd,EACA,6BAAAoB,EACA,qBAAAK,CAAA,EAGF,SACG/C,EAAsB,SAAtB,CAA+B,MAAAyD,EAC7B,WAAM,QACT,CAAA,CAEJ,EAEAvD,EAAuB,YAAc,2BCxQ9B,MAAMwD,GAAsBC;AAAA;AAAA;AAAA,EAKtBC,GAAyBD;AAAA;AAAA;AAAA,sBAGhBE,EAAY,KAAKC,CAAU,cAAc,CAAC;AAAA,EAGnDC,GAAqBJ;AAAA;AAAA,sBAEZE,EAAY,KAAKC,CAAU,cAAc,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOnDE,GAAmBL;AAAA,WACrBE,EAAY,KAAKC,CAAU,cAAc,CAAC;AAAA;AAAA;AAAA,EAKxCG,GAAoBC,GACxBP;AAAA;AAAA;AAAA;AAAA,cAIKO,EACN,aAAaL,EAAY,KAAKC,CAAU,gBAAgB,CAAC,GACzD,aAAaD,EAAY,KAAKC,CAAU,cAAc,CAAC,EAAE;AAAA;AAAA,IAKpDK,GAA+BR;AAAA;AAAA;AAAA;AAAA,EAM/BS,GAAoBT;AAAA;AAAA;AAAA;AAAA;AAAA,EAOpBU,GAAqBV;AAAA;AAAA;AAAA;AAAA,EAMrBW,EAAYX;AAAA;AAAA;AAAA;AAAA,WAIdE,EAAY,KAAKC,CAAU,cAAc,CAAC;AAAA,EAGxCS,GAAgBZ;AAAA,IACzBW,CAAS;AAAA;AAAA,EAIAE,GAAgBb;AAAA;AAAA,WAElBE,EAAY,KAAKC,CAAU,cAAc,CAAC;AAAA;AAAA;AAAA;AAAA,EAMxCW,GAA8Bd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EClE9Be,GAA2BvE,GAAU,CAC1C,KAAA,CAAE,EAAAwE,GAAMC,IACR,CAAE,UAAAC,EAAW,UAAAC,EAAW,aAAAC,CAAA,EAAiB5E,EAE7C,OAAA6E,EAAC,MAAI,CAAA,IAAKjB,GACR,SAAA,CAACkB,EAAA,OAAA,CAAK,IAAKjB,GAAmB,SAAUa,EAAA,EACvCE,GACCE,EAACC,GAAA,CACC,WAAWC,GAAQ,EAAA,EACnB,YAAY,aACZ,QAAQ,OACR,QAASL,EAER,WAAE,iDAAiD,CAAA,CACtD,CAEJ,CAAA,CAAA,CAEJ,ECHMM,GAAkC,CAAC,CAAE,WAAAC,EAAY,QAAAC,OAC7C,MAAI,CAAA,IAAKrB,GAAiBoB,CAAU,EAAG,QAAAC,CAAkB,CAAA,EAGtDC,EAA+CpF,GAAU,CACpE,KAAM,CAAE,MAAAwB,EAAO,MAAA6D,EAAO,WAAAH,CAAA,EAAelF,EAC/B,CAAE,kBAAAG,EAAmB,SAAAD,EAAU,6BAAAqC,CAA6B,EAChE+C,EAAAA,WAAWzF,CAAqB,EAE5B,CAAE,EAAA2E,GAAMC,IACRhE,EAAkBC,EAAYC,CAAkB,EAEhD4E,EAAetE,EAAAA,QAAQ,IACpBF,EAAIN,EAAiB,GAAGN,CAAiB,IAAID,CAAQ,IAAIsB,CAAK,GAAI,CAAE,CAAA,EAC1E,CAACtB,EAAUO,EAAiBe,EAAOrB,CAAiB,CAAC,EAElDqF,EAAgBvE,EAAAA,QAAQ,IACXF,EACfN,EACA,GAAGN,CAAiB,IAAID,CAAQ,GAChC,CAAC,CAAA,EAGA,IAAI,CAACuF,EAAOnG,IAAMmG,EAAM,KAAOnG,CAAC,EAChC,OAAO,CAACoG,EAAKpG,IAAMA,GAAKkC,CAAK,EAC/B,CAACtB,EAAUO,EAAiBe,EAAOrB,CAAiB,CAAC,EAElDwF,EAAmB1E,EAAAA,QAAQ,IACxBuE,EAAc,KAAMI,GAAYA,GAAWL,EAAa,GAAG,EACjE,CAACC,EAAeD,CAAY,CAAC,EAE1BM,EAA0BtE,EAAA,YAC7BuE,GAAkC,CACjCA,EAAE,gBAAgB,EAClBvD,EAA6Bf,CAAK,CACpC,EACA,CAACe,EAA8Bf,CAAK,CAAA,EAIpC,OAAAqD,EAAC,OAAK,CAAA,IAAKb,GACT,SAAA,CAAAc,EAACiB,GAAc,CAAA,IAAK1B,GAAe,GAAG,WAAW,EACjDQ,EAAC,MAAI,CAAA,IAAKZ,GACR,SAAA,CAACa,EAAAG,GAAA,CAAW,WAAAC,EAAwB,QAASW,CAAyB,CAAA,IACrE,OAAK,CAAA,MAAO,CAAE,SAAU,SAAY,SAAMR,EAAA,EAC1CM,GACCb,EAACkB,EAAA,CACC,QAAQ,QACR,UAAW,GACX,SAAS,SACT,QAAS,GAAGxB,EAAE,iCAAiC,CAAC,GAEhD,SAAAM,EAACmB,GAAA,CACC,MAAOvC,EAAY,KAAKC,CAAU,YAAY,CAAA,CAChD,CAAA,CACF,CAAA,EAEJ,CACF,CAAA,CAAA,CAEJ,EAEAyB,EAAiB,YAAc,mBCnElB,MAAAc,GAA+BlG,GAAU,CACpD,KAAM,CAAE,MAAAqF,EAAO,MAAA7D,EAAO,WAAA0D,CAAA,EAAelF,EAC/B,CAACmG,EAAcC,CAAe,EAAIC,WAAS,EAAK,EAChD,CACJ,uBAAA/E,EACA,qBAAAW,EACA,SAAA/B,EACA,kBAAAC,EACA,eAAAmG,EACA,gBAAAC,EACA,yBAAAnG,EACA,8BAAAoG,CAAA,EACElB,EAAAA,WAAWzF,CAAqB,EAC9B,CAAE,EAAA2E,GAAMC,IAERgC,EAAmBlF,EAAAA,YAAY,IAAM,CACzC6E,EAAgB,EAAK,CACvB,EAAG,CAAE,CAAA,EAECM,EAA8BhG,EAClCiG,EAAA,EAGIC,GAAaF,GAAA,YAAAA,EAA6B,OAAQ,GAClDG,GAA0BH,GAAA,YAAAA,EAA6B,aAAc,GACrEI,GAAcJ,GAAA,YAAAA,EAA6B,QAAS,GAGxD,OAAA5B,EAACkB,EAAA,CACC,eAAc,GACd,YAAY,QACZ,aAAcG,EACd,QACErB,EAACiC,GAAA,CACC,WAAAH,EACA,kBAAAzG,EACA,wBAAA0G,EACA,YAAAC,EACA,gBAAAP,EACA,yBAA2B3E,GAAgB,CACzCxB,GAAA,MAAAA,EAA2BwB,EAC7B,EACA,8BAA+B,CAACoF,EAAapF,IAAgB,CAC3D4E,GAAA,MAAAA,EAAgCQ,EAAapF,EAC/C,EACA,eAAe,SAEf,SAAAkD,EAACmC,GAAA,CACC,MAAOzC,EAAE,uDAAuD,EAChE,iBAAAiC,EACA,SAAU,GAAGvG,CAAQ,IAAIsB,CAAK,GAC9B,kBAAArB,EACA,eAAAmG,CAAA,CACF,CAAA,CACF,EAEF,QAAQ,QACR,UAAW,GACX,SAAS,OACT,oBAAmB,GACnB,gBAAkBY,GAAY,CAC5Bd,EAAgBc,CAAO,CACzB,EAEA,SAAArC,EAAC,OAAK,CAAA,IAAKP,GACT,SAAA,CAACQ,EAAAM,EAAA,CAAiB,MAAA5D,EAAc,MAAA6D,EAAc,WAAAH,CAAwB,CAAA,EACtEL,EAAC,OAAK,CAAA,IAAKX,GACT,SAAA,CAAAY,EAACqC,GAAA,CACC,IAAK/C,GACL,GAAG,WACH,QAAU,GAAM,CACd,EAAE,gBAAgB,EAClBnC,EAAqBT,CAAK,CAC5B,CAAA,CACF,EACAsD,EAACsC,GAAA,CACC,IAAKjD,EACL,QAAU,GAAM,CACd,EAAE,gBAAgB,EAClB7C,EAAuBE,CAAK,CAC9B,CAAA,CACF,CAAA,EACF,CAAA,EACF,CAAA,CAAA,CAGN,ECzFa6F,GAAe,IAAM,CAChC,MAAM9G,EAAWC,IACX,CACJ,UAAAP,EACA,cAAAK,EACA,iBAAAa,EACA,SAAAjB,EACA,yBAAAE,CAAA,EACEkF,EAAAA,WAAWzF,CAAqB,EAE9ByH,EAA4BrH,EAAU,IAAI,CAACoB,EAAMG,IACjD,MAAM,QAAQlB,EAAc,YAAY,EACnC,CAAE,GAAGe,EAAM,aAAcf,EAAc,aAAakB,CAAK,GAE3D,CAAE,GAAGH,EAAM,aAAc,EAAG,CACpC,EAEK,CAACkG,EAAOC,CAAQ,EAAInB,WAAuBiB,CAAW,EACtDtE,EAAkB/B,EAAA,QACtB,IAAMhB,EAAUkB,CAAgB,EAChC,CAAClB,EAAWkB,CAAgB,CAAA,EAGxBsG,EAAYlG,EAAAA,YAAY,IAAM,CAClC,MAAM0B,EAA6B,CAAA,EAC7ByE,EAA+B,CAAA,EAC/BH,EAAA,QAASxF,GAAS,CACtBA,GAAA,MAAAA,EAAM,cAAgBkB,EAAiB,KAAKlB,EAAK,YAAY,EAC7D2F,EAAY,KAAKC,GAAK5F,EAAM,CAAC,cAAc,CAAC,CAAC,CAAA,CAC9C,EACD,MAAMqB,EAAmBsE,EAAY,UAClCrG,GAASA,EAAK,MAAQ2B,EAAgB,GAAA,EAEnCK,EAAiBqE,EAAYtE,CAAgB,EAAE,IAC1BhD,GAAA,MAAAA,EAAA,CACzB,CAACF,CAAQ,EAAGwH,EACZ,aAActE,EACd,WAAYC,CAAA,GAEd9C,EACEyB,EAAkB,iCAAiC,CACjD,kBAAmB1B,EAAc,YACjC,gBAAiB2C,CAAA,CAClB,CAAA,CACH,EACC,CACDsE,EACAnH,EACAF,EACAK,EACAD,EAAc,YACd0C,GAAA,YAAAA,EAAiB,GAAA,CAClB,EAED4E,EAAAA,UAAU,IAAM,CACTC,EAAQ5H,EAAWsH,CAAK,GAC3BC,EACEvH,EAAU,IAAI,CAACoB,EAAMG,IACf,MAAM,QAAQlB,EAAc,YAAY,EACnC,CAAE,GAAGe,EAAM,aAAcf,EAAc,aAAakB,CAAK,GAE3D,CAAE,GAAGH,EAAM,aAAc,EAAG,CACpC,CAAA,CAIJ,EAAA,CAACf,EAAc,aAAcL,CAAS,CAAC,EAEpC,MAAA6H,EAAcC,GAAyB,CACvCF,EAAQE,EAAQR,CAAK,GACzBC,EAASO,CAAM,CAAA,EAGb,OAAC,MAAM,QAAQ9H,CAAS,EAG1B6E,EAACkD,GAAgB,CAAA,QAAS,GACxB,SAAAlD,EAACmD,EAAQ,MAAR,CACC,KAAK,IACL,QAAS,GACT,OAAQV,EACR,UAAWO,EACX,IAAKI,EAEJ,SAAMX,EAAA,IAAI,CAACxF,EAAMP,IAAU,CAC1B,KAAM,CAAE,GAAA2G,EAAI,MAAA9C,EAAO,IAAAK,CAAA,EAAQ3D,EAEzB,OAAA+C,EAACmD,EAAQ,KAAR,CACC,QAAS,GACT,IAAKC,EAEL,MAAOnG,EACP,UAAA0F,EAEA,SAAA3C,EAACoB,GAAA,CACC,MAAOnE,EACP,MAAAsD,EAEA,MAAA7D,EACA,WAAYkE,KAAQ1C,GAAA,YAAAA,EAAiB,IAAA,EAFhCmF,CAGP,CAAA,EAVKpG,EAAK,EAAA,CAWZ,CAEH,CAAA,CAEL,CAAA,CAAA,EAhCoC,IAkCxC,ECrGMqG,GAAmCC,EAAAA,KAAMrI,GAA2B,CAClE,KAAA,CACJ,MAAAsD,EACA,SAAAgF,EACA,kBAAAnI,EACA,eAAAmG,EACA,4BAAAjG,EACA,yBAAAD,EACA,8BAAAoG,EACA,cAAAlG,CACE,EAAAN,EACE,CAAE,EAAAwE,GAAMC,IACRhE,EAAkBC,EAAYC,CAAkB,EAChDJ,EAAWC,IAEXI,EAAuBF,EAC1BG,GAAc,CACP,MAAAC,EAAgBH,EAAmBE,CAAS,EAClD,OAAOE,EAAID,EAAeX,EAAmB,CAAE,CAAA,CACjD,CAAA,EAGIe,EAAwBD,EAAAA,QAAQ,IAC7BF,EAAIH,EAAsB,wBAAyB,EAAE,EAC3D,CAACA,CAAoB,CAAC,EAEnBI,EAAWC,EAAAA,QAAQ,IAChBF,EACLN,EACA,GAAGN,CAAiB,IAAImI,CAAQ,GAChC,CAAC,CAAA,EAEF,CAACA,EAAU7H,EAAiBN,CAAiB,CAAC,EAE3CiB,EAAeH,EAAAA,QAAQ,IACpBD,EAAS,IAAKK,GAASA,EAAK,GAAG,EACrC,CAACL,CAAQ,CAAC,EAEPuH,EAAqBhH,EAAA,YACxBK,GAAyC,CAExC,GADAxB,GAAA,MAAAA,EAA2BwB,GACvBV,EACE,GAAA,MAAM,QAAQA,CAAqB,EACfA,EAAA,QAASuB,GAAoB,CACjD+D,GAAA,MAAAA,EAAgC/D,EAAiBb,EAAW,CAC7D,MACI,CACL4E,GAAA,MAAAA,EAAgCtF,EAAuBU,GACvD,MAAMc,EAA8B3B,EAClCN,EACA,GAAGS,CAAqB,yBACxB,CAAC,CAAA,EAEHwB,GACE,MAAM,QAAQA,CAA2B,GACzCA,EAA4B,QAASC,GAAS,CACnCA,IAAAxC,IACPqG,GAAA,MAAAA,EAAgC7D,EAAMf,GAAW,CACpD,CACL,CAEJ,EACA,CACEnB,EACAL,EACAoG,EACAtF,EACAf,CACF,CAAA,EAGIoG,EAAkBhF,EAAA,YACtB,CAAC+G,EAAkBhF,IAAe,CAIhC,GAH2BlD,GAAA,MAAAA,EAAA,CACzB,CAACkI,CAAQ,EAAGhF,CAAA,GAEVpC,EACE,GAAA,MAAM,QAAQA,CAAqB,EACfA,EAAA,QAASuB,GAAoB,CACjD+D,GAAA,MAAAA,EAAgC/D,EAAiB,CAC/C,CAAC6F,CAAQ,EAAGhF,CAAA,EACb,CACF,MACI,CACLkD,GAAA,MAAAA,EAAgCtF,EAAuB,CACrD,CAACoH,CAAQ,EAAGhF,CAAA,GAEd,MAAMZ,EAA8B3B,EAClCN,EACA,GAAGS,CAAqB,yBACxB,CAAC,CAAA,EAEHwB,GACE,MAAM,QAAQA,CAA2B,GACzCA,EAA4B,QAASC,GAAS,CACnCA,IAAAxC,IACPqG,GAAA,MAAAA,EAAgC7D,EAAM,CACpC,CAAC2F,CAAQ,EAAGhF,CAAA,GACb,CACJ,CACL,CAEJ,EACA,CACElD,EACAc,EACAsF,EACA/F,EACAN,CACF,CAAA,EAGIqI,EAAiBvH,EAAAA,QAAQ,IAAM,CAC/B,GAAAX,EAAc,OAAS,mBAClB,OAAAA,EAET,MAAMmI,EAAYC,GAChBC,GAAgBC,GAAM,UAAU,EAChC1H,CAAA,EAEF,OAAIuH,GAAA,YAAAA,EAAW,QAAS,mBAA2BA,EAC5C,EAAC,EACP,CAACnI,EAAeY,CAAqB,CAAC,EAEnC2H,EAAoBtH,EAAAA,YAAY,IAAM,CACpC,MAAAe,EAAU5C,EAAoB0B,CAAY,EAC1Ce,EAAmBC,EACvBC,EACAmG,GAAA,YAAAA,EAAgB,WAAA,EAKlB,GAH2BpI,GAAA,MAAAA,EAAA,CACzB,CAACkI,CAAQ,EAAG,CAAC,GAAGhF,EAAOhB,CAAO,CAAA,GAE5BpB,EACE,GAAA,MAAM,QAAQA,CAAqB,EACfA,EAAA,QAASuB,GAAoB,CACjD+D,GAAA,MAAAA,EAAgC/D,EAAiB,CAC/C,CAAC6F,CAAQ,EAAG,CAAC,GAAGhF,EAAOhB,CAAO,CAAA,EAC/B,CACF,MACI,CACLkE,GAAA,MAAAA,EAAgCtF,EAAuB,CACrD,CAACoH,CAAQ,EAAG,CAAC,GAAGhF,EAAOhB,CAAO,CAAA,GAEhC,MAAMI,EAA8B3B,EAClCN,EACA,GAAGS,CAAqB,yBACxB,CAAC,CAAA,EAEHwB,GACE,MAAM,QAAQA,CAA2B,GACzCA,EAA4B,QAASC,GAAS,CACnCA,IAAAxC,IACPqG,GAAA,MAAAA,EAAgC7D,EAAM,CACpC,CAAC2F,CAAQ,EAAG,CAAC,GAAGhF,EAAOhB,CAAO,CAAA,GAC/B,CACJ,CACL,CAEF/B,EAASyB,EAAkB,oBAAoB,CAACG,CAAgB,CAAC,CAAC,CAAA,EACjE,CACDqG,GAAA,YAAAA,EAAgB,YAChBpH,EACAkH,EACA/H,EACAE,EACAL,EACAoG,EACAtF,EACAoC,EACAnD,CAAA,CACD,EAGC,OAAA2E,EAAC/E,EAAA,CACC,UAAWuD,EACX,eAAgBgD,GAAkB,CAAC,EACnC,kBAAAnG,EACA,SAAUmI,EACV,gBAAA/B,EACA,yBAA0BgC,EAC1B,4BAAAlI,EACA,8BAAAmG,EACA,cAAegC,EAEf,WAAC,MAAI,CAAA,IAAKjF,GACR,SAACsB,EAAA,MAAA,CAAI,IAAKpB,GACR,SAAA,CAAAqB,EAACP,GAAA,CACC,UAAWC,EAAE,iDAAiD,EAC9D,UAAWqE,EACX,aAAY,EAAA,CACd,IACCxB,GAAS,EAAA,CAAA,CAAA,CACZ,CACF,CAAA,CAAA,CAAA,CAGN,CAAC,EAEDe,GAAY,YAAc"}