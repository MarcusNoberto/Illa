{"version":3,"file":"index-e829d224.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/InputSetter/FileMinMaxSetter/style.ts","../../src/page/App/components/InspectPanel/PanelSetters/InputSetter/FileMinMaxSetter/index.tsx"],"sourcesContent":["import { css } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/react\"\n\nexport const codeEditorContainerStyle = css`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`\n\nexport const codeEditorWrapperStyle = css`\n  flex: 1;\n  .cm-editor {\n    border-radius: 8px;\n  }\n`\nexport const dashCharStyle = css`\n  width: 9px;\n  line-height: 22px;\n  margin: 0 8px;\n  display: flex;\n  align-items: center;\n`\n\nexport const dropListItemStyle = css`\n  padding: 10px 16px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n  &:hover {\n    background-color: ${getColor(\"grayBlue\", \"09\")};\n  }\n`\n\nexport const inputWithSelectSetterStyle = css`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  position: relative;\n  width: 100%;\n  padding: 8px 16px;\n  gap: 8px;\n`\n\nexport const labelContainerStyle = css`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport const panelLabelContainerStyle = css`\n  width: 66%;\n  display: flex;\n  align-items: center;\n`\n\nexport const sizeContainerStyle = css`\n  display: flex;\n  width: 44px;\n  height: 100%;\n  z-index: 1;\n  gap: 4px;\n  cursor: pointer;\n  border-left: none;\n  align-items: center;\n  padding: 2px;\n  & > svg {\n    width: 12px;\n    height: 12px;\n  }\n`\n\nexport const sizeDropListStyle = css`\n  width: 100px;\n  padding: 8px 0;\n  font-size: 14px;\n  line-height: 22px;\n  color: ${getColor(\"grayBlue\", \"02\")};\n`\n\nexport const sizeSelectionStyle = css`\n  line-height: 26px;\n`\n","import { FC, useCallback, useMemo, useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useSelector } from \"react-redux\"\nimport {\n  DownIcon,\n  Trigger,\n  UpIcon,\n  isNumber,\n  isString,\n} from \"@illa-design/react\"\nimport { CodeEditor } from \"@/components/CodeEditor\"\nimport {\n  CODE_LANG,\n  CODE_TYPE,\n} from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport {\n  getNeedComputedValueWithList,\n  realInputValueWithList,\n} from \"@/page/App/components/InspectPanel/PanelSetters/InputSetter/util\"\nimport { PanelLabel } from \"@/page/App/components/InspectPanel/components/Label\"\nimport { getContainerListDisplayNameMappedChildrenNodeDisplayName } from \"@/redux/currentApp/components/componentsSelector\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport { FileMinMaxSetterProps } from \"./interface\"\nimport {\n  codeEditorContainerStyle,\n  codeEditorWrapperStyle,\n  dashCharStyle,\n  dropListItemStyle,\n  inputWithSelectSetterStyle,\n  labelContainerStyle,\n  panelLabelContainerStyle,\n  sizeContainerStyle,\n  sizeDropListStyle,\n  sizeSelectionStyle,\n} from \"./style\"\n\nconst options = [\n  { label: \"KB\", value: \"kb\" },\n  { label: \"MB\", value: \"mb\" },\n]\n\nconst FileMinMaxSetter: FC<FileMinMaxSetterProps> = (props) => {\n  const {\n    labelName,\n    labelDesc,\n    handleUpdateDsl,\n    widgetDisplayName,\n    placeholder,\n    componentNode,\n  } = props\n\n  const sizeType = componentNode?.props?.sizeType ?? \"\"\n  const maxSize = componentNode?.props?.maxSize ?? \"\"\n  const minSize = componentNode?.props?.minSize ?? \"\"\n\n  const [popupVisible, setPopupVisible] = useState<boolean>(false)\n  const { t } = useTranslation()\n\n  const listWidgets = useSelector(\n    getContainerListDisplayNameMappedChildrenNodeDisplayName,\n  )\n\n  const currentListDisplayName = useMemo(() => {\n    const listWidgetDisplayNames = Object.keys(listWidgets)\n    for (let i = 0; i < listWidgetDisplayNames.length; i++) {\n      if (listWidgets[listWidgetDisplayNames[i]].includes(widgetDisplayName)) {\n        return listWidgetDisplayNames[i]\n      }\n    }\n    return \"\"\n  }, [listWidgets, widgetDisplayName])\n\n  const finalMaxSize = useMemo(() => {\n    if (currentListDisplayName) {\n      return realInputValueWithList(maxSize, currentListDisplayName)\n    }\n    return maxSize\n  }, [currentListDisplayName, maxSize])\n\n  const finalMinSize = useMemo(() => {\n    if (currentListDisplayName) {\n      return realInputValueWithList(minSize, currentListDisplayName)\n    }\n    return minSize\n  }, [currentListDisplayName, minSize])\n\n  const onChange = useCallback(\n    (value: string, attrName: string) => {\n      let output = value\n      if (currentListDisplayName) {\n        output = getNeedComputedValueWithList(value, currentListDisplayName)\n      }\n\n      handleUpdateDsl(attrName, output)\n    },\n    [currentListDisplayName, handleUpdateDsl],\n  )\n\n  const onVisibleChange = (visible: boolean) => {\n    if (popupVisible !== visible) {\n      setPopupVisible(visible)\n    }\n  }\n\n  const handleOptionsItemClick = (value: string | number) => {\n    handleUpdateDsl(\"sizeType\", value)\n    onVisibleChange(false)\n  }\n  return (\n    <div css={inputWithSelectSetterStyle}>\n      <div css={labelContainerStyle}>\n        <div css={panelLabelContainerStyle}>\n          <PanelLabel labelName={labelName} labelDesc={labelDesc} />\n        </div>\n        <div>\n          {options && (\n            <Trigger\n              trigger=\"click\"\n              colorScheme=\"white\"\n              position=\"bottom-start\"\n              withoutPadding\n              showArrow={false}\n              popupVisible={popupVisible}\n              onVisibleChange={onVisibleChange}\n              content={\n                <div css={sizeDropListStyle}>\n                  {options.map((option) => {\n                    let label\n                    let value: number | string\n                    if (isString(option) || isNumber(option)) {\n                      label = value = option\n                    } else {\n                      label = option.label\n                      value = option.value\n                    }\n                    return (\n                      <div\n                        css={dropListItemStyle}\n                        key={value}\n                        onClick={() => handleOptionsItemClick(value)}\n                      >\n                        {label}\n                      </div>\n                    )\n                  })}\n                </div>\n              }\n            >\n              <div css={sizeContainerStyle}>\n                <div css={sizeSelectionStyle}>{sizeType?.toUpperCase()}</div>\n                {popupVisible ? <UpIcon /> : <DownIcon />}\n              </div>\n            </Trigger>\n          )}\n        </div>\n      </div>\n      <div css={codeEditorContainerStyle}>\n        <CodeEditor\n          scopeOfAutoComplete=\"page\"\n          wrapperCss={codeEditorWrapperStyle}\n          value={finalMinSize}\n          onChange={(value) => onChange(value, \"minSize\")}\n          showLineNumbers={false}\n          expectValueType={VALIDATION_TYPES.NUMBER}\n          lang={CODE_LANG.JAVASCRIPT}\n          maxHeight=\"208px\"\n          placeholder={placeholder}\n          maxWidth=\"100%\"\n          codeType={CODE_TYPE.EXPRESSION}\n          modalTitle={t(\"editor.inspect.setter_label.max_size\")}\n        />\n        <div css={dashCharStyle}>~</div>\n        <CodeEditor\n          scopeOfAutoComplete=\"page\"\n          wrapperCss={codeEditorWrapperStyle}\n          value={finalMaxSize}\n          onChange={(value) => onChange(value, \"maxSize\")}\n          showLineNumbers={false}\n          expectValueType={VALIDATION_TYPES.NUMBER}\n          lang={CODE_LANG.JAVASCRIPT}\n          placeholder={placeholder}\n          maxHeight=\"208px\"\n          maxWidth=\"100%\"\n          codeType={CODE_TYPE.EXPRESSION}\n          modalTitle={t(\"editor.inspect.setter_label.min_size\")}\n        />\n      </div>\n    </div>\n  )\n}\nFileMinMaxSetter.displayName = \"FileMinMaxSetter\"\nexport default FileMinMaxSetter\n"],"names":["codeEditorContainerStyle","css","codeEditorWrapperStyle","dashCharStyle","dropListItemStyle","getColor","inputWithSelectSetterStyle","labelContainerStyle","panelLabelContainerStyle","sizeContainerStyle","sizeDropListStyle","sizeSelectionStyle","options","FileMinMaxSetter","props","labelName","labelDesc","handleUpdateDsl","widgetDisplayName","placeholder","componentNode","sizeType","_a","maxSize","_b","minSize","_c","popupVisible","setPopupVisible","useState","t","useTranslation","listWidgets","useSelector","getContainerListDisplayNameMappedChildrenNodeDisplayName","currentListDisplayName","useMemo","listWidgetDisplayNames","finalMaxSize","realInputValueWithList","finalMinSize","onChange","useCallback","value","attrName","output","getNeedComputedValueWithList","onVisibleChange","visible","handleOptionsItemClick","jsxs","jsx","PanelLabel","Trigger","option","label","isString","isNumber","UpIcon","DownIcon","CodeEditor","VALIDATION_TYPES","CODE_LANG","CODE_TYPE"],"mappings":"gmBAGO,MAAMA,EAA2BC;AAAA;AAAA;AAAA;AAAA,EAM3BC,EAAyBD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMzBE,EAAgBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQhBG,EAAoBH;AAAA;AAAA;AAAA;AAAA;AAAA,wBAKTI,EAAS,WAAY,IAAI,CAAC;AAAA;AAAA,EAIrCC,EAA6BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAU7BM,EAAsBN;AAAA;AAAA;AAAA;AAAA,EAMtBO,EAA2BP;AAAA;AAAA;AAAA;AAAA,EAM3BQ,GAAqBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBrBS,GAAoBT;AAAA;AAAA;AAAA;AAAA;AAAA,WAKtBI,EAAS,WAAY,IAAI,CAAC;AAAA,EAGxBM,GAAqBV;AAAA;AAAA,EC1C5BW,EAAU,CACd,CAAE,MAAO,KAAM,MAAO,IAAK,EAC3B,CAAE,MAAO,KAAM,MAAO,IAAK,CAC7B,EAEMC,GAA+CC,GAAU,WACvD,KAAA,CACJ,UAAAC,EACA,UAAAC,EACA,gBAAAC,EACA,kBAAAC,EACA,YAAAC,EACA,cAAAC,CACE,EAAAN,EAEEO,IAAWC,EAAAF,GAAA,YAAAA,EAAe,QAAf,YAAAE,EAAsB,WAAY,GAC7CC,IAAUC,EAAAJ,GAAA,YAAAA,EAAe,QAAf,YAAAI,EAAsB,UAAW,GAC3CC,IAAUC,EAAAN,GAAA,YAAAA,EAAe,QAAf,YAAAM,EAAsB,UAAW,GAE3C,CAACC,EAAcC,CAAe,EAAIC,WAAkB,EAAK,EACzD,CAAE,EAAAC,GAAMC,IAERC,EAAcC,EAClBC,CAAA,EAGIC,EAAyBC,EAAAA,QAAQ,IAAM,CACrC,MAAAC,EAAyB,OAAO,KAAKL,CAAW,EACtD,QAAS,EAAI,EAAG,EAAIK,EAAuB,OAAQ,IACjD,GAAIL,EAAYK,EAAuB,CAAC,CAAC,EAAE,SAASnB,CAAiB,EACnE,OAAOmB,EAAuB,CAAC,EAG5B,MAAA,EAAA,EACN,CAACL,EAAad,CAAiB,CAAC,EAE7BoB,EAAeF,EAAAA,QAAQ,IACvBD,EACKI,EAAuBhB,EAASY,CAAsB,EAExDZ,EACN,CAACY,EAAwBZ,CAAO,CAAC,EAE9BiB,EAAeJ,EAAAA,QAAQ,IACvBD,EACKI,EAAuBd,EAASU,CAAsB,EAExDV,EACN,CAACU,EAAwBV,CAAO,CAAC,EAE9BgB,EAAWC,EAAA,YACf,CAACC,EAAeC,IAAqB,CACnC,IAAIC,EAASF,EACTR,IACOU,EAAAC,EAA6BH,EAAOR,CAAsB,GAGrElB,EAAgB2B,EAAUC,CAAM,CAClC,EACA,CAACV,EAAwBlB,CAAe,CAAA,EAGpC8B,EAAmBC,GAAqB,CACxCrB,IAAiBqB,GACnBpB,EAAgBoB,CAAO,CACzB,EAGIC,EAA0BN,GAA2B,CACzD1B,EAAgB,WAAY0B,CAAK,EACjCI,EAAgB,EAAK,CAAA,EAGrB,OAAAG,EAAC,MAAI,CAAA,IAAK5C,EACR,SAAA,CAAC4C,EAAA,MAAA,CAAI,IAAK3C,EACR,SAAA,CAAA4C,EAAC,OAAI,IAAK3C,EACR,WAAC4C,EAAW,CAAA,UAAArC,EAAsB,UAAAC,EAAsB,CAC1D,CAAA,EACAmC,EAAC,OACE,SACCvC,GAAAuC,EAACE,EAAA,CACC,QAAQ,QACR,YAAY,QACZ,SAAS,eACT,eAAc,GACd,UAAW,GACX,aAAA1B,EACA,gBAAAoB,EACA,UACG,MAAI,CAAA,IAAKrC,GACP,SAAQE,EAAA,IAAK0C,GAAW,CACnB,IAAAC,EACAZ,EACJ,OAAIa,EAASF,CAAM,GAAKG,EAASH,CAAM,EACrCC,EAAQZ,EAAQW,GAEhBC,EAAQD,EAAO,MACfX,EAAQW,EAAO,OAGfH,EAAC,MAAA,CACC,IAAK/C,EAEL,QAAS,IAAM6C,EAAuBN,CAAK,EAE1C,SAAAY,CAAA,EAHIZ,CAAA,CAMV,CAAA,EACH,EAGF,SAAAO,EAAC,MAAI,CAAA,IAAKzC,GACR,SAAA,CAAA0C,EAAC,MAAI,CAAA,IAAKxC,GAAqB,SAAAU,GAAA,YAAAA,EAAU,cAAc,EACtDM,EAAewB,EAACO,EAAO,CAAA,CAAA,IAAMC,EAAS,EAAA,CAAA,EACzC,CAAA,CAAA,EAGN,CAAA,EACF,EACAT,EAAC,MAAI,CAAA,IAAKlD,EACR,SAAA,CAAAmD,EAACS,EAAA,CACC,oBAAoB,OACpB,WAAY1D,EACZ,MAAOsC,EACP,SAAWG,GAAUF,EAASE,EAAO,SAAS,EAC9C,gBAAiB,GACjB,gBAAiBkB,EAAiB,OAClC,KAAMC,EAAU,WAChB,UAAU,QACV,YAAA3C,EACA,SAAS,OACT,SAAU4C,EAAU,WACpB,WAAYjC,EAAE,sCAAsC,CAAA,CACtD,EACCqB,EAAA,MAAA,CAAI,IAAKhD,EAAe,SAAC,IAAA,EAC1BgD,EAACS,EAAA,CACC,oBAAoB,OACpB,WAAY1D,EACZ,MAAOoC,EACP,SAAWK,GAAUF,EAASE,EAAO,SAAS,EAC9C,gBAAiB,GACjB,gBAAiBkB,EAAiB,OAClC,KAAMC,EAAU,WAChB,YAAA3C,EACA,UAAU,QACV,SAAS,OACT,SAAU4C,EAAU,WACpB,WAAYjC,EAAE,sCAAsC,CAAA,CACtD,CAAA,EACF,CACF,CAAA,CAAA,CAEJ,EACAjB,GAAiB,YAAc"}