{"version":3,"file":"list-d161ce9f.js","sources":["../../src/widgetLibrary/ListWidget/utils.tsx","../../src/widgetLibrary/ListWidget/style.ts","../../src/widgetLibrary/ListWidget/components/RenderCopyContainer/index.tsx","../../src/widgetLibrary/ListWidget/components/RenderTemplateContainer/index.tsx","../../src/widgetLibrary/ListWidget/components/ListWidgetWithAutoPagination/index.tsx","../../src/widgetLibrary/ListWidget/components/CursorBasedSelector/style.ts","../../src/widgetLibrary/ListWidget/components/CursorBasedSelector/index.tsx","../../src/widgetLibrary/ListWidget/components/ListWidgetWithServerPagination/index.tsx","../../src/widgetLibrary/ListWidget/components/Loading/style.ts","../../src/widgetLibrary/ListWidget/components/Loading/index.tsx","../../src/widgetLibrary/ListWidget/list.tsx"],"sourcesContent":["import {\n  applyBarHandlerStyle,\n  applyBarPointerStyle,\n} from \"@/page/App/components/ScaleSquare/style\"\nimport { getIsILLAEditMode } from \"@/redux/config/configSelector\"\nimport store from \"@/store\"\nimport { ShadowOptions } from \"./interface\"\n\nexport const resizeBottomHandler = () => {\n  const rootState = store.getState()\n  const isEditMode = getIsILLAEditMode(rootState)\n  const scaleSquareState = !isEditMode ? \"production\" : \"normal\"\n  return {\n    bottom: (\n      <div css={applyBarHandlerStyle(true, scaleSquareState, \"b\")}>\n        <div\n          className=\"handler\"\n          css={applyBarPointerStyle(true, scaleSquareState, \"b\")}\n        />\n      </div>\n    ),\n  }\n}\n\nexport const getGapByShadow = (itemShadow?: ShadowOptions) => {\n  switch (itemShadow) {\n    case \"large\": {\n      return 20\n    }\n    case \"medium\": {\n      return 16\n    }\n    case \"small\": {\n      return 4\n    }\n    case \"none\":\n    default:\n      return 1\n  }\n}\n","import { css } from \"@emotion/react\"\nimport { getColor, getSpecialThemeColor } from \"@illa-design/react\"\nimport { SCROLL_CONTAINER_PADDING } from \"@/page/App/components/DotPanel/constant/canvas\"\nimport {\n  LIST_ITEM_MARGIN_TOP,\n  WIDGET_SCALE_SQUARE_BORDER_WIDTH,\n} from \"@/page/App/components/ScaleSquare/constant/widget\"\nimport { getPaddingShape } from \"@/utils/styleUtils/padding\"\nimport { ShadowOptions } from \"./interface\"\nimport { getGapByShadow } from \"./utils\"\n\nexport const listParentContainerStyle = css`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  overflow: hidden;\n  gap: 8px;\n  justify-content: space-between;\n`\n\nexport const listParentContainerWithPagination = css`\n  ${listParentContainerStyle};\n  overflow-y: auto;\n`\n\nexport const ListParentContainerWithScroll = css`\n  ${listParentContainerStyle};\n  overflow-y: auto;\n`\n\nexport const applyListItemStyle = (\n  isFirst: boolean = false,\n  canShowBorder: boolean = false,\n  bgColor: string,\n  shadowStyle: string,\n  borderStyle: string,\n  isEditor: boolean = false,\n  loading?: boolean,\n  itemHeight?: number,\n  padding?: string,\n) => {\n  // canvas container hash scroll container padding\n  let extraPadding = isFirst ? 0 : SCROLL_CONTAINER_PADDING\n\n  const { paddingTop, paddingBottom, paddingLeft, paddingRight } =\n    getPaddingShape(padding)\n\n  return css`\n    width: 100%;\n    height: ${itemHeight ? `${itemHeight}px` : \"100%\"};\n    background-color: ${bgColor\n      ? getSpecialThemeColor(bgColor)\n      : \"transparent\"};\n    flex: none;\n    border: ${WIDGET_SCALE_SQUARE_BORDER_WIDTH}px dashed\n      ${canShowBorder ? getColor(\"techPurple\", \"03\") : \"transparent\"};\n    opacity: ${isEditor && !isFirst ? 0.5 : 1};\n    ${borderStyle};\n    box-shadow: ${shadowStyle};\n\n    padding: ${paddingTop + extraPadding}px ${paddingRight + extraPadding}px\n      ${paddingBottom + extraPadding}px ${paddingLeft + extraPadding}px;\n    pointer-events: ${loading ? \"none\" : \"unset\"};\n  `\n}\n\nexport const paginationWrapperStyle = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex: none;\n`\n\nexport const itemContainerStyle = (\n  itemGap?: number,\n  shadow?: ShadowOptions,\n) => css`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  gap: ${itemGap ?? LIST_ITEM_MARGIN_TOP}px;\n  overflow-y: auto;\n  padding: ${getGapByShadow(shadow)}px;\n`\n\nexport const selectStyle = (\n  isSelect: boolean,\n  isEditMode: boolean,\n  themeColor?: string,\n  radius?: string,\n  itemHeight?: number,\n) => {\n  if (isEditMode || !isSelect) {\n    return css`\n      width: 100%;\n      height: ${itemHeight ? `${itemHeight}px` : \"100%\"};\n    `\n  }\n  return css`\n    width: 100%;\n    height: ${itemHeight ? `${itemHeight}px` : \"100%\"};\n    outline: 1px solid ${themeColor ?? getColor(\"blue\", \"03\")} !important;\n    border-radius: ${radius ?? \"unset\"};\n  `\n}\n","import { FC } from \"react\"\nimport { RenderComponentCanvasWithJson } from \"@/page/App/components/DotPanel/components/Canvas/renderComponentCanvasContainerWithJson\"\nimport { RenderCopyContainerProps } from \"@/widgetLibrary/ListWidget/interface\"\n\nconst RenderCopyContainer: FC<RenderCopyContainerProps> = (props) => {\n  const {\n    templateComponentNodes,\n    templateContainerHeight: _templateContainerHeight,\n    columnNumber,\n    displayNamePrefix,\n  } = props\n  return templateComponentNodes ? (\n    <RenderComponentCanvasWithJson\n      componentNode={templateComponentNodes}\n      containerPadding={0}\n      columnNumber={columnNumber}\n      displayNamePrefix={displayNamePrefix}\n    />\n  ) : null\n}\n\nexport default RenderCopyContainer\n","import { FC, useCallback } from \"react\"\nimport {\n  LIST_ITEM_MARGIN_TOP,\n  WIDGET_SCALE_SQUARE_BORDER_WIDTH,\n} from \"@/page/App/components/ScaleSquare/constant/widget\"\nimport { RenderTemplateContainerProps } from \"@/widgetLibrary/ListWidget/interface\"\nimport RenderChildrenCanvas from \"@/widgetLibrary/PublicSector/RenderChildrenCanvas\"\nimport { getGapByShadow } from \"../../utils\"\n\nconst RenderTemplateContainer: FC<RenderTemplateContainerProps> = (props) => {\n  const {\n    templateComponentDisplayName,\n    columnNumber,\n    itemGap = LIST_ITEM_MARGIN_TOP,\n    dynamicHeight,\n    extraHeight = 0,\n    templateContainerHeight,\n    handleUpdateOriginalDSLMultiAttr,\n    updateComponentHeight,\n    itemNumber = 1,\n    enableAutoPagination,\n    itemShadow,\n    itemPadding,\n  } = props\n\n  const enableAutoHeight = dynamicHeight !== \"fixed\"\n\n  const handleUpdateHeight = useCallback(\n    (height: number) => {\n      if (!updateComponentHeight) return\n      if (\n        height + 2 * WIDGET_SCALE_SQUARE_BORDER_WIDTH !==\n        templateContainerHeight\n      ) {\n        handleUpdateOriginalDSLMultiAttr(\n          {\n            itemHeight: height + 2 * WIDGET_SCALE_SQUARE_BORDER_WIDTH,\n          },\n          true,\n        )\n      }\n\n      // height + pagination height + pagination gap + every item height + container padding y * 2\n      let componentHeight: number\n      let gap = itemGap >= 0 ? itemGap : LIST_ITEM_MARGIN_TOP\n      if (enableAutoPagination) {\n        componentHeight =\n          height +\n          extraHeight +\n          LIST_ITEM_MARGIN_TOP +\n          2 * WIDGET_SCALE_SQUARE_BORDER_WIDTH +\n          (height + 2 * WIDGET_SCALE_SQUARE_BORDER_WIDTH + gap) *\n            (itemNumber - 1) +\n          getGapByShadow(itemShadow) * 2\n      } else {\n        componentHeight =\n          height +\n          2 * WIDGET_SCALE_SQUARE_BORDER_WIDTH +\n          (height + 2 * WIDGET_SCALE_SQUARE_BORDER_WIDTH + gap) *\n            (itemNumber - 1) +\n          getGapByShadow(itemShadow) * 2\n      }\n      updateComponentHeight(componentHeight)\n    },\n    [\n      handleUpdateOriginalDSLMultiAttr,\n      itemNumber,\n      templateContainerHeight,\n      updateComponentHeight,\n      extraHeight,\n      enableAutoPagination,\n      itemGap,\n      itemShadow,\n    ],\n  )\n\n  return (\n    <RenderChildrenCanvas\n      displayName={templateComponentDisplayName}\n      columnNumber={columnNumber}\n      handleUpdateHeight={handleUpdateHeight}\n      canResizeCanvas={enableAutoHeight}\n      containerPadding={itemPadding?.size}\n    />\n  )\n}\n\nexport default RenderTemplateContainer\n","import { chunk } from \"lodash-es\"\nimport { Resizable, ResizeCallback, ResizeStartCallback } from \"re-resizable\"\nimport { FC, useCallback, useMemo, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport useMeasure from \"react-use-measure\"\nimport { Pagination } from \"@illa-design/react\"\nimport { applyDashedLineStyle } from \"@/page/App/components/ScaleSquare/style\"\nimport { getIsILLAEditMode } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { getShadowStyle } from \"@/utils/styleUtils/shadow\"\nimport { ListWidgetPropsWithChildrenNodes } from \"@/widgetLibrary/ListWidget/interface\"\nimport {\n  applyListItemStyle,\n  itemContainerStyle,\n  listParentContainerWithPagination,\n  paginationWrapperStyle,\n  selectStyle,\n} from \"@/widgetLibrary/ListWidget/style\"\nimport { resizeBottomHandler } from \"../../utils\"\nimport RenderCopyContainer from \"../RenderCopyContainer\"\nimport RenderTemplateContainer from \"../RenderTemplateContainer\"\n\nconst ListWidgetWithAutoPagination: FC<ListWidgetPropsWithChildrenNodes> = (\n  props,\n) => {\n  const {\n    dataSources,\n    itemHeight = 48,\n    displayName,\n    page = 0,\n    itemPadding,\n    dynamicMinHeight,\n    dynamicMaxHeight,\n    enablePagination,\n    childrenNode,\n    itemGap,\n    itemShadow,\n    itemBorderColor,\n    itemBorderRadius,\n    itemBorderWidth,\n    handleUpdateOriginalDSLMultiAttr,\n    updateComponentHeight,\n    copyComponents,\n    pageSize,\n    handleUpdateSelectedItem,\n    itemBackGroundColor,\n    columnNumber,\n    dynamicHeight = \"fixed\",\n    selectIndexForMark,\n    themeColor,\n    loading,\n    handleUpdateMultiExecutionResult,\n    h,\n  } = props\n  const [containerRef, containerBounds] = useMeasure()\n  const [paginationRef, paginationBounds] = useMeasure()\n  const [isMouseHover, setIsMouseHover] = useState(false)\n  const isEditMode = useSelector(getIsILLAEditMode)\n  const dispatch = useDispatch()\n  const safePageSize = !pageSize ? 0 : pageSize\n\n  const currentContainerBoundsHeight =\n    containerBounds.height - paginationBounds.height\n  const itemNumber = useMemo(() => {\n    if (enablePagination) {\n      return safePageSize\n    } else {\n      return dataSources?.length\n    }\n  }, [dataSources?.length, enablePagination, safePageSize])\n\n  const handleChangeCurrentPage = useCallback(\n    (pageNumber: number) => {\n      handleUpdateSelectedItem()\n      handleUpdateMultiExecutionResult([\n        {\n          displayName,\n          value: {\n            page: pageNumber - 1,\n          },\n        },\n      ])\n    },\n    [displayName, handleUpdateMultiExecutionResult, handleUpdateSelectedItem],\n  )\n\n  const currentData = useMemo(() => {\n    const chunkData = chunk(copyComponents, itemNumber)\n    if (chunkData.length === 0) return []\n    return page < chunkData.length ? chunkData[page] : chunkData[0]\n  }, [copyComponents, page, itemNumber])\n\n  const handleResizeStart: ResizeStartCallback = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    dispatch(\n      configActions.setResizingNodeIDsReducer([\n        `${displayName}-resize-listItem`,\n      ]),\n    )\n  }\n\n  const handleOnResizeTopStop: ResizeCallback = useCallback(\n    (e, dir, elementRef, delta) => {\n      const { height } = delta\n      let finalHeight = itemHeight + height\n      handleUpdateOriginalDSLMultiAttr({\n        itemHeight: finalHeight,\n      })\n      dispatch(configActions.setResizingNodeIDsReducer([]))\n    },\n    [dispatch, handleUpdateOriginalDSLMultiAttr, itemHeight],\n  )\n\n  const canShowBorder = isEditMode && isMouseHover\n\n  const shadowStyle = getShadowStyle(itemShadow)\n  const borderStyle = useMemo(() => {\n    let borderWidth, borderRadius\n    const borderWidthNum = itemBorderWidth?.match(/\\d+(\\.\\d+)?/g)\n    if (borderWidthNum) borderWidth = borderWidthNum?.join(\"\") + \"px\"\n    const radiusNum = itemBorderRadius?.match(/\\d+(\\.\\d+)?/g)\n    if (radiusNum) borderRadius = radiusNum?.join(\"\") + \"px\"\n    return `\n    border: ${\n      borderWidth ? `${borderWidth} solid ${itemBorderColor}` : \"unset\"\n    };\n      border-radius: ${borderRadius ?? \"unset\"}\n    `\n  }, [itemBorderColor, itemBorderRadius, itemBorderWidth])\n\n  return (\n    <div\n      css={listParentContainerWithPagination}\n      onMouseEnter={() => {\n        setIsMouseHover(true)\n      }}\n      onMouseLeave={() => {\n        setIsMouseHover(false)\n      }}\n      ref={containerRef}\n    >\n      <div css={itemContainerStyle(itemGap, itemShadow)}>\n        {(page == undefined || page === 0) && (\n          <Resizable\n            size={{\n              width: \"100%\",\n              height: itemHeight,\n            }}\n            key={childrenNode[0]}\n            bounds=\"parent\"\n            minHeight={48}\n            maxHeight={\n              dynamicHeight !== \"fixed\"\n                ? \"unset\"\n                : currentContainerBoundsHeight - 4\n            }\n            handleComponent={isMouseHover ? resizeBottomHandler() : undefined}\n            enable={\n              dynamicHeight !== \"fixed\"\n                ? {}\n                : {\n                    bottom: true,\n                  }\n            }\n            onResizeStart={handleResizeStart}\n            onResizeStop={handleOnResizeTopStop}\n          >\n            <div\n              css={selectStyle(\n                selectIndexForMark === 0,\n                isEditMode,\n                themeColor,\n                itemBorderRadius,\n              )}\n            >\n              <div\n                css={applyListItemStyle(\n                  true,\n                  canShowBorder,\n                  itemBackGroundColor,\n                  shadowStyle,\n                  borderStyle,\n                  isEditMode,\n                  loading,\n                )}\n                onClick={(e) => {\n                  const isClickOnContainer = !!(\n                    e.target as HTMLElement\n                  )?.getAttribute(\"data-list-widget-container\")\n                  handleUpdateSelectedItem(0, isClickOnContainer)\n                }}\n              >\n                <RenderTemplateContainer\n                  templateComponentDisplayName={childrenNode[0]}\n                  templateContainerHeight={itemHeight}\n                  columnNumber={columnNumber}\n                  dynamicHeight={dynamicHeight}\n                  itemNumber={currentData?.length}\n                  extraHeight={paginationBounds.height}\n                  itemShadow={itemShadow}\n                  enableAutoPagination={enablePagination}\n                  handleUpdateOriginalDSLMultiAttr={\n                    handleUpdateOriginalDSLMultiAttr\n                  }\n                  h={h}\n                  updateComponentHeight={updateComponentHeight}\n                  dynamicMinHeight={dynamicMinHeight}\n                  dynamicMaxHeight={dynamicMaxHeight}\n                  itemGap={itemGap}\n                  itemPadding={itemPadding}\n                />\n              </div>\n            </div>\n            {canShowBorder && (\n              <div css={applyDashedLineStyle(false, true, false)} />\n            )}\n          </Resizable>\n        )}\n        {currentData.map((node, index) => {\n          if ((page == undefined || page === 0) && index === 0) {\n            return null\n          }\n          const step = page == undefined ? 0 : page\n          return (\n            <div\n              key={node.displayName}\n              css={selectStyle(\n                selectIndexForMark === index,\n                isEditMode,\n                themeColor,\n                itemBorderRadius,\n                itemHeight,\n              )}\n            >\n              <div\n                css={applyListItemStyle(\n                  false,\n                  canShowBorder,\n                  itemBackGroundColor,\n                  shadowStyle,\n                  borderStyle,\n                  isEditMode,\n                  loading,\n                  itemHeight,\n                  itemPadding?.size,\n                )}\n                key={node.displayName}\n                onClick={(e) => {\n                  const isClickOnContainer = !!(\n                    e.target as HTMLElement\n                  )?.getAttribute(\"data-list-widget-container\")\n                  handleUpdateSelectedItem(index, isClickOnContainer)\n                }}\n              >\n                <RenderCopyContainer\n                  templateComponentNodes={node}\n                  templateContainerHeight={itemHeight}\n                  columnNumber={columnNumber}\n                  displayNamePrefix={`list-child-${\n                    step * itemNumber! + index\n                  }-`}\n                />\n              </div>\n            </div>\n          )\n        })}\n      </div>\n      {enablePagination && (\n        <div css={paginationWrapperStyle} ref={paginationRef}>\n          <Pagination\n            total={dataSources?.length}\n            current={page <= 0 ? 1 : page + 1}\n            pageSize={itemNumber}\n            disableSimplePageJump\n            size=\"medium\"\n            sizeCanChange={false}\n            hideOnSinglePage={false}\n            simple\n            onChange={handleChangeCurrentPage}\n          />\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default ListWidgetWithAutoPagination\n","import { css } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/react\"\n\nexport const selectContainerStyle = css`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 8px;\n`\n\nexport const operationIconStyle = (disabled: boolean) => {\n  return css`\n    pointer-events: ${disabled ? \"not-allowed\" : \"auto\"};\n    font-size: 14px;\n    width: 32px;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    height: 32px;\n    border-radius: 4px;\n    cursor: ${disabled ? \"not-allowed\" : \"pointer\"};\n    color: ${getColor(\"grayBlue\", disabled ? \"08\" : \"03\")};\n    background-color: unset;\n  `\n}\n","import { FC } from \"react\"\nimport { NextIcon, PreviousIcon } from \"@illa-design/react\"\nimport { operationIconStyle, selectContainerStyle } from \"./style\"\n\ninterface CursorBasedSelectorProps {\n  hasNextPage?: boolean\n  page: number\n  previousCursor?: string\n  nextCursor?: string\n  onChange: (isNext: boolean) => void\n}\nconst CursorBasedSelector: FC<CursorBasedSelectorProps> = ({\n  hasNextPage,\n  page,\n  onChange,\n}) => {\n  return (\n    <div css={selectContainerStyle}>\n      <span css={operationIconStyle(page <= 0)} onClick={() => onChange(false)}>\n        <PreviousIcon size=\"14px\" />\n      </span>\n      {page + 1}\n      <span\n        css={operationIconStyle(!hasNextPage)}\n        onClick={() => hasNextPage && onChange(true)}\n      >\n        <NextIcon size=\"14px\" />\n      </span>\n    </div>\n  )\n}\n\nexport default CursorBasedSelector\n","import { isEqual } from \"lodash-es\"\nimport { Resizable, ResizeCallback, ResizeStartCallback } from \"re-resizable\"\nimport { FC, useCallback, useEffect, useMemo, useRef, useState } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport useMeasure from \"react-use-measure\"\nimport { Pagination } from \"@illa-design/react\"\nimport { applyDashedLineStyle } from \"@/page/App/components/ScaleSquare/style\"\nimport { getIsILLAEditMode } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { getShadowStyle } from \"@/utils/styleUtils/shadow\"\nimport {\n  ListWidgetPropsWithChildrenNodes,\n  PAGINATION_TYPE,\n} from \"@/widgetLibrary/ListWidget/interface\"\nimport {\n  ListParentContainerWithScroll,\n  applyListItemStyle,\n  itemContainerStyle,\n  paginationWrapperStyle,\n  selectStyle,\n} from \"@/widgetLibrary/ListWidget/style\"\nimport { resizeBottomHandler } from \"../../utils\"\nimport CursorBasedSelector from \"../CursorBasedSelector\"\nimport RenderCopyContainer from \"../RenderCopyContainer\"\nimport RenderTemplateContainer from \"../RenderTemplateContainer\"\n\nconst ListWidgetWithServerPagination: FC<ListWidgetPropsWithChildrenNodes> = (\n  props,\n) => {\n  const {\n    itemHeight = 48,\n    handleUpdateOriginalDSLMultiAttr,\n    childrenNode,\n    copyComponents = [],\n    handleUpdateSelectedItem,\n    itemBackGroundColor,\n    columnNumber,\n    pageSize,\n    paginationType,\n    totalRowCount = 1,\n    nextCursor,\n    previousCursor,\n    itemGap,\n    page = 0,\n    itemBorderColor,\n    itemBorderRadius,\n    itemBorderWidth,\n    itemShadow,\n    enableServerSidePagination,\n    dynamicHeight,\n    updateComponentHeight,\n    h,\n    dynamicMinHeight,\n    dynamicMaxHeight,\n    displayName,\n    handleUpdateMultiExecutionResult,\n    triggerEventHandler,\n    enablePagination,\n    disabled,\n    selectIndexForMark,\n    themeColor,\n    loading,\n    itemPadding,\n  } = props\n  const [containerRef, containerBounds] = useMeasure()\n  const [paginationRef, paginationBounds] = useMeasure()\n  const [isMouseHover, setIsMouseHover] = useState(false)\n  const safePageSize = !pageSize ? 0 : pageSize\n\n  const currentContainerBoundsHeight =\n    containerBounds.height - paginationBounds.height\n  const isEditMode = useSelector(getIsILLAEditMode)\n  const dispatch = useDispatch()\n\n  const propsRef = useRef(props)\n  const handleChangePage = useCallback(\n    (pageNumber: number) => {\n      if (pageNumber <= 0 || disabled) return\n      handleUpdateSelectedItem()\n      new Promise((resolve) => {\n        handleUpdateMultiExecutionResult([\n          {\n            displayName,\n            value: {\n              page: pageNumber - 1,\n            },\n          },\n        ])\n        resolve(true)\n      }).then(() => {\n        triggerEventHandler(\"pageChange\")\n      })\n    },\n    [\n      disabled,\n      displayName,\n      handleUpdateMultiExecutionResult,\n      handleUpdateSelectedItem,\n      triggerEventHandler,\n    ],\n  )\n\n  const handleCursorBasedChangePage = useCallback(\n    (isNext: boolean) => {\n      if ((page <= 0 && !isNext) || disabled) return\n      handleUpdateSelectedItem()\n      let value: {\n        page: number\n        beforeCursor: string | undefined\n        afterCursor: string | undefined\n      }\n      if (isNext) {\n        value = {\n          page: page + 1,\n          beforeCursor: undefined,\n          afterCursor: nextCursor,\n        }\n      } else {\n        value = {\n          page: page - 1,\n          beforeCursor: previousCursor,\n          afterCursor: undefined,\n        }\n      }\n      new Promise((resolve) => {\n        handleUpdateMultiExecutionResult([\n          {\n            displayName,\n            value,\n          },\n        ])\n        resolve(true)\n      }).then(() => {\n        triggerEventHandler(\"pageChange\")\n      })\n    },\n    [\n      disabled,\n      displayName,\n      handleUpdateMultiExecutionResult,\n      handleUpdateSelectedItem,\n      nextCursor,\n      page,\n      previousCursor,\n      triggerEventHandler,\n    ],\n  )\n\n  useEffect(() => {\n    if (!isEqual(propsRef.current, props)) {\n      propsRef.current = props\n    }\n  }, [props])\n\n  const handleResizeStart: ResizeStartCallback = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    dispatch(\n      configActions.setResizingNodeIDsReducer([\n        `${displayName}-resize-listItem`,\n      ]),\n    )\n  }\n\n  const handleOnResizeTopStop: ResizeCallback = useCallback(\n    (e, dir, elementRef, delta) => {\n      let finalHeight = itemHeight + delta.height\n      handleUpdateOriginalDSLMultiAttr({\n        itemHeight: finalHeight,\n      })\n      dispatch(configActions.setResizingNodeIDsReducer([]))\n    },\n    [dispatch, handleUpdateOriginalDSLMultiAttr, itemHeight],\n  )\n\n  const canShowBorder = isEditMode && isMouseHover\n\n  const shadowStyle = getShadowStyle(itemShadow)\n  const borderStyle = useMemo(() => {\n    let borderWidth, borderRadius\n    const borderWidthNum = itemBorderWidth?.match(/\\d+(\\.\\d+)?/g)\n    if (borderWidthNum) borderWidth = borderWidthNum?.join(\"\") + \"px\"\n    const radiusNum = itemBorderRadius?.match(/\\d+(\\.\\d+)?/g)\n    if (radiusNum) borderRadius = radiusNum?.join(\"\") + \"px\"\n    return `\n    border: ${\n      borderWidth ? `${borderWidth} solid ${itemBorderColor}` : \"unset\"\n    };\n      border-radius: ${borderRadius ?? \"unset\"}\n    `\n  }, [itemBorderColor, itemBorderRadius, itemBorderWidth])\n\n  useEffect(() => {\n    handleUpdateMultiExecutionResult([\n      {\n        displayName,\n        value: {\n          offset: safePageSize * page,\n        },\n      },\n    ])\n  }, [displayName, handleUpdateMultiExecutionResult, page, safePageSize])\n\n  return (\n    <div\n      css={ListParentContainerWithScroll}\n      ref={containerRef}\n      onMouseEnter={() => {\n        setIsMouseHover(true)\n      }}\n      onMouseLeave={() => {\n        setIsMouseHover(false)\n      }}\n    >\n      <div css={itemContainerStyle(itemGap, itemShadow)}>\n        <Resizable\n          size={{\n            width: \"100%\",\n            height: itemHeight,\n          }}\n          bounds=\"parent\"\n          minHeight={48}\n          maxHeight={\n            dynamicHeight !== \"fixed\"\n              ? \"unset\"\n              : currentContainerBoundsHeight - 4\n          }\n          handleComponent={isMouseHover ? resizeBottomHandler() : undefined}\n          enable={\n            dynamicHeight !== \"fixed\"\n              ? {}\n              : {\n                  bottom: true,\n                }\n          }\n          onResizeStart={handleResizeStart}\n          onResizeStop={handleOnResizeTopStop}\n        >\n          <div\n            css={selectStyle(\n              selectIndexForMark === 0,\n              isEditMode,\n              themeColor,\n              itemBorderRadius,\n            )}\n          >\n            <div\n              css={applyListItemStyle(\n                true,\n                canShowBorder,\n                itemBackGroundColor,\n                shadowStyle,\n                borderStyle,\n                isEditMode,\n                loading,\n              )}\n              onClick={(e) => {\n                const isClickOnContainer = !!(\n                  e.target as HTMLElement\n                )?.getAttribute(\"data-list-widget-container\")\n                handleUpdateSelectedItem(0, isClickOnContainer)\n              }}\n            >\n              <RenderTemplateContainer\n                templateComponentDisplayName={childrenNode[0]}\n                templateContainerHeight={itemHeight}\n                columnNumber={columnNumber}\n                dynamicHeight={dynamicHeight}\n                extraHeight={paginationBounds.height}\n                itemShadow={itemShadow}\n                enableAutoPagination={enablePagination}\n                handleUpdateOriginalDSLMultiAttr={\n                  handleUpdateOriginalDSLMultiAttr\n                }\n                itemNumber={copyComponents?.length}\n                updateComponentHeight={updateComponentHeight}\n                h={h}\n                dynamicMinHeight={dynamicMinHeight}\n                dynamicMaxHeight={dynamicMaxHeight}\n                itemGap={itemGap}\n                itemPadding={itemPadding}\n              />\n            </div>\n          </div>\n          {canShowBorder && (\n            <div css={applyDashedLineStyle(false, true, false)} />\n          )}\n        </Resizable>\n        {copyComponents?.map((node, index) => {\n          if (index === 0) return null\n          return (\n            <div\n              key={node.displayName}\n              css={selectStyle(\n                selectIndexForMark === index,\n                isEditMode,\n                themeColor,\n                itemBorderRadius,\n                itemHeight,\n              )}\n            >\n              <div\n                css={applyListItemStyle(\n                  false,\n                  canShowBorder,\n                  itemBackGroundColor,\n                  shadowStyle,\n                  borderStyle,\n                  isEditMode,\n                  loading,\n                  itemHeight,\n                  itemPadding?.size,\n                )}\n                key={node.displayName}\n                onClick={(e) => {\n                  const isClickOnContainer = !!(\n                    e.target as HTMLElement\n                  )?.getAttribute(\"data-list-widget-container\")\n                  handleUpdateSelectedItem(index, isClickOnContainer)\n                }}\n              >\n                <RenderCopyContainer\n                  templateComponentNodes={node}\n                  templateContainerHeight={itemHeight}\n                  columnNumber={columnNumber}\n                  displayNamePrefix={`list-child-${index}-`}\n                />\n              </div>\n            </div>\n          )\n        })}\n      </div>\n      {enablePagination && enableServerSidePagination && (\n        <div css={paginationWrapperStyle} ref={paginationRef}>\n          {paginationType === PAGINATION_TYPE.LIMIT_OFFSET_BASED ? (\n            <Pagination\n              total={totalRowCount <= 1 ? 1 : totalRowCount}\n              current={page <= 0 ? 1 : page + 1}\n              pageSize={safePageSize}\n              size=\"medium\"\n              disableSimplePageJump\n              sizeCanChange={false}\n              hideOnSinglePage={false}\n              simple\n              onChange={handleChangePage}\n            />\n          ) : (\n            <CursorBasedSelector\n              page={page}\n              hasNextPage={props.hasNextPage}\n              onChange={handleCursorBasedChangePage}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default ListWidgetWithServerPagination\n","import { css } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/react\"\n\nexport const ComponentLoadingStyle = css`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: ${getColor(\"white\", \"03\")};\n`\n","import { FC } from \"react\"\nimport { Loading } from \"@illa-design/react\"\nimport { ComponentLoadingStyle } from \"./style\"\n\nexport const ComponentLoading: FC<{ themeColor?: string }> = ({\n  themeColor,\n}) => {\n  return (\n    <div css={ComponentLoadingStyle}>\n      <Loading colorScheme={themeColor} />\n    </div>\n  )\n}\n\nComponentLoading.displayName = \"ComponentLoading\"\n","import { convertPathToString } from \"@illa-public/dynamic-string\"\nimport { ComponentTreeNode } from \"@illa-public/public-types\"\nimport { klona } from \"klona\"\nimport { get, isEqual, set, toPath } from \"lodash-es\"\nimport { FC, useCallback, useEffect, useMemo, useRef, useState } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { getComponentMap } from \"@/redux/currentApp/components/componentsSelector\"\nimport {\n  getExecutionResult,\n  getRawTree,\n} from \"@/redux/currentApp/executionTree/executionSelector\"\nimport { evaluateDynamicString } from \"@/utils/evaluateDynamicString\"\nimport { getObjectPaths } from \"@/utils/executionTreeHelper/utils\"\nimport { isObject } from \"@/utils/typeHelper\"\nimport { VALIDATION_TYPES, validationFactory } from \"@/utils/validationFactory\"\nimport { ListWidgetProps } from \"@/widgetLibrary/ListWidget/interface\"\nimport ListWidgetWithAutoPagination from \"./components/ListWidgetWithAutoPagination\"\nimport ListWidgetWithServerPagination from \"./components/ListWidgetWithServerPagination\"\nimport { ComponentLoading } from \"./components/Loading\"\n\nexport const ListWidget: FC<ListWidgetProps> = (props) => {\n  const {\n    displayName,\n    dataSources,\n    childrenNode,\n    enableServerSidePagination,\n    paginationType,\n    enablePagination,\n    handleUpdateMultiExecutionResult,\n    triggerEventHandler,\n    disabled,\n    loading,\n    themeColor,\n    page = 1,\n    pageSize = 10,\n  } = props\n\n  const executionResult = useSelector(getExecutionResult)\n  const rawTree = useSelector(getRawTree)\n  const components = useSelector(getComponentMap)\n  const [selectIndexForMark, setSelectIndexForMark] = useState<\n    undefined | number\n  >()\n\n  const prevDataSourcesRef = useRef(dataSources)\n\n  const updateTemplateContainerNodesProps = useCallback(\n    (childrenNodeDisplayNames: string[]) => {\n      return childrenNodeDisplayNames.map((itemContainerDisplayName, index) => {\n        const currentItemContainer = klona(components[itemContainerDisplayName])\n        const currentItemDisplayNames = currentItemContainer.childrenNode\n        if (\n          Array.isArray(currentItemDisplayNames) &&\n          currentItemDisplayNames.length > 0\n        ) {\n          let newCurrentItems = currentItemDisplayNames.map(\n            (currentItemDisplayName) => {\n              const currentItem = JSON.parse(\n                JSON.stringify(components[currentItemDisplayName]),\n              ) as ComponentTreeNode\n              if (\n                currentItem.props &&\n                Array.isArray(currentItem.props.$dynamicAttrPaths)\n              ) {\n                const { displayName } = currentItem\n                const { $dynamicAttrPaths } = currentItem.props\n                $dynamicAttrPaths.forEach((path) => {\n                  const finalPath = convertPathToString(toPath(path))\n                  const requireEvalString = get(\n                    currentItem.props,\n                    finalPath,\n                    \"\",\n                  )\n                  let evalResult: unknown\n                  try {\n                    evalResult = evaluateDynamicString(\n                      \"\",\n                      requireEvalString,\n                      executionResult,\n                    )\n                  } catch (e) {\n                    console.log(e)\n                    evalResult = \"\"\n                  }\n                  let value = evalResult\n                  if (Array.isArray(evalResult) && evalResult.length > index) {\n                    const rawWidget = rawTree[displayName]\n                    if (rawWidget && isObject(rawWidget.$validationPaths)) {\n                      const validationPaths = rawWidget.$validationPaths\n                      const validationType = get(validationPaths, finalPath)\n                      if (validationType === VALIDATION_TYPES.ARRAY) {\n                        if (Array.isArray(evalResult)) {\n                          const needSetValue = evalResult[index] ?? []\n                          const validationFunc =\n                            validationFactory[validationType]\n                          const res = validationFunc?.(needSetValue, \"\")\n                          value = res?.safeValue ?? needSetValue\n                        } else {\n                          const validationFunc =\n                            validationFactory[validationType]\n                          const res = validationFunc?.(evalResult, \"\")\n                          value = res?.safeValue ?? evalResult\n                        }\n                      } else {\n                        value = evalResult[index]\n                        const validationFunc = validationFactory[validationType]\n                        const res = validationFunc?.(value, \"\")\n                        value = res?.safeValue ?? value\n                      }\n                    }\n                  }\n                  set(currentItem, `props.${finalPath}`, value)\n                })\n              }\n              if (index !== 0) {\n                set(\n                  currentItem,\n                  \"displayName\",\n                  `list-child-${index}-${currentItemDisplayName}`,\n                )\n                if (disabled != undefined) {\n                  set(currentItem, \"props.disabled\", disabled)\n                }\n              }\n              return currentItem\n            },\n          )\n          newCurrentItems = newCurrentItems.map((item) => {\n            const displayName = item.displayName\n            const displayNameArray = displayName.split(\"-\")\n            const realDisplayName = displayNameArray.at(-1)\n            const rawWidget = rawTree[realDisplayName as string]\n            const validationPaths = rawWidget.$validationPaths\n            if (isObject(validationPaths)) {\n              getObjectPaths(validationPaths).forEach((path) => {\n                const validationType = get(\n                  validationPaths,\n                  path,\n                ) as VALIDATION_TYPES\n                const validationFunc = validationFactory[validationType]\n                const currentValue = get(item, `props.${path}`, \"\")\n                const res = validationFunc?.(currentValue, \"\")\n                set(item, `props.${path}`, res?.safeValue)\n              })\n            }\n            return item\n          })\n          set(currentItemContainer, \"childrenNode\", newCurrentItems)\n        }\n        if (index !== 0) {\n          set(\n            currentItemContainer,\n            \"displayName\",\n            `list-widget-container-${index}`,\n          )\n        }\n        return currentItemContainer as unknown as ComponentTreeNode\n      })\n    },\n    [components, disabled, executionResult, rawTree],\n  )\n\n  const transTemplateContainerNodes = useCallback(\n    (templateContainerDisplayName: string) => {\n      const canvasChildrenDisplayNames: string[] = []\n      if (Array.isArray(dataSources) && dataSources.length > 0) {\n        dataSources.forEach((v, index) => {\n          canvasChildrenDisplayNames[index] = templateContainerDisplayName\n        })\n        return updateTemplateContainerNodesProps(canvasChildrenDisplayNames)\n      } else {\n        return updateTemplateContainerNodesProps([templateContainerDisplayName])\n      }\n    },\n    [dataSources, updateTemplateContainerNodesProps],\n  )\n\n  const getChildrenNodes = useMemo(() => {\n    if (childrenNode && childrenNode.length > 0 && dataSources) {\n      let canvasDisplayName = childrenNode[0]\n      return transTemplateContainerNodes(canvasDisplayName)\n    }\n    return null\n  }, [childrenNode, dataSources, transTemplateContainerNodes])\n\n  const handleUpdateSelectedItem = useCallback(\n    (index?: number, isContainerClick?: boolean) => {\n      if (!Array.isArray(dataSources) || disabled) return\n      if (\n        (selectIndexForMark === index && isContainerClick) ||\n        index === undefined\n      ) {\n        setSelectIndexForMark(undefined)\n      } else {\n        setSelectIndexForMark(index)\n      }\n      new Promise((resolve) => {\n        let value\n        if (\n          index === undefined ||\n          (selectIndexForMark === index && isContainerClick)\n        ) {\n          value = {\n            selectedItem: undefined,\n            selectedIndex: undefined,\n          }\n        } else {\n          const selectItemIndex = enableServerSidePagination\n            ? index\n            : index + page * (pageSize ?? 0)\n          value = {\n            selectedItem: dataSources[selectItemIndex],\n            selectedIndex: index,\n          }\n        }\n        handleUpdateMultiExecutionResult([\n          {\n            displayName,\n            value,\n          },\n        ])\n        resolve(value)\n      }).then(() => {\n        triggerEventHandler(\"rowSelect\")\n      })\n    },\n    [\n      dataSources,\n      disabled,\n      displayName,\n      enableServerSidePagination,\n      handleUpdateMultiExecutionResult,\n      page,\n      pageSize,\n      selectIndexForMark,\n      triggerEventHandler,\n    ],\n  )\n\n  useEffect(() => {\n    if (!isEqual(prevDataSourcesRef.current, dataSources)) {\n      handleUpdateMultiExecutionResult?.([\n        {\n          displayName,\n          value: {\n            selectedIndex: undefined,\n            selectedItem: undefined,\n          },\n        },\n      ])\n    }\n  }, [dataSources, displayName, handleUpdateMultiExecutionResult])\n\n  useEffect(() => {\n    handleUpdateMultiExecutionResult?.([\n      {\n        displayName,\n        value: {\n          page: 0,\n        },\n      },\n    ])\n  }, [\n    displayName,\n    handleUpdateMultiExecutionResult,\n    paginationType,\n    enablePagination,\n    enableServerSidePagination,\n  ])\n\n  return (\n    <>\n      {enableServerSidePagination ? (\n        <ListWidgetWithServerPagination\n          {...props}\n          copyComponents={getChildrenNodes}\n          selectIndexForMark={selectIndexForMark}\n          handleUpdateSelectedItem={handleUpdateSelectedItem}\n        />\n      ) : (\n        <ListWidgetWithAutoPagination\n          {...props}\n          copyComponents={getChildrenNodes}\n          selectIndexForMark={selectIndexForMark}\n          handleUpdateSelectedItem={handleUpdateSelectedItem}\n        />\n      )}\n      {loading && <ComponentLoading themeColor={themeColor} />}\n    </>\n  )\n}\n\nexport default ListWidget\n"],"names":["resizeBottomHandler","rootState","store","scaleSquareState","getIsILLAEditMode","applyBarHandlerStyle","jsx","applyBarPointerStyle","getGapByShadow","itemShadow","listParentContainerStyle","css","listParentContainerWithPagination","ListParentContainerWithScroll","applyListItemStyle","isFirst","canShowBorder","bgColor","shadowStyle","borderStyle","isEditor","loading","itemHeight","padding","extraPadding","SCROLL_CONTAINER_PADDING","paddingTop","paddingBottom","paddingLeft","paddingRight","getPaddingShape","getSpecialThemeColor","WIDGET_SCALE_SQUARE_BORDER_WIDTH","getColor","paginationWrapperStyle","itemContainerStyle","itemGap","shadow","LIST_ITEM_MARGIN_TOP","selectStyle","isSelect","isEditMode","themeColor","radius","RenderCopyContainer","props","templateComponentNodes","_templateContainerHeight","columnNumber","displayNamePrefix","RenderComponentCanvasWithJson","RenderTemplateContainer","templateComponentDisplayName","dynamicHeight","extraHeight","templateContainerHeight","handleUpdateOriginalDSLMultiAttr","updateComponentHeight","itemNumber","enableAutoPagination","itemPadding","enableAutoHeight","handleUpdateHeight","useCallback","height","componentHeight","gap","RenderChildrenCanvas","ListWidgetWithAutoPagination","dataSources","displayName","page","dynamicMinHeight","dynamicMaxHeight","enablePagination","childrenNode","itemBorderColor","itemBorderRadius","itemBorderWidth","copyComponents","pageSize","handleUpdateSelectedItem","itemBackGroundColor","selectIndexForMark","handleUpdateMultiExecutionResult","h","containerRef","containerBounds","useMeasure","paginationRef","paginationBounds","isMouseHover","setIsMouseHover","useState","useSelector","dispatch","useDispatch","safePageSize","currentContainerBoundsHeight","useMemo","handleChangeCurrentPage","pageNumber","currentData","chunkData","chunk","handleResizeStart","e","configActions","handleOnResizeTopStop","dir","elementRef","delta","finalHeight","getShadowStyle","borderWidth","borderRadius","borderWidthNum","radiusNum","jsxs","Resizable","isClickOnContainer","_a","applyDashedLineStyle","node","index","step","Pagination","selectContainerStyle","operationIconStyle","disabled","CursorBasedSelector","hasNextPage","onChange","PreviousIcon","NextIcon","ListWidgetWithServerPagination","paginationType","totalRowCount","nextCursor","previousCursor","enableServerSidePagination","triggerEventHandler","propsRef","useRef","handleChangePage","resolve","handleCursorBasedChangePage","isNext","value","useEffect","isEqual","PAGINATION_TYPE","ComponentLoadingStyle","ComponentLoading","Loading","ListWidget","executionResult","getExecutionResult","rawTree","getRawTree","components","getComponentMap","setSelectIndexForMark","prevDataSourcesRef","updateTemplateContainerNodesProps","childrenNodeDisplayNames","itemContainerDisplayName","currentItemContainer","klona","currentItemDisplayNames","newCurrentItems","currentItemDisplayName","currentItem","$dynamicAttrPaths","path","finalPath","convertPathToString","toPath","requireEvalString","get","evalResult","evaluateDynamicString","rawWidget","isObject","validationPaths","validationType","VALIDATION_TYPES","needSetValue","validationFunc","validationFactory","res","set","item","realDisplayName","getObjectPaths","currentValue","transTemplateContainerNodes","templateContainerDisplayName","canvasChildrenDisplayNames","v","getChildrenNodes","canvasDisplayName","isContainerClick","selectItemIndex","Fragment"],"mappings":"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"}