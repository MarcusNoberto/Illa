{"version":3,"file":"switchGroup-fc42f657.js","sources":["../../src/widgetLibrary/SwitchGroupWidget/style.ts","../../src/widgetLibrary/SwitchGroupWidget/utils.ts","../../src/widgetLibrary/SwitchGroupWidget/switchGroup.tsx"],"sourcesContent":["import { css } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/react\"\n\nconst baseLabelCss = css`\n  display: block;\n  font-size: 14px;\n  text-overflow: ellipsis;\n`\n\nexport const applyLabel = css`\n  ${baseLabelCss};\n  color: ${getColor(\"grayBlue\", \"02\")};\n`\nexport const applyCaptions = css`\n  ${baseLabelCss};\n  color: ${getColor(\"grey\", \"04\")};\n`\n\nexport const applySwitchContainer = (layoutPosition: \"left\" | \"right\") => {\n  return css`\n    display: inline-flex;\n    word-wrap: break-word;\n    flex-direction: ${layoutPosition === \"left\" ? \"row\" : \"row-reverse\"};\n    gap: 8px;\n    cursor: pointer;\n    align-items: center;\n  `\n}\n\nexport const applyContainer = css`\n  display: inline-flex;\n  align-items: center;\n  margin-right: 24px;\n  gap: 6px 24px;\n  flex-wrap: wrap;\n`\n","import {\n  Pluralize,\n  SwitchItem,\n} from \"@/widgetLibrary/SwitchGroupWidget/interface\"\n\nexport const formatSwitchOptions = (\n  optionConfigureMode: \"dynamic\" | \"static\" = \"static\",\n  manualOptions: SwitchItem[] = [],\n  mappedOption: Pluralize<SwitchItem> = {\n    labels: [],\n    captions: [],\n    values: [],\n    disableds: [],\n  },\n) => {\n  if (optionConfigureMode === \"dynamic\") {\n    const label = mappedOption.labels ?? []\n    const value = mappedOption.values ?? []\n    const caption = mappedOption.captions ?? []\n    const disabled = mappedOption.disableds ?? []\n    const maxLength = Math.max(\n      label.length,\n      value.length,\n      disabled.length,\n      caption.length,\n    )\n    const options: SwitchItem[] = []\n    for (let i = 0; i < maxLength; i++) {\n      let labelItem = label[i] || value[i] || i\n      const valueItem = value[i] || label[i] || i\n      const captionItem = caption[i]\n      const disabledItem = disabled[i]\n      if (typeof labelItem === \"object\") {\n        labelItem = i\n      }\n      if (!options.find((item) => item.value === valueItem)) {\n        options.push({\n          label: labelItem,\n          caption: safeNodeValue(captionItem),\n          value: valueItem,\n          disabled: disabledItem,\n        })\n      }\n    }\n    return options\n  } else {\n    if (!Array.isArray(manualOptions)) {\n      return []\n    }\n    const options: SwitchItem[] = []\n    manualOptions.forEach((option, index) => {\n      let labelItem = option.label || option.value || index\n      const captionItem = option.caption\n      const valueItem = option.value || labelItem || index\n      const disabledItem = option.disabled\n      if (typeof labelItem === \"object\") {\n        labelItem = index\n      }\n      if (!options.find((item) => item.value === valueItem)) {\n        options.push({\n          label: labelItem,\n          caption: safeNodeValue(captionItem),\n          value: valueItem,\n          disabled: disabledItem,\n        })\n      }\n    })\n    return options\n  }\n}\n\nconst safeNodeValue = (value: unknown) => {\n  return typeof value === \"string\" ? value : undefined\n}\n","import { FC, useCallback, useEffect, useMemo } from \"react\"\nimport { Switch } from \"@illa-design/react\"\nimport { AutoHeightContainer } from \"@/widgetLibrary/PublicSector/AutoHeightContainer\"\nimport { InvalidMessage } from \"@/widgetLibrary/PublicSector/InvalidMessage/\"\nimport { handleValidateCheck } from \"@/widgetLibrary/PublicSector/InvalidMessage/utils\"\nimport { Label } from \"@/widgetLibrary/PublicSector/Label\"\nimport { TooltipWrapper } from \"@/widgetLibrary/PublicSector/TooltipWrapper\"\nimport {\n  applyLabelAndComponentWrapperStyle,\n  applyValidateMessageWrapperStyle,\n} from \"@/widgetLibrary/PublicSector/TransformWidgetWrapper/style\"\nimport {\n  SwitchGroupWidgetProps,\n  WrappedSwitchGroupProps,\n} from \"@/widgetLibrary/SwitchGroupWidget/interface\"\nimport {\n  applyCaptions,\n  applyContainer,\n  applyLabel,\n  applySwitchContainer,\n} from \"@/widgetLibrary/SwitchGroupWidget/style\"\nimport { formatSwitchOptions } from \"@/widgetLibrary/SwitchGroupWidget/utils\"\n\nexport const WrappedSwitchGroup: FC<WrappedSwitchGroupProps> = (props) => {\n  const {\n    options,\n    layoutPosition,\n    value: finalValue,\n    colorScheme,\n    handleOnChange,\n  } = props\n\n  return (\n    <div css={applyContainer}>\n      {options &&\n        options.map(({ value, caption, label, disabled }, index) => (\n          <label\n            css={applySwitchContainer(layoutPosition)}\n            key={`${index}-${value}`}\n          >\n            <Switch\n              colorScheme={colorScheme}\n              disabled={disabled}\n              data-value={value}\n              checked={Array.isArray(finalValue) && finalValue.includes(value)}\n              onChange={(status, event) =>\n                handleOnChange(\n                  status,\n                  (event.currentTarget as HTMLElement).dataset?.value,\n                )\n              }\n            />\n            <div>\n              <span css={applyLabel}>{label}</span>\n              {caption && <span css={applyCaptions}>{caption}</span>}\n            </div>\n          </label>\n        ))}\n    </div>\n  )\n}\n\nWrappedSwitchGroup.displayName = \"WrappedSwitchGroup\"\n\nexport const SwitchGroupWidget: FC<SwitchGroupWidgetProps> = (props) => {\n  const {\n    value: finalValue = [],\n    optionConfigureMode,\n    mappedOption,\n    manualOptions,\n    labelPosition,\n    labelFull,\n    label,\n    labelAlign,\n    labelWidth = 33,\n    labelCaption,\n    labelWidthUnit,\n    required,\n    labelHidden,\n    tooltipText,\n    customRule,\n    hideValidationMessage,\n    validateMessage,\n    displayName,\n    upToNumber,\n    atLeastNumber,\n    updateComponentHeight,\n    triggerEventHandler,\n    handleUpdateMultiExecutionResult,\n    updateComponentRuntimeProps,\n    deleteComponentRuntimeProps,\n  } = props\n\n  const finalOptions = useMemo(() => {\n    return formatSwitchOptions(optionConfigureMode, manualOptions, mappedOption)\n  }, [optionConfigureMode, manualOptions, mappedOption])\n\n  const getValidateMessage = useCallback(\n    (value: unknown) => {\n      if (!hideValidationMessage) {\n        const message = handleValidateCheck({\n          value,\n          required,\n          atLeastNumber,\n          upToNumber,\n          customRule,\n        })\n        const showMessage = message && message.length > 0\n        return showMessage ? message : \"\"\n      }\n      return \"\"\n    },\n    [atLeastNumber, customRule, hideValidationMessage, required, upToNumber],\n  )\n\n  const handleValidate = useCallback(\n    (value: unknown) => {\n      const message = getValidateMessage(value)\n      handleUpdateMultiExecutionResult([\n        {\n          displayName,\n          value: {\n            validateMessage: message,\n          },\n        },\n      ])\n      return message\n    },\n    [displayName, getValidateMessage, handleUpdateMultiExecutionResult],\n  )\n\n  useEffect(() => {\n    updateComponentRuntimeProps({\n      setValueInArray: (value: unknown) => {\n        if (!value || !Array.isArray(value)) {\n          return\n        }\n        handleUpdateMultiExecutionResult([\n          {\n            displayName,\n            value: {\n              value,\n            },\n          },\n        ])\n      },\n      clearValue: () => {\n        handleUpdateMultiExecutionResult([\n          {\n            displayName,\n            value: {\n              value: [],\n            },\n          },\n        ])\n      },\n      validate: () => {\n        return handleValidate(finalValue)\n      },\n    })\n    return () => {\n      deleteComponentRuntimeProps()\n    }\n  }, [\n    updateComponentRuntimeProps,\n    handleUpdateMultiExecutionResult,\n    deleteComponentRuntimeProps,\n    handleValidate,\n    finalValue,\n    displayName,\n  ])\n\n  const handleOnChange = useCallback(\n    (status: boolean, val: string | number | undefined) => {\n      if (val === undefined) {\n        return\n      }\n      let safeValue: (string | number)[]\n      if (!Array.isArray(finalValue)) {\n        safeValue = []\n      } else {\n        safeValue = finalValue\n      }\n      let handleValue: (string | number)[] | undefined\n      if (!status) {\n        handleValue = safeValue.filter((item) => item !== val)\n      } else {\n        handleValue = [...safeValue, val]\n      }\n      handleValidate(handleValue)\n      new Promise((resolve) => {\n        handleUpdateMultiExecutionResult([\n          {\n            displayName,\n            value: {\n              value: handleValue,\n            },\n          },\n        ])\n        resolve(true)\n      }).then(() => {\n        triggerEventHandler(\"change\")\n      })\n    },\n    [\n      finalValue,\n      handleValidate,\n      handleUpdateMultiExecutionResult,\n      displayName,\n      triggerEventHandler,\n    ],\n  )\n\n  return (\n    <AutoHeightContainer updateComponentHeight={updateComponentHeight}>\n      <TooltipWrapper tooltipText={tooltipText} tooltipDisabled={!tooltipText}>\n        <div css={applyLabelAndComponentWrapperStyle(labelPosition)}>\n          <Label\n            labelFull={labelFull}\n            label={label}\n            labelAlign={labelAlign}\n            labelWidth={labelWidth}\n            labelCaption={labelCaption}\n            labelWidthUnit={labelWidthUnit}\n            labelPosition={labelPosition}\n            required={required}\n            labelHidden={labelHidden}\n            hasTooltip={!!tooltipText}\n          />\n          <WrappedSwitchGroup\n            {...props}\n            value={finalValue}\n            options={finalOptions}\n            handleOnChange={handleOnChange}\n          />\n        </div>\n      </TooltipWrapper>\n      {!hideValidationMessage && (\n        <div\n          css={applyValidateMessageWrapperStyle(\n            labelWidth,\n            labelPosition,\n            labelHidden || !label,\n          )}\n        >\n          <InvalidMessage validateMessage={validateMessage} />\n        </div>\n      )}\n    </AutoHeightContainer>\n  )\n}\nSwitchGroupWidget.displayName = \"SwitchGroupWidget\"\nexport default SwitchGroupWidget\n"],"names":["baseLabelCss","css","applyLabel","getColor","applyCaptions","applySwitchContainer","layoutPosition","applyContainer","formatSwitchOptions","optionConfigureMode","manualOptions","mappedOption","label","value","caption","disabled","maxLength","options","i","labelItem","valueItem","captionItem","disabledItem","item","safeNodeValue","option","index","WrappedSwitchGroup","props","finalValue","colorScheme","handleOnChange","jsx","jsxs","Switch","status","event","_a","SwitchGroupWidget","labelPosition","labelFull","labelAlign","labelWidth","labelCaption","labelWidthUnit","required","labelHidden","tooltipText","customRule","hideValidationMessage","validateMessage","displayName","upToNumber","atLeastNumber","updateComponentHeight","triggerEventHandler","handleUpdateMultiExecutionResult","updateComponentRuntimeProps","deleteComponentRuntimeProps","finalOptions","useMemo","getValidateMessage","useCallback","message","handleValidateCheck","handleValidate","useEffect","val","safeValue","handleValue","resolve","AutoHeightContainer","TooltipWrapper","applyLabelAndComponentWrapperStyle","Label","applyValidateMessageWrapperStyle","InvalidMessage"],"mappings":"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"}