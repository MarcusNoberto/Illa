{"version":3,"file":"index-09fb3c16.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/context/index.tsx","../../src/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/utils/index.ts","../../src/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/List/style.ts","../../src/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/List/empty.tsx","../../src/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/List/eventAndMethodLabel.tsx","../../src/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/List/actionMenu.tsx","../../src/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/List/more.tsx","../../src/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/List/item.tsx","../../src/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/List/body.tsx","../../src/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/style.ts","../../src/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/index.tsx"],"sourcesContent":["import { FC, ReactNode, createContext, useCallback } from \"react\"\nimport { v4 } from \"uuid\"\nimport { PanelFieldConfig } from \"@/page/App/components/InspectPanel/interface\"\n\ninterface ProviderProps {\n  eventItems: any[]\n  childrenSetter: PanelFieldConfig[]\n  widgetDisplayName: string\n  attrPath: string\n  handleUpdateDsl: (attrPath: string, value: any) => void\n  children: ReactNode\n  widgetType: string\n}\n\ninterface Inject extends Omit<ProviderProps, \"children\"> {\n  handleDeleteEventItem: (index: number) => void\n  handleCopyEventItem: (index: number) => void\n}\n\nexport const BaseEventHandlerContext = createContext<Inject>({} as Inject)\n\nexport const BaseEventHandlerProvider: FC<ProviderProps> = (props) => {\n  const { eventItems, attrPath, handleUpdateDsl } = props\n\n  const handleDeleteEventItem = useCallback(\n    (index: number) => {\n      const updatedArray = eventItems.filter(\n        (optionItem: Record<string, any>, i: number) => {\n          return i !== index\n        },\n      )\n      handleUpdateDsl(attrPath, updatedArray)\n    },\n    [eventItems, handleUpdateDsl, attrPath],\n  )\n\n  const handleCopyEventItem = useCallback(\n    (index: number) => {\n      let targetEventItem = eventItems.find(\n        (optionItem: Record<string, any>, i: number) => {\n          return i === index\n        },\n      )\n      if (!targetEventItem) return\n      targetEventItem = {\n        ...targetEventItem,\n        id: `option-${v4()}`,\n      }\n      const updatedArray = [...eventItems, targetEventItem]\n      handleUpdateDsl(attrPath, updatedArray)\n    },\n    [eventItems, handleUpdateDsl, attrPath],\n  )\n\n  const value = {\n    ...props,\n    handleDeleteEventItem,\n    handleCopyEventItem,\n  }\n\n  return (\n    <BaseEventHandlerContext.Provider value={value}>\n      {props.children}\n    </BaseEventHandlerContext.Provider>\n  )\n}\n\nBaseEventHandlerProvider.displayName = \"BaseEventHandlerProvider\"\n","import { v4 } from \"uuid\"\n\nexport const generateEventItemId = () => `events-${v4()}`\n\nexport const generateNewEventItem = (event: string, targetId?: string) => {\n  return {\n    id: generateEventItemId(),\n    eventType: event,\n    targetId,\n    type: \"datasource\",\n    method: \"trigger\",\n  }\n}\n","import { css } from \"@emotion/react\"\nimport { globalColor, illaPrefix } from \"@illa-design/react\"\n\nexport const listItemStyle = css`\n  width: 100%;\n  height: 32px;\n  border: solid 1px ${globalColor(`--${illaPrefix}-grayBlue-08`)};\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${globalColor(`--${illaPrefix}-grayBlue-05`)};\n  font-size: 12px;\n\n  :not(:first-of-type) {\n    margin-top: 8px;\n  }\n\n  cursor: pointer;\n`\nexport const headerWrapperStyle = css`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 40px;\n`\n\nexport const fontButtonWrapperStyle = css`\n  display: flex;\n  align-items: center;\n  color: ${globalColor(`--${illaPrefix}-purple-03`)};\n  cursor: pointer;\n  height: 24px;\n  padding: 1px 8px;\n  border-radius: 8px;\n  font-size: 14px;\n\n  &:hover {\n    background-color: ${globalColor(`--${illaPrefix}-grayBlue-09`)};\n  }\n`\n\nexport const fontButtonStyle = css`\n  margin-left: 4px;\n`\n\nexport const listItemWrapperStyle = css`\n  height: 32px;\n  width: 100%;\n`\n\nexport const groupWrapperStyle = css`\n  width: 100%;\n  height: 32px;\n  display: flex;\n`\n\nexport const moreIconWrapperStyle = css`\n  width: 32px;\n  flex: none;\n  height: 32px;\n  border: 1px solid ${globalColor(`--${illaPrefix}-grayBlue-08`)};\n  border-radius: 0 8px 8px 0;\n  font-size: 14px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  color: ${globalColor(`--${illaPrefix}-grayBlue-06`)};\n`\n\nexport const eventAndMethodWrapperStyle = css`\n  display: flex;\n  height: 100%;\n  width: 100%;\n  box-sizing: border-box;\n  border: 1px solid ${globalColor(`--${illaPrefix}-grayBlue-08`)};\n  border-right: none;\n  border-radius: 8px 0 0 8px;\n  padding: 6px 16px;\n  cursor: pointer;\n  font-size: 12px;\n  gap: 8px;\n  overflow: hidden;\n`\n\nexport const eventNameStyle = css`\n  color: ${globalColor(`--${illaPrefix}-grayBlue-02`)};\n  min-width: 64px;\n  display: block;\n  max-width: 100%;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n`\n\nexport const methodNameStyle = css`\n  color: ${globalColor(`--${illaPrefix}-grayBlue-04`)};\n  display: block;\n  max-width: 100%;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n`\n\nexport const emptyBodyStyle = css`\n  min-height: 32px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding: 8px 16px;\n  background-color: ${globalColor(`--${illaPrefix}-grayBlue-09`)};\n  color: ${globalColor(`--${illaPrefix}-grayBlue-03`)};\n  border-radius: 8px;\n  font-size: 14px;\n`\n","import { FC, memo } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { emptyBodyStyle } from \"@/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/List/style\"\n\nexport const EventHandlerEmpty: FC = memo(() => {\n  const { t } = useTranslation()\n  return (\n    <div css={emptyBodyStyle}>\n      {t(\"editor.inspect.setter_content.event_handler_list.empty\")}\n    </div>\n  )\n})\n\nEventHandlerEmpty.displayName = \"EventHandlerEmpty\"\n","import { ILLA_MIXPANEL_EVENT_TYPE } from \"@illa-public/mixpanel-utils\"\nimport { EVENT_HANDLER_DOC_LINK } from \"@illa-public/public-configs\"\nimport { get } from \"lodash-es\"\nimport { FC, useCallback, useContext, useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useSelector } from \"react-redux\"\nimport { Trigger } from \"@illa-design/react\"\nimport i18n from \"@/i18n/config\"\nimport { BaseEventHandlerContext } from \"@/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/context\"\nimport { BaseModal } from \"@/page/App/components/InspectPanel/PanelSetters/PublicComponent/Modal\"\nimport { isOpenLeftPanel } from \"@/redux/config/configSelector\"\nimport { trackInEditor } from \"@/utils/mixpanelHelper\"\nimport { EventAndMethodLabelProps } from \"./interface\"\nimport {\n  eventAndMethodWrapperStyle,\n  eventNameStyle,\n  methodNameStyle,\n} from \"./style\"\n\nconst getMethodName = (\n  actionType: string,\n  widgetId: string,\n  widgetMethod: string,\n  queryID: string,\n) => {\n  if (actionType === \"widget\") {\n    return widgetId && widgetMethod\n      ? `${widgetId}.${widgetMethod}()`\n      : i18n.t(\n          \"editor.inspect.setter_content.event_handler_list.incomplete_selection\",\n        )\n  }\n  if (actionType === \"datasource\") {\n    return queryID\n      ? `${queryID}.run()`\n      : i18n.t(\n          \"editor.inspect.setter_content.event_handler_list.incomplete_selection\",\n        )\n  }\n  if (actionType) {\n    return `${actionType}()`\n  }\n  return i18n.t(\n    \"editor.inspect.setter_content.event_handler_list.incomplete_selection\",\n  )\n}\n\nexport const EventAndMethodLabel: FC<EventAndMethodLabelProps> = (props) => {\n  const leftPanelVisible = useSelector(isOpenLeftPanel)\n  const { index } = props\n  const { t } = useTranslation()\n  const [modalVisible, setModalVisible] = useState(false)\n  const {\n    widgetDisplayName,\n    attrPath,\n    childrenSetter,\n    eventItems,\n    widgetType,\n  } = useContext(BaseEventHandlerContext)\n\n  const event = get(eventItems, index)\n  const { eventType, widgetID, queryID, widgetMethod, actionType } = event\n  const handleCloseModal = useCallback(() => {\n    setModalVisible(false)\n  }, [])\n\n  return (\n    <Trigger\n      withoutPadding\n      colorScheme=\"white\"\n      popupVisible={modalVisible}\n      content={\n        <BaseModal\n          title={t(\"editor.inspect.setter_content.event_handler_list.title\")}\n          handleCloseModal={handleCloseModal}\n          attrPath={`${attrPath}.${index}`}\n          widgetDisplayName={widgetDisplayName}\n          childrenSetter={childrenSetter}\n          docLink={EVENT_HANDLER_DOC_LINK}\n        />\n      }\n      trigger=\"click\"\n      showArrow={false}\n      position={leftPanelVisible ? \"left-start\" : \"top-start\"}\n      clickOutsideToClose={false}\n      onVisibleChange={(visible) => {\n        if (visible) {\n          trackInEditor(ILLA_MIXPANEL_EVENT_TYPE.SHOW, {\n            element: \"event_handler_editor\",\n            parameter1: widgetType,\n          })\n        }\n        setModalVisible(visible)\n      }}\n    >\n      <div css={eventAndMethodWrapperStyle}>\n        <div css={eventNameStyle}>\n          {eventType\n            ? (t(\n                // @ts-ignore\n                `editor.inspect.setter_content.widget_action_type_name.${eventType}`,\n              ) as string)\n            : t(\n                \"editor.inspect.setter_content.event_handler_list.incomplete_selection\",\n              )}\n        </div>\n        <div css={methodNameStyle}>\n          {getMethodName(actionType, widgetID, widgetMethod, queryID)}\n        </div>\n      </div>\n    </Trigger>\n  )\n}\n\nEventAndMethodLabel.displayName = \"EventAndMethodLabel\"\n","import { FC, useContext } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { DropList, DropListItem } from \"@illa-design/react\"\nimport { BaseEventHandlerContext } from \"@/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/context\"\nimport { ActionMenuProps } from \"./interface\"\n\nexport const ActionMenu: FC<ActionMenuProps> = (props) => {\n  const { index, handleCloseMode } = props\n  const { handleCopyEventItem, handleDeleteEventItem } = useContext(\n    BaseEventHandlerContext,\n  )\n  const { t } = useTranslation()\n\n  return (\n    <DropList w=\"184px\">\n      <DropListItem\n        key=\"duplicate\"\n        value=\"duplicate\"\n        title={t(\n          \"editor.inspect.setter_content.option_list.action_menu.duplicate\",\n        )}\n        onClick={() => {\n          handleCopyEventItem(index)\n          handleCloseMode()\n        }}\n      />\n      <DropListItem\n        key=\"delete\"\n        value=\"delete\"\n        title={t(\n          \"editor.inspect.setter_content.option_list.action_menu.delete\",\n        )}\n        deleted\n        onClick={() => {\n          handleDeleteEventItem(index)\n          handleCloseMode()\n        }}\n      />\n    </DropList>\n  )\n}\n\nActionMenu.displayName = \"ActionMenu\"\n","import { FC, useCallback, useState } from \"react\"\nimport { Dropdown, MoreIcon } from \"@illa-design/react\"\nimport { ActionMenu } from \"./actionMenu\"\nimport { MoreProps } from \"./interface\"\nimport { moreIconWrapperStyle } from \"./style\"\n\nexport const More: FC<MoreProps> = (props) => {\n  const { index } = props\n\n  const [actionMenuVisible, setActionMenuVisible] = useState(false)\n  const handleCloseActionMenu = useCallback(() => {\n    setActionMenuVisible(false)\n  }, [])\n  return (\n    <Dropdown\n      popupVisible={actionMenuVisible}\n      dropList={\n        <ActionMenu index={index} handleCloseMode={handleCloseActionMenu} />\n      }\n      trigger=\"click\"\n      position=\"bottom-end\"\n      onVisibleChange={(visible) => {\n        setActionMenuVisible(visible)\n      }}\n    >\n      <div css={moreIconWrapperStyle}>\n        <MoreIcon />\n      </div>\n    </Dropdown>\n  )\n}\n\nMore.displayName = \"OptionListSetterMore\"\n","import { FC } from \"react\"\nimport { EventAndMethodLabel } from \"@/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/List/eventAndMethodLabel\"\nimport { ListItemProps } from \"@/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/List/interface\"\nimport { More } from \"@/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/List/more\"\nimport {\n  groupWrapperStyle,\n  listItemWrapperStyle,\n} from \"@/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/List/style\"\n\nexport const ListItem: FC<ListItemProps> = (props) => {\n  const { index } = props\n  return (\n    <div css={listItemWrapperStyle}>\n      <div css={groupWrapperStyle}>\n        <EventAndMethodLabel index={index} />\n        <More index={index} />\n      </div>\n    </div>\n  )\n}\n","import { FC } from \"react\"\nimport { EventHandlerEmpty } from \"@/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/List/empty\"\nimport { ListBodyProps } from \"@/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/List/interface\"\nimport { ListItem } from \"@/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/List/item\"\n\nexport const ListBody: FC<ListBodyProps> = (props) => {\n  const { events } = props\n\n  if (!events || events.length === 0) return <EventHandlerEmpty />\n  return (\n    <>\n      {events.map((item, index) => {\n        return <ListItem key={item.id} index={index} />\n      })}\n    </>\n  )\n}\n","import { css } from \"@emotion/react\"\n\nexport const containerStyle = css`\n  padding: 8px 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`\n","import { ILLA_MIXPANEL_EVENT_TYPE } from \"@illa-public/mixpanel-utils\"\nimport { FC, useCallback } from \"react\"\nimport { BaseEventHandlerProvider } from \"@/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/context\"\nimport { NewBaseEventHandlerSetterProps } from \"@/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/interface\"\nimport { generateNewEventItem } from \"@/page/App/components/InspectPanel/PanelSetters/EventHandlerSetter/utils\"\nimport { AddActionLabel } from \"@/page/App/components/InspectPanel/PanelSetters/PublicComponent/Label/addActionLabel\"\nimport { trackInEditor } from \"@/utils/mixpanelHelper\"\nimport { ListBody } from \"./List/body\"\nimport { containerStyle } from \"./style\"\n\nconst EventHandlerSetter: FC<NewBaseEventHandlerSetterProps> = (props) => {\n  const {\n    widgetType,\n    value,\n    childrenSetter,\n    handleUpdateDsl,\n    attrName,\n    widgetDisplayName,\n    labelName,\n    labelDesc,\n    defaultValue,\n    eventHandlerConfig = {\n      events: [`${defaultValue}`],\n      method: [],\n    },\n  } = props\n\n  const handleAddItemAsync = useCallback(async () => {\n    const { events: defaultEvents } = eventHandlerConfig\n    let oldEventItem = Array.isArray(value) ? value : []\n    const eventType =\n      typeof defaultEvents[0] === \"string\"\n        ? defaultEvents[0]\n        : defaultEvents[0].value\n    const newEventItem = generateNewEventItem(eventType, \"query1\")\n    trackInEditor(ILLA_MIXPANEL_EVENT_TYPE.CLICK, {\n      element: \"add_event_handler\",\n      parameter1: widgetType,\n    })\n\n    handleUpdateDsl(attrName, [...oldEventItem, newEventItem])\n  }, [eventHandlerConfig, value, widgetType, handleUpdateDsl, attrName])\n\n  if (\n    !childrenSetter ||\n    !Array.isArray(childrenSetter) ||\n    childrenSetter.length < 1\n  )\n    return null\n\n  return (\n    <BaseEventHandlerProvider\n      eventItems={value}\n      attrPath={attrName}\n      handleUpdateDsl={handleUpdateDsl}\n      widgetDisplayName={widgetDisplayName}\n      childrenSetter={childrenSetter}\n      widgetType={widgetType}\n    >\n      <div css={containerStyle}>\n        <AddActionLabel\n          labelName={labelName}\n          labelDesc={labelDesc}\n          handleAddItem={handleAddItemAsync}\n        />\n        <ListBody events={value} />\n      </div>\n    </BaseEventHandlerProvider>\n  )\n}\n\nEventHandlerSetter.displayName = \"EventHandlerSetter\"\nexport default EventHandlerSetter\n"],"names":["BaseEventHandlerContext","createContext","BaseEventHandlerProvider","props","eventItems","attrPath","handleUpdateDsl","handleDeleteEventItem","useCallback","index","updatedArray","optionItem","i","handleCopyEventItem","targetEventItem","v4","value","generateEventItemId","generateNewEventItem","event","targetId","css","globalColor","illaPrefix","listItemWrapperStyle","groupWrapperStyle","moreIconWrapperStyle","eventAndMethodWrapperStyle","eventNameStyle","methodNameStyle","emptyBodyStyle","EventHandlerEmpty","memo","useTranslation","getMethodName","actionType","widgetId","widgetMethod","queryID","i18n","EventAndMethodLabel","leftPanelVisible","useSelector","isOpenLeftPanel","t","modalVisible","setModalVisible","useState","widgetDisplayName","childrenSetter","widgetType","useContext","get","eventType","widgetID","handleCloseModal","jsx","Trigger","BaseModal","EVENT_HANDLER_DOC_LINK","visible","trackInEditor","ILLA_MIXPANEL_EVENT_TYPE","jsxs","ActionMenu","handleCloseMode","DropList","DropListItem","More","actionMenuVisible","setActionMenuVisible","handleCloseActionMenu","Dropdown","MoreIcon","ListItem","ListBody","events","Fragment","item","containerStyle","EventHandlerSetter","attrName","labelName","labelDesc","defaultValue","eventHandlerConfig","handleAddItemAsync","defaultEvents","oldEventItem","newEventItem","AddActionLabel"],"mappings":"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"}