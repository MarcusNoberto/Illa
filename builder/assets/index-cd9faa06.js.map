{"version":3,"file":"index-cd9faa06.js","sources":["../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/components/PathOperate/index.tsx","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/provider.tsx","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/style.ts","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/DeleteMultiplePart/index.tsx","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/DeleteOnePart/index.tsx","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/DownloadMultiplePart/index.tsx","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/DownloadOnePart/index.tsx","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/components/FolderSelect/style.ts","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/components/FolderSelect/index.tsx","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/components/BaseFxSelect/style.ts","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/components/BaseFxSelect/index.tsx","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/components/SortOperate/style.ts","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/components/SortOperate/index.tsx","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/ListAllPart/index.tsx","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/ListFolders/index.tsx","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/UpdatePart/index.tsx","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/UploadMultiplePart/index.tsx","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/UploadPart/index.tsx","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/utils.tsx","../../src/page/App/components/Actions/ActionPanel/ILLADrivePanel/index.tsx"],"sourcesContent":["import { useContext } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { Button } from \"@illa-design/react\"\nimport { FolderOperateModalContext } from \"@/components/FolderOperateModal/context\"\nimport { PathSelectContext } from \"../../provider\"\n\nconst PathOperate = () => {\n  const { handleOptionsValueChange } = useContext(PathSelectContext)\n  const { currentFolderPath, setFolderOperateVisible } = useContext(\n    FolderOperateModalContext,\n  )\n  const { t } = useTranslation()\n  const handleClick = () => {\n    handleOptionsValueChange(\"path\", `/${currentFolderPath}`)\n    setFolderOperateVisible(false)\n  }\n  return (\n    <Button colorScheme=\"techPurple\" onClick={handleClick}>\n      <span>{t(\"drive.upload.select.confirm_button\")}</span>\n    </Button>\n  )\n}\nexport default PathOperate\n","import { FC, ReactNode, createContext, useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport {\n  FolderOperateModalContext,\n  ROOT_PATH,\n} from \"@/components/FolderOperateModal\"\nimport PathOperate from \"./components/PathOperate\"\n\ninterface Injected {\n  handleOptionsValueChange: (name: string, value: string) => void\n}\n\ninterface FileUploadProviderProps {\n  children: ReactNode\n  handleOptionsValueChange: (name: string, value: string) => void\n}\n\nexport const PathSelectContext = createContext<Injected>({} as Injected)\n\nexport const PathSelectProvider: FC<FileUploadProviderProps> = ({\n  children,\n  handleOptionsValueChange,\n}) => {\n  const { t } = useTranslation()\n  const [currentFolderPath, setCurrentFolderPath] = useState(ROOT_PATH)\n  const [folderOperateVisible, setFolderOperateVisible] = useState(false)\n  const [createFolderVisible, setCreateFolderVisible] = useState(false)\n\n  return (\n    <PathSelectContext.Provider\n      value={{\n        handleOptionsValueChange,\n      }}\n    >\n      <FolderOperateModalContext.Provider\n        value={{\n          subTitle: t(\"drive.upload.modal.select_folder\"),\n          currentFolderPath,\n          folderOperateVisible,\n          createFolderVisible,\n          setCreateFolderVisible,\n          setCurrentFolderPath,\n          setFolderOperateVisible,\n          operateChildren: <PathOperate />,\n        }}\n      >\n        {children}\n      </FolderOperateModalContext.Provider>\n    </PathSelectContext.Provider>\n  )\n}\n","import { css } from \"@emotion/react\"\n\nexport const actionItemContainer = css`\n  padding: 8px 0;\n`\n","import { ILLADriveDeleteMultipleContent } from \"@illa-public/public-types\"\nimport { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport { ILLADriveActionPartProps } from \"../interface\"\n\nexport const DeleteMultiplePart: FC<ILLADriveActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const commandArgs = props.commandArgs as ILLADriveDeleteMultipleContent\n  const { handleOptionsValueChange } = props\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.label.drive.file_ids\")}\n        tips={t(\"editor.action.panel.label.tips.drive.file_ids\")}\n        placeholder={t(\"editor.action.panel.label.placeholder.drive.file_ids\")}\n        lineNumbers\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.fileIDs}\n        onChange={(value) => handleOptionsValueChange(\"fileIDs\", value)}\n        expectedType={VALIDATION_TYPES.ARRAY}\n      />\n    </>\n  )\n}\n\nDeleteMultiplePart.displayName = \"DeleteMultiplePart\"\n","import { ILLADriveDeleteOneContent } from \"@illa-public/public-types\"\nimport { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport { ILLADriveActionPartProps } from \"../interface\"\n\nexport const DeleteOnePart: FC<ILLADriveActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const commandArgs = props.commandArgs as ILLADriveDeleteOneContent\n  const { handleOptionsValueChange } = props\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.label.drive.file_id\")}\n        tips={t(\"editor.action.panel.label.tips.drive.file_id\")}\n        placeholder={t(\"editor.action.panel.label.placeholder.drive.file_id\")}\n        lineNumbers\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.fileID}\n        onChange={(value) => handleOptionsValueChange(\"fileID\", value)}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n    </>\n  )\n}\n\nDeleteOnePart.displayName = \"DeleteOnePart\"\n","import { ILLADriveDownloadMultipleContent } from \"@illa-public/public-types\"\nimport { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport { ILLADriveActionPartProps } from \"../interface\"\n\nexport const DownloadMultiplePart: FC<ILLADriveActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const commandArgs = props.commandArgs as ILLADriveDownloadMultipleContent\n  const { handleOptionsValueChange } = props\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.label.drive.file_ids\")}\n        tips={t(\"editor.action.panel.label.tips.drive.file_ids\")}\n        placeholder={t(\"editor.action.panel.label.placeholder.drive.file_ids\")}\n        lineNumbers\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.fileIDs}\n        onChange={(value) => handleOptionsValueChange(\"fileIDs\", value)}\n        expectedType={VALIDATION_TYPES.ARRAY}\n      />\n    </>\n  )\n}\n\nDownloadMultiplePart.displayName = \"DownloadMultiplePart\"\n","import { ILLADriveDownloadOneContent } from \"@illa-public/public-types\"\nimport { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport { ILLADriveActionPartProps } from \"../interface\"\n\nexport const DownloadOnePart: FC<ILLADriveActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const commandArgs = props.commandArgs as ILLADriveDownloadOneContent\n  const { handleOptionsValueChange } = props\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.label.drive.file_id\")}\n        tips={t(\"editor.action.panel.label.tips.drive.file_id\")}\n        placeholder={t(\"editor.action.panel.label.placeholder.drive.file_id\")}\n        lineNumbers\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.fileID}\n        onChange={(value) => handleOptionsValueChange(\"fileID\", value)}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n    </>\n  )\n}\n\nDownloadOnePart.displayName = \"DownloadOnePart\"\n","import { css } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/react\"\n\nexport const folderSelectStyle = css`\n  width: 100%;\n  display: flex;\n  padding: 8px 16px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-end;\n  gap: 8px;\n`\n\nexport const fileSelectContainerStyle = css`\n  display: flex;\n  padding: 1px 8px;\n  justify-content: center;\n  align-items: center;\n  gap: 4px;\n  cursor: pointer;\n  & > span {\n    color: ${getColor(\"grayBlue\", \"02\")};\n    font-size: 14px;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 22px;\n    text-transform: capitalize;\n  }\n`\nexport const folderIconStyle = css`\n  width: 16px;\n  height: 16px;\n`\n\nexport const headerStyle = css`\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  align-items: center;\n`\n\nexport const actionItemTip = css`\n  font-size: 14px;\n  white-space: pre-line;\n  padding-left: 16px;\n  min-height: 30px;\n  padding-bottom: 8px;\n  display: flex;\n  align-items: stretch;\n  color: ${getColor(\"grayBlue\", \"04\")};\n  align-self: flex-start;\n`\n\nexport const inputContainerStyle = css`\n  width: 100%;\n  display: flex;\n  position: relative;\n  padding-left: 160px;\n  padding-right: 16px;\n  flex-direction: column;\n`\n\nexport const actionItemCodeEditorStyle = css`\n  width: 100%;\n  margin: 0 0 8px 16px;\n`\n\nexport const nameStyle = css`\n  display: flex;\n  width: 160px;\n  justify-content: flex-end;\n  align-items: center;\n  gap: 4px;\n  flex-shrink: 0;\n`\n","import { FC, useContext } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport Folder from \"@/assets/drive/panelFolder.svg?react\"\nimport { CodeEditor } from \"@/components/CodeEditor\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { FolderOperateModalContext } from \"@/components/FolderOperateModal/context\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport { PathSelectContext } from \"../../provider\"\nimport {\n  actionItemCodeEditorStyle,\n  actionItemTip,\n  fileSelectContainerStyle,\n  folderIconStyle,\n  folderSelectStyle,\n  headerStyle,\n  inputContainerStyle,\n  nameStyle,\n} from \"./style\"\n\ninterface FolderSelectProps {\n  value: string\n}\n\nconst FolderSelect: FC<FolderSelectProps> = ({ value }) => {\n  const { t } = useTranslation()\n  const { setFolderOperateVisible } = useContext(FolderOperateModalContext)\n  const { handleOptionsValueChange } = useContext(PathSelectContext)\n  return (\n    <div css={folderSelectStyle}>\n      <div css={headerStyle}>\n        <span css={nameStyle}>\n          {t(\"editor.action.panel.label.drive.folder\")}\n        </span>\n        <div\n          css={fileSelectContainerStyle}\n          onClick={() => setFolderOperateVisible(true)}\n        >\n          <span css={folderIconStyle}>\n            <Folder />\n          </span>\n          <span>{t(\"drive.upload.select.select_entry\")}</span>\n        </div>\n      </div>\n      <div css={inputContainerStyle}>\n        <CodeEditor\n          singleLine\n          wrapperCss={actionItemCodeEditorStyle}\n          lang={CODE_LANG.JAVASCRIPT}\n          value={value}\n          onChange={(value) => handleOptionsValueChange(\"path\", value)}\n          expectValueType={VALIDATION_TYPES.STRING}\n          modalTitle={t(\"editor.action.panel.label.drive.folder\")}\n        />\n        <div css={actionItemTip}>\n          <span>{t(\"editor.action.panel.label.tips.drive.folder\")}</span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default FolderSelect\n","import { css } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/react\"\n\nexport const containerStyle = css`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n`\n\nexport const getFxIconStyle = (selected?: boolean) => {\n  return css`\n    width: 16px;\n    height: 16px;\n    color: ${selected\n      ? getColor(\"techPurple\", \"03\")\n      : getColor(\"grayBlue\", \"04\")};\n    cursor: pointer;\n    z-index: 1;\n    margin-right: 16px;\n    :hover {\n      cursor: pointer;\n      color: ${getColor(\"techPurple\", \"03\")};\n    }\n  `\n}\n","import { FC } from \"react\"\nimport { FxIcon } from \"@illa-design/react\"\nimport { SingleTypeComponent } from \"@/page/App/components/Actions/ActionPanel/SingleTypeComponent\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport { containerStyle, getFxIconStyle } from \"./style\"\n\ninterface BaseFxSelectProps {\n  attrName: string\n  value: string\n  isFx: boolean\n  label: string\n  options: string[]\n  handleOptionsValueChange: (name: string, value: string | boolean) => void\n}\n\nexport const BaseFxSelect: FC<BaseFxSelectProps> = (props) => {\n  const { attrName, value, isFx, options, label, handleOptionsValueChange } =\n    props\n\n  const handleOnClick = () => {\n    handleOptionsValueChange(`${attrName}Fx`, !isFx)\n  }\n\n  return (\n    <div css={containerStyle}>\n      {isFx ? (\n        <InputEditor\n          title={label}\n          value={value}\n          onChange={(v) => handleOptionsValueChange(attrName, v as string)}\n          expectedType={VALIDATION_TYPES.STRING}\n        />\n      ) : (\n        <SingleTypeComponent\n          title={label}\n          componentType=\"select\"\n          value={value}\n          onChange={(v) => handleOptionsValueChange(attrName, v as string)}\n          options={options}\n        />\n      )}\n      <FxIcon onClick={handleOnClick} css={getFxIconStyle(isFx)} />\n    </div>\n  )\n}\nBaseFxSelect.displayName = \"BaseFxSelect\"\n","import { css } from \"@emotion/react\"\n\nexport const containerStyle = css`\n  width: 100%;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n`\n","import {\n  ILLADriveListAllContent,\n  ILLADriveListFoldersContent,\n  SORTED_TYPE,\n} from \"@illa-public/public-types\"\nimport { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { BaseFxSelect } from \"../BaseFxSelect\"\nimport { containerStyle } from \"./style\"\n\ninterface SortOperateProps {\n  commandArgs: ILLADriveListAllContent | ILLADriveListFoldersContent\n  sortByeOptions: string[]\n  handleOptionsValueChange: (name: string, value: string | boolean) => void\n}\n\nconst SortOperate: FC<SortOperateProps> = ({\n  sortByeOptions,\n  commandArgs,\n  handleOptionsValueChange,\n}) => {\n  const { t } = useTranslation()\n  const sortTypeOptions = [SORTED_TYPE.ascend, SORTED_TYPE.descend]\n\n  return (\n    <div css={containerStyle}>\n      <BaseFxSelect\n        attrName=\"sortedBy\"\n        label={t(\"editor.action.panel.label.drive.sort_by\")}\n        isFx={commandArgs.sortedByFx}\n        value={commandArgs.sortedBy}\n        options={sortByeOptions}\n        handleOptionsValueChange={handleOptionsValueChange}\n      />\n      <BaseFxSelect\n        attrName=\"sortedType\"\n        label={t(\"editor.action.panel.label.drive.sort_direction\")}\n        isFx={commandArgs.sortedTypeFx}\n        value={commandArgs.sortedType}\n        options={sortTypeOptions}\n        handleOptionsValueChange={handleOptionsValueChange}\n      />\n    </div>\n  )\n}\n\nexport default SortOperate\n","import {\n  EXPIRATION_TYPE,\n  ILLADriveListAllContent,\n  ILLA_DRIVE_FILTER_TYPE,\n} from \"@illa-public/public-types\"\nimport { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { ILLADriveActionPartProps } from \"@/page/App/components/Actions/ActionPanel/ILLADrivePanel/interface\"\nimport { SingleTypeComponent } from \"@/page/App/components/Actions/ActionPanel/SingleTypeComponent\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport FolderSelect from \"../components/FolderSelect\"\nimport SortOperate from \"../components/SortOperate\"\n\nexport const ListAllPart: FC<ILLADriveActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const commandArgs = props.commandArgs as ILLADriveListAllContent\n  const { handleOptionsValueChange } = props\n  const filterType = commandArgs.filterType\n  const expirationType = commandArgs.expirationType\n  const sortByeOptions = [\n    \"id\",\n    \"lastModifiedAt\",\n    \"lastModifiedBy\",\n    \"name\",\n    \"contentType\",\n    \"size\",\n  ]\n\n  const FileUrlExpiredTypeOption = [\n    {\n      label: t(\"editor.inspect.setter_option.drive_builder.expired_time.never\"),\n      value: EXPIRATION_TYPE.PERSISTENT,\n    },\n    {\n      label: t(\n        \"editor.inspect.setter_option.drive_builder.expired_time.customer\",\n      ),\n      value: EXPIRATION_TYPE.CUSTOM,\n    },\n  ]\n\n  const FilterTypeOption = [\n    {\n      label: t(\"editor.action.panel.label.option.drive.file_type.none\"),\n      value: ILLA_DRIVE_FILTER_TYPE.NONE,\n    },\n    {\n      label: t(\"editor.action.panel.label.option.drive.file_type.by_id\"),\n      value: ILLA_DRIVE_FILTER_TYPE.BY_ID,\n    },\n    {\n      label: t(\"editor.action.panel.label.option.drive.file_type.by_name\"),\n      value: ILLA_DRIVE_FILTER_TYPE.BY_NAME,\n    },\n  ]\n\n  return (\n    <>\n      <SingleTypeComponent\n        title={t(\"editor.action.panel.label.drive.filter_type\")}\n        tips={t(\"editor.action.panel.label.tips.drive.filter_type\")}\n        value={commandArgs.filterType}\n        componentType=\"select\"\n        type=\"button\"\n        forceEqualWidth={true}\n        onChange={(value) => handleOptionsValueChange(\"filterType\", value)}\n        options={FilterTypeOption}\n      />\n      {filterType === ILLA_DRIVE_FILTER_TYPE.BY_NAME && (\n        <InputEditor\n          title={t(\"editor.action.panel.label.drive.file_name\")}\n          tips={t(\"editor.action.panel.label.tips.drive.file_name\")}\n          placeholder={t(\n            \"editor.action.panel.label.placeholder.drive.file_name\",\n          )}\n          lineNumbers\n          mode={CODE_LANG.JAVASCRIPT}\n          value={commandArgs.search}\n          onChange={(value) => handleOptionsValueChange(\"search\", value)}\n          expectedType={VALIDATION_TYPES.STRING}\n        />\n      )}\n      {filterType === ILLA_DRIVE_FILTER_TYPE.BY_ID && (\n        <InputEditor\n          title={t(\"editor.action.panel.label.drive.file_id\")}\n          tips={t(\"editor.action.panel.label.tips.drive.file_id\")}\n          placeholder={t(\"editor.action.panel.label.placeholder.drive.file_id\")}\n          lineNumbers\n          mode={CODE_LANG.JAVASCRIPT}\n          value={commandArgs.fileID}\n          onChange={(value) => handleOptionsValueChange(\"fileID\", value)}\n          expectedType={VALIDATION_TYPES.STRING}\n        />\n      )}\n      <FolderSelect value={commandArgs.path} />\n\n      <SingleTypeComponent\n        title={t(\"editor.inspect.setter_label.drive_builder.expired_time\")}\n        tips={t(\"editor.inspect.setter_tips.drive_builder.expired_time\")}\n        value={commandArgs.expirationType}\n        componentType=\"radio-group\"\n        type=\"button\"\n        forceEqualWidth={true}\n        onChange={(value) => handleOptionsValueChange(\"expirationType\", value)}\n        radioOptions={FileUrlExpiredTypeOption}\n      />\n      {expirationType === EXPIRATION_TYPE.CUSTOM && (\n        <InputEditor\n          title={t(\"editor.inspect.setter_label.drive_builder.time\")}\n          tips={t(\"editor.inspect.setter_tips.drive_builder.time\")}\n          mode={CODE_LANG.JAVASCRIPT}\n          value={commandArgs.expiry}\n          onChange={(value) => handleOptionsValueChange(\"expiry\", value)}\n          expectedType={VALIDATION_TYPES.NUMBER}\n        />\n      )}\n      <SingleTypeComponent\n        title={t(\"editor.inspect.setter_label.drive_builder.turn_on_hotlink\")}\n        tips={t(\"editor.inspect.setter_tips.drive_builder.turn_on_hotlink\")}\n        value={commandArgs.hotlinkProtection}\n        componentType=\"switch\"\n        onChange={(value) =>\n          handleOptionsValueChange(\"hotlinkProtection\", value)\n        }\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.label.drive.limit\")}\n        tips={t(\"editor.action.panel.label.tips.drive.limit\")}\n        placeholder={t(\"editor.action.panel.label.placeholder.drive.limit\")}\n        lineNumbers\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.limit}\n        onChange={(value) => handleOptionsValueChange(\"limit\", value)}\n        expectedType={VALIDATION_TYPES.NUMBER}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.label.drive.page\")}\n        tips={t(\"editor.action.panel.label.tips.drive.page\")}\n        placeholder={t(\"editor.action.panel.label.placeholder.drive.page\")}\n        lineNumbers\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.page}\n        onChange={(value) => handleOptionsValueChange(\"page\", value)}\n        expectedType={VALIDATION_TYPES.NUMBER}\n      />\n      <SortOperate\n        sortByeOptions={sortByeOptions}\n        commandArgs={commandArgs}\n        handleOptionsValueChange={handleOptionsValueChange}\n      />\n    </>\n  )\n}\n\nListAllPart.displayName = \"ListAllPart\"\n","import {\n  ILLADriveListFoldersContent,\n  ILLA_DRIVE_FILTER_TYPE,\n} from \"@illa-public/public-types\"\nimport { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { ILLADriveActionPartProps } from \"@/page/App/components/Actions/ActionPanel/ILLADrivePanel/interface\"\nimport { SingleTypeComponent } from \"@/page/App/components/Actions/ActionPanel/SingleTypeComponent\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport FolderSelect from \"../components/FolderSelect\"\nimport SortOperate from \"../components/SortOperate\"\n\nexport const ListFolders: FC<ILLADriveActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const commandArgs = props.commandArgs as ILLADriveListFoldersContent\n  const { handleOptionsValueChange } = props\n  const filterType = commandArgs.filterType\n\n  const sortByeOptions = [\n    \"id\",\n    \"lastModifiedAt\",\n    \"lastModifiedBy\",\n    \"name\",\n    \"fileNum\",\n    \"folderNum\",\n  ]\n\n  const FilterTypeOption = [\n    {\n      label: t(\"editor.action.panel.label.option.drive.file_type.none\"),\n      value: ILLA_DRIVE_FILTER_TYPE.NONE,\n    },\n    {\n      label: t(\"editor.action.panel.label.option.drive.file_type.by_id\"),\n      value: ILLA_DRIVE_FILTER_TYPE.BY_ID,\n    },\n    {\n      label: t(\"editor.action.panel.label.option.drive.file_type.by_name\"),\n      value: ILLA_DRIVE_FILTER_TYPE.BY_NAME,\n    },\n  ]\n\n  return (\n    <>\n      <SingleTypeComponent\n        title={t(\"editor.action.panel.label.drive.filter_type\")}\n        tips={t(\"editor.action.panel.label.tips.drive.filter_type\")}\n        value={commandArgs.filterType}\n        componentType=\"select\"\n        type=\"button\"\n        forceEqualWidth={true}\n        onChange={(value) => handleOptionsValueChange(\"filterType\", value)}\n        options={FilterTypeOption}\n      />\n      {filterType === ILLA_DRIVE_FILTER_TYPE.BY_ID && (\n        <InputEditor\n          title={t(\"editor.action.panel.label.drive.folder_name\")}\n          tips={t(\"editor.action.panel.label.tips.drive.folder_name\")}\n          lineNumbers\n          mode={CODE_LANG.JAVASCRIPT}\n          value={commandArgs.folderID}\n          onChange={(value) => handleOptionsValueChange(\"fileID\", value)}\n          expectedType={VALIDATION_TYPES.STRING}\n        />\n      )}\n      {filterType === ILLA_DRIVE_FILTER_TYPE.BY_NAME && (\n        <InputEditor\n          title={t(\"editor.action.panel.label.drive.file_name\")}\n          tips={t(\"editor.action.panel.label.tips.drive.file_name\")}\n          placeholder={t(\n            \"editor.action.panel.label.placeholder.drive.file_name\",\n          )}\n          lineNumbers\n          mode={CODE_LANG.JAVASCRIPT}\n          value={commandArgs.search}\n          onChange={(value) => handleOptionsValueChange(\"search\", value)}\n          expectedType={VALIDATION_TYPES.STRING}\n        />\n      )}\n      <FolderSelect value={commandArgs.path} />\n      <InputEditor\n        title={t(\"editor.action.panel.label.drive.limit\")}\n        tips={t(\"editor.action.panel.label.tips.drive.limit\")}\n        placeholder={t(\"editor.action.panel.label.placeholder.drive.limit\")}\n        lineNumbers\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.limit}\n        onChange={(value) => handleOptionsValueChange(\"limit\", value)}\n        expectedType={VALIDATION_TYPES.NUMBER}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.label.drive.page\")}\n        tips={t(\"editor.action.panel.label.tips.drive.page\")}\n        placeholder={t(\"editor.action.panel.label.placeholder.drive.page\")}\n        lineNumbers\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.page}\n        onChange={(value) => handleOptionsValueChange(\"page\", value)}\n        expectedType={VALIDATION_TYPES.NUMBER}\n      />\n      <SortOperate\n        sortByeOptions={sortByeOptions}\n        commandArgs={commandArgs}\n        handleOptionsValueChange={handleOptionsValueChange}\n      />\n    </>\n  )\n}\n\nListFolders.displayName = \"ListFolders\"\n","import { ILLADriveUpdateContent } from \"@illa-public/public-types\"\nimport { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport { ILLADriveActionPartProps } from \"../interface\"\n\nexport const UpdatePart: FC<ILLADriveActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const commandArgs = props.commandArgs as ILLADriveUpdateContent\n  const { handleOptionsValueChange } = props\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.label.drive.file_id\")}\n        tips={t(\"editor.action.panel.label.tips.drive.file_id\")}\n        placeholder={t(\"editor.action.panel.label.placeholder.drive.file_id\")}\n        lineNumbers\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.fileID}\n        onChange={(value) => handleOptionsValueChange(\"fileID\", value)}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n\n      <InputEditor\n        title={t(\"editor.action.panel.label.drive.target_file_name\")}\n        tips={t(\"editor.action.panel.label.tips.drive.target_file_name\")}\n        placeholder={t(\n          \"editor.action.panel.label.placeholder.drive.target_file_name\",\n        )}\n        lineNumbers\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.fileName}\n        onChange={(value) => handleOptionsValueChange(\"fileName\", value)}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n    </>\n  )\n}\n\nUpdatePart.displayName = \"UpdatePart\"\n","import { ILLADriveUploadMultipleContent } from \"@illa-public/public-types\"\nimport { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport { SingleTypeComponent } from \"../../SingleTypeComponent\"\nimport FolderSelect from \"../components/FolderSelect\"\nimport { ILLADriveActionPartProps } from \"../interface\"\n\nexport const UploadMultiplePart: FC<ILLADriveActionPartProps> = (props) => {\n  const { t } = useTranslation()\n\n  const commandArgs = props.commandArgs as ILLADriveUploadMultipleContent\n  const { handleOptionsValueChange } = props\n\n  return (\n    <>\n      <SingleTypeComponent\n        title={t(\"editor.action.panel.label.drive.overwrite\")}\n        tips={t(\"editor.action.panel.label.tips.drive.overwrite\")}\n        value={commandArgs.overwriteDuplicate}\n        componentType=\"switch\"\n        onChange={(value) =>\n          handleOptionsValueChange(\"overwriteDuplicate\", value)\n        }\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.label.drive.file_name_array\")}\n        tips={t(\"editor.action.panel.label.drive.file_name_array\")}\n        placeholder={t(\"editor.action.panel.label.drive.file_name_array\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.fileNameArray}\n        onChange={(value) => handleOptionsValueChange(\"fileNameArray\", value)}\n        expectedType={VALIDATION_TYPES.ARRAY}\n      />\n\n      <InputEditor\n        title={t(\"editor.action.panel.label.drive.file_data_array\")}\n        tips={t(\"editor.action.panel.label.tips.drive.file_data_array\")}\n        placeholder={t(\n          \"editor.action.panel.label.placeholder.drive.file_data_array\",\n        )}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.fileDataArray}\n        onChange={(value) => handleOptionsValueChange(\"fileDataArray\", value)}\n        expectedType={VALIDATION_TYPES.ARRAY}\n      />\n\n      <InputEditor\n        title={t(\"editor.action.panel.label.drive.file_type_array\")}\n        tips={t(\"editor.action.panel.label.tips.drive.file_type_array\")}\n        placeholder={t(\"editor.action.panel.label.placeholder.file_type_array\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.fileTypeArray}\n        onChange={(value) => handleOptionsValueChange(\"fileTypeArray\", value)}\n        expectedType={VALIDATION_TYPES.ARRAY}\n      />\n      <FolderSelect value={commandArgs.path} />\n    </>\n  )\n}\n\nUploadMultiplePart.displayName = \"UploadMultiplePart\"\n","import {\n  ILLADriveUploadOneContent,\n  ILLA_DRIVE_UPLOAD_FILE_TYPE,\n} from \"@illa-public/public-types\"\nimport { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport { SingleTypeComponent } from \"../../SingleTypeComponent\"\nimport FolderSelect from \"../components/FolderSelect\"\nimport { ILLADriveActionPartProps } from \"../interface\"\n\nexport const UploadPart: FC<ILLADriveActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const commandArgs = props.commandArgs as ILLADriveUploadOneContent\n  const { handleOptionsValueChange } = props\n\n  const FileTypeOptions = [\n    {\n      label: t(\"editor.inspect.setter_option.file_download.auto\"),\n      value: ILLA_DRIVE_UPLOAD_FILE_TYPE.AUTO,\n    },\n    {\n      label: t(\"editor.inspect.setter_option.file_download.plain_text\"),\n      value: ILLA_DRIVE_UPLOAD_FILE_TYPE.TXT,\n    },\n    {\n      label: t(\"editor.inspect.setter_option.file_download.jpeg\"),\n      value: ILLA_DRIVE_UPLOAD_FILE_TYPE.JPEG,\n    },\n    {\n      label: t(\"editor.inspect.setter_option.file_download.png\"),\n      value: ILLA_DRIVE_UPLOAD_FILE_TYPE.PNG,\n    },\n    {\n      label: t(\"editor.inspect.setter_option.file_download.svg\"),\n      value: ILLA_DRIVE_UPLOAD_FILE_TYPE.SVG,\n    },\n    {\n      label: t(\"editor.inspect.setter_option.file_download.json\"),\n      value: ILLA_DRIVE_UPLOAD_FILE_TYPE.JSON,\n    },\n    {\n      label: t(\"editor.inspect.setter_option.file_download.csv\"),\n      value: ILLA_DRIVE_UPLOAD_FILE_TYPE.CSV,\n    },\n    {\n      label: t(\"editor.inspect.setter_option.file_download.tsv\"),\n      value: ILLA_DRIVE_UPLOAD_FILE_TYPE.TSV,\n    },\n    {\n      label: t(\"editor.inspect.setter_option.file_download.excel\"),\n      value: ILLA_DRIVE_UPLOAD_FILE_TYPE.XLSX,\n    },\n  ]\n\n  return (\n    <>\n      <SingleTypeComponent\n        title={t(\"editor.action.panel.label.drive.overwrite\")}\n        tips={t(\"editor.action.panel.label.tips.drive.overwrite\")}\n        value={commandArgs.overwriteDuplicate}\n        componentType=\"switch\"\n        onChange={(value) =>\n          handleOptionsValueChange(\"overwriteDuplicate\", value)\n        }\n      />\n      <InputEditor\n        title={t(\"editor.inspect.setter_label.file_download.file_name\")}\n        tips={t(\"editor.inspect.setter_tips.file_download.file_name\")}\n        placeholder={t(\n          \"editor.inspect.setter.placeholder.file_download.file_name\",\n        )}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.fileName}\n        onChange={(value) => handleOptionsValueChange(\"fileName\", value)}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n      <InputEditor\n        title={t(\"editor.inspect.setter_label.drive_builder.fileData\")}\n        tips={t(\"editor.inspect.setter_tips.drive_builder.fileData\")}\n        placeholder={t(\n          \"editor.inspect.setter.placeholder.drive_builder.fileData\",\n        )}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.fileData}\n        onChange={(value) => handleOptionsValueChange(\"fileData\", value)}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n      <SingleTypeComponent\n        title={t(\"editor.inspect.setter_label.file_download.file_type\")}\n        tips={t(\"editor.inspect.setter_tips.file_download.file_type\")}\n        value={commandArgs.fileType}\n        onChange={(value) => handleOptionsValueChange(\"fileType\", value)}\n        componentType=\"select\"\n        options={FileTypeOptions}\n      />\n      <FolderSelect value={commandArgs.path} />\n    </>\n  )\n}\n\nUploadPart.displayName = \"UploadPart\"\n","import {\n  ILLADriveAction,\n  ILLADriveActionTypeContent,\n  ILLA_DRIVE_ACTION_REQUEST_TYPE,\n} from \"@illa-public/public-types\"\nimport { DeleteMultiplePart } from \"./DeleteMultiplePart\"\nimport { DeleteOnePart } from \"./DeleteOnePart\"\nimport { DownloadMultiplePart } from \"./DownloadMultiplePart\"\nimport { DownloadOnePart } from \"./DownloadOnePart\"\nimport { ListAllPart } from \"./ListAllPart\"\nimport { ListFolders } from \"./ListFolders\"\nimport { UpdatePart } from \"./UpdatePart\"\nimport { UploadMultiplePart } from \"./UploadMultiplePart\"\nimport { UploadPart } from \"./UploadPart\"\n\nexport const getInputBody = (\n  content: ILLADriveAction<ILLADriveActionTypeContent>,\n  handleOptionsValueChange: (name: string, value: string | boolean) => void,\n) => {\n  switch (content.operation) {\n    case ILLA_DRIVE_ACTION_REQUEST_TYPE.LIST:\n      return (\n        <ListAllPart\n          handleOptionsValueChange={handleOptionsValueChange}\n          commandArgs={content.commandArgs}\n        />\n      )\n    case ILLA_DRIVE_ACTION_REQUEST_TYPE.LIST_FOLDERS:\n      return (\n        <ListFolders\n          handleOptionsValueChange={handleOptionsValueChange}\n          commandArgs={content.commandArgs}\n        />\n      )\n    case ILLA_DRIVE_ACTION_REQUEST_TYPE.DOWNLOAD_ONE:\n      return (\n        <DownloadOnePart\n          handleOptionsValueChange={handleOptionsValueChange}\n          commandArgs={content.commandArgs}\n        />\n      )\n    case ILLA_DRIVE_ACTION_REQUEST_TYPE.DOWNLOAD_MULTIPLE:\n      return (\n        <DownloadMultiplePart\n          commandArgs={content.commandArgs}\n          handleOptionsValueChange={handleOptionsValueChange}\n        />\n      )\n    case ILLA_DRIVE_ACTION_REQUEST_TYPE.DELETE_ONE:\n      return (\n        <DeleteOnePart\n          handleOptionsValueChange={handleOptionsValueChange}\n          commandArgs={content.commandArgs}\n        />\n      )\n    case ILLA_DRIVE_ACTION_REQUEST_TYPE.DELETE_MULTIPLE:\n      return (\n        <DeleteMultiplePart\n          commandArgs={content.commandArgs}\n          handleOptionsValueChange={handleOptionsValueChange}\n        />\n      )\n    case ILLA_DRIVE_ACTION_REQUEST_TYPE.UPLOAD:\n      return (\n        <UploadPart\n          handleOptionsValueChange={handleOptionsValueChange}\n          commandArgs={content.commandArgs}\n        />\n      )\n    case ILLA_DRIVE_ACTION_REQUEST_TYPE.UPLOAD_MULTIPLE:\n      return (\n        <UploadMultiplePart\n          commandArgs={content.commandArgs}\n          handleOptionsValueChange={handleOptionsValueChange}\n        />\n      )\n    case ILLA_DRIVE_ACTION_REQUEST_TYPE.UPDATE:\n      return (\n        <UpdatePart\n          handleOptionsValueChange={handleOptionsValueChange}\n          commandArgs={content.commandArgs}\n        />\n      )\n    default:\n      return <></>\n  }\n}\n","import {\n  ILLADriveDeleteMultipleContentInitial,\n  ILLADriveDeleteOneContentInitial,\n  ILLADriveDownloadMultipleContentInitial,\n  ILLADriveDownloadOneContentInitial,\n  ILLADriveListAllContentInitial,\n  ILLADriveListFoldersContentInitial,\n  ILLADriveUpdateContentInitial,\n  ILLADriveUploadMultipleContentInitial,\n  ILLADriveUploadOneContentInitial,\n} from \"@illa-public/public-configs\"\nimport {\n  ActionItem,\n  ILLADriveAction,\n  ILLADriveActionTypeContent,\n  ILLA_DRIVE_ACTION_REQUEST_TYPE,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport FolderOperateModal from \"@/components/FolderOperateModal\"\nimport { SingleTypeComponent } from \"@/page/App/components/Actions/ActionPanel/SingleTypeComponent\"\nimport { TransformerComponent } from \"@/page/App/components/Actions/ActionPanel/TransformerComponent\"\nimport {\n  getCachedAction,\n  getSelectedAction,\n} from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { PathSelectProvider } from \"./provider\"\nimport { actionItemContainer } from \"./style\"\nimport { getInputBody } from \"./utils\"\n\nconst ILLADrivePanel: FC = () => {\n  const { t } = useTranslation()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    ILLADriveAction<ILLADriveActionTypeContent>\n  >\n  const selectedAction = useSelector(getSelectedAction)!\n  const dispatch = useDispatch()\n  let content =\n    cachedAction.content as ILLADriveAction<ILLADriveActionTypeContent>\n\n  const handleOptionsValueChange = useCallback(\n    (name: string, value: string | boolean) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            commandArgs: {\n              ...cachedAction.content.commandArgs,\n              [name]: value,\n            },\n          },\n        }),\n      )\n    },\n    [cachedAction, dispatch],\n  )\n\n  const renderInputBody = getInputBody(content, handleOptionsValueChange)\n\n  const handleActionChange = (value: ILLA_DRIVE_ACTION_REQUEST_TYPE) => {\n    let newCommandArgs: ILLADriveActionTypeContent =\n      ILLADriveListAllContentInitial\n    if (\n      cachedAction.resourceID === selectedAction.resourceID &&\n      (selectedAction.content as ILLADriveAction<ILLADriveActionTypeContent>)\n        .operation === value\n    ) {\n      newCommandArgs = (\n        selectedAction.content as ILLADriveAction<ILLADriveActionTypeContent>\n      ).commandArgs\n    } else {\n      switch (value) {\n        case ILLA_DRIVE_ACTION_REQUEST_TYPE.LIST:\n          newCommandArgs = ILLADriveListAllContentInitial\n          break\n        case ILLA_DRIVE_ACTION_REQUEST_TYPE.LIST_FOLDERS:\n          newCommandArgs = ILLADriveListFoldersContentInitial\n          break\n        case ILLA_DRIVE_ACTION_REQUEST_TYPE.DOWNLOAD_ONE:\n          newCommandArgs = ILLADriveDownloadOneContentInitial\n          break\n        case ILLA_DRIVE_ACTION_REQUEST_TYPE.DOWNLOAD_MULTIPLE:\n          newCommandArgs = ILLADriveDownloadMultipleContentInitial\n          break\n        case ILLA_DRIVE_ACTION_REQUEST_TYPE.DELETE_ONE:\n          newCommandArgs = ILLADriveDeleteOneContentInitial\n          break\n        case ILLA_DRIVE_ACTION_REQUEST_TYPE.DELETE_MULTIPLE:\n          newCommandArgs = ILLADriveDeleteMultipleContentInitial\n          break\n        case ILLA_DRIVE_ACTION_REQUEST_TYPE.UPLOAD:\n          newCommandArgs = ILLADriveUploadOneContentInitial\n          break\n        case ILLA_DRIVE_ACTION_REQUEST_TYPE.UPLOAD_MULTIPLE:\n          newCommandArgs = ILLADriveUploadMultipleContentInitial\n        case ILLA_DRIVE_ACTION_REQUEST_TYPE.UPDATE:\n          newCommandArgs = ILLADriveUpdateContentInitial\n          break\n      }\n    }\n    dispatch(\n      configActions.updateCachedAction({\n        ...cachedAction,\n        content: {\n          ...cachedAction.content,\n          operation: value,\n          commandArgs: newCommandArgs,\n        },\n      }),\n    )\n  }\n\n  const ILLADriveActionList = [\n    {\n      label: t(\"editor.action.panel.label.option.drive.method.list\"),\n      value: ILLA_DRIVE_ACTION_REQUEST_TYPE.LIST,\n    },\n    // not support yet\n    // {\n    //   label: t(\"editor.action.panel.label.option.drive.method.list_folders\"),\n    //   value: ILLA_DRIVE_ACTION_REQUEST_TYPE.LIST_FOLDERS,\n    // }\n    {\n      label: t(\"editor.action.panel.label.option.drive.method.download\"),\n      value: ILLA_DRIVE_ACTION_REQUEST_TYPE.DOWNLOAD_ONE,\n    },\n    {\n      label: t(\n        \"editor.action.panel.label.option.drive.method.download_multi_file\",\n      ),\n      value: ILLA_DRIVE_ACTION_REQUEST_TYPE.DOWNLOAD_MULTIPLE,\n    },\n    {\n      label: t(\"editor.action.panel.label.option.drive.method.delete\"),\n      value: ILLA_DRIVE_ACTION_REQUEST_TYPE.DELETE_ONE,\n    },\n    {\n      label: t(\n        \"editor.action.panel.label.option.drive.method.delete_multi_file\",\n      ),\n      value: ILLA_DRIVE_ACTION_REQUEST_TYPE.DELETE_MULTIPLE,\n    },\n    {\n      label: t(\"editor.action.panel.label.option.drive.method.upload_file\"),\n      value: ILLA_DRIVE_ACTION_REQUEST_TYPE.UPLOAD,\n    },\n    {\n      label: t(\n        \"editor.action.panel.label.option.drive.method.upload_multi_file\",\n      ),\n      value: ILLA_DRIVE_ACTION_REQUEST_TYPE.UPLOAD_MULTIPLE,\n    },\n    {\n      label: t(\"editor.action.panel.label.option.drive.method.update\"),\n      value: ILLA_DRIVE_ACTION_REQUEST_TYPE.UPDATE,\n    },\n  ]\n\n  return (\n    <PathSelectProvider handleOptionsValueChange={handleOptionsValueChange}>\n      <div css={actionItemContainer}>\n        <SingleTypeComponent\n          title={t(\"editor.action.panel.label.drive.method\")}\n          tips={t(\"editor.action.panel.label.tips.drive.method\")}\n          componentType=\"select\"\n          value={content.operation}\n          showSearch\n          onChange={handleActionChange}\n          options={ILLADriveActionList}\n        />\n        {renderInputBody}\n        <TransformerComponent />\n      </div>\n      <FolderOperateModal />\n    </PathSelectProvider>\n  )\n}\n\nILLADrivePanel.displayName = \"ILLADrivePanel\"\nexport default ILLADrivePanel\n"],"names":["PathOperate","handleOptionsValueChange","useContext","PathSelectContext","currentFolderPath","setFolderOperateVisible","FolderOperateModalContext","t","useTranslation","jsx","Button","createContext","PathSelectProvider","children","setCurrentFolderPath","useState","ROOT_PATH","folderOperateVisible","createFolderVisible","setCreateFolderVisible","actionItemContainer","css","DeleteMultiplePart","props","commandArgs","Fragment","InputEditor","CODE_LANG","value","VALIDATION_TYPES","DeleteOnePart","DownloadMultiplePart","DownloadOnePart","folderSelectStyle","fileSelectContainerStyle","getColor","folderIconStyle","headerStyle","actionItemTip","inputContainerStyle","actionItemCodeEditorStyle","nameStyle","FolderSelect","jsxs","Folder","CodeEditor","containerStyle","getFxIconStyle","selected","BaseFxSelect","attrName","isFx","options","label","handleOnClick","v","SingleTypeComponent","FxIcon","SortOperate","sortByeOptions","sortTypeOptions","SORTED_TYPE","ListAllPart","filterType","expirationType","FileUrlExpiredTypeOption","EXPIRATION_TYPE","FilterTypeOption","ILLA_DRIVE_FILTER_TYPE","ListFolders","UpdatePart","UploadMultiplePart","UploadPart","FileTypeOptions","ILLA_DRIVE_UPLOAD_FILE_TYPE","getInputBody","content","ILLA_DRIVE_ACTION_REQUEST_TYPE","ILLADrivePanel","cachedAction","useSelector","getCachedAction","selectedAction","getSelectedAction","dispatch","useDispatch","useCallback","name","configActions","renderInputBody","handleActionChange","newCommandArgs","ILLADriveListAllContentInitial","ILLADriveListFoldersContentInitial","ILLADriveDownloadOneContentInitial","ILLADriveDownloadMultipleContentInitial","ILLADriveDeleteOneContentInitial","ILLADriveDeleteMultipleContentInitial","ILLADriveUploadOneContentInitial","ILLADriveUploadMultipleContentInitial","ILLADriveUpdateContentInitial","ILLADriveActionList","TransformerComponent","FolderOperateModal"],"mappings":"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"}