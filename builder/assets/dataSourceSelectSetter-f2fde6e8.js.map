{"version":3,"file":"dataSourceSelectSetter-f2fde6e8.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/SelectSetter/dataSourceSelectSetter.tsx"],"sourcesContent":["import { get } from \"lodash-es\"\nimport { FC, useCallback, useMemo } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { ChartDataSourceSetterProps } from \"@/page/App/components/InspectPanel/PanelSetters/ChartSetter/interface\"\nimport BaseDynamicSelect from \"@/page/App/components/InspectPanel/PanelSetters/SelectSetter/baseDynamicSelect\"\nimport { publicPaddingStyle } from \"@/page/App/components/InspectPanel/style\"\nimport { getActionList } from \"@/redux/currentApp/action/actionSelector\"\nimport { searchDSLByDisplayName } from \"@/redux/currentApp/components/componentsSelector\"\nimport { getExecutionError } from \"@/redux/currentApp/executionTree/executionSelector\"\nimport { RootState } from \"@/store\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nconst DataSourceSetter: FC<ChartDataSourceSetterProps> = (props) => {\n  const { handleUpdateDsl, widgetDisplayName, labelName, labelDesc } = props\n  const actions = useSelector(getActionList)\n  const executionErrors = useSelector(getExecutionError)\n  const isError = useMemo(() => {\n    return (\n      (executionErrors[`${widgetDisplayName}.dataSource`] ?? [])?.length > 0\n    )\n  }, [executionErrors, widgetDisplayName])\n\n  const targetComponentProps = useSelector<RootState, Record<string, any>>(\n    (rootState) => {\n      return searchDSLByDisplayName(widgetDisplayName, rootState)?.props || {}\n    },\n  )\n\n  const isDynamic = useMemo(() => {\n    const dataSourceMode = get(targetComponentProps, \"dataSourceMode\", \"select\")\n    return dataSourceMode === \"dynamic\"\n  }, [targetComponentProps])\n\n  const finalValue = useMemo(() => {\n    if (isDynamic) {\n      return get(targetComponentProps, \"dataSourceJS\")\n    } else {\n      return get(targetComponentProps, \"dataSource\")\n    }\n  }, [isDynamic, targetComponentProps])\n\n  const selectedOptions = useMemo(() => {\n    return actions.map((action) => ({\n      label: action.displayName,\n      value: `{{${action.displayName}.data}}`,\n    }))\n  }, [actions])\n\n  const handleClickFxButton = useCallback(() => {\n    const isInOption = selectedOptions.some(\n      (option) => option.value === finalValue,\n    )\n    if (isDynamic) {\n      handleUpdateDsl(\"dataSourceMode\", \"select\")\n      if (!isInOption) {\n        handleUpdateDsl(\"dataSource\", \"\")\n      } else {\n        handleUpdateDsl(\"dataSource\", finalValue)\n      }\n    } else {\n      handleUpdateDsl(\"dataSourceMode\", \"dynamic\")\n      if (isInOption) {\n        handleUpdateDsl(\"dataSourceJS\", finalValue)\n      }\n    }\n  }, [handleUpdateDsl, isDynamic, selectedOptions, finalValue])\n\n  const handleChangeInput = useCallback(\n    (value: string) => {\n      handleUpdateDsl(\"dataSourceJS\", value)\n    },\n    [handleUpdateDsl],\n  )\n\n  const handleChangeSelect = useCallback(\n    (value: any) => {\n      handleUpdateDsl(\"dataSource\", value)\n    },\n    [handleUpdateDsl],\n  )\n\n  return (\n    <div css={publicPaddingStyle}>\n      <BaseDynamicSelect\n        {...props}\n        isDynamic={isDynamic}\n        onClickFxButton={handleClickFxButton}\n        selectPlaceholder=\"Select a query or transformer\"\n        inputPlaceholder=\"{{}}\"\n        onChangeInput={handleChangeInput}\n        path={`${widgetDisplayName}.dataSourceJS`}\n        options={selectedOptions}\n        expectedType={VALIDATION_TYPES.ARRAY}\n        onChangeSelect={handleChangeSelect}\n        value={finalValue}\n        labelName={labelName}\n        labelDesc={labelDesc}\n        isError={isError}\n      />\n    </div>\n  )\n}\n\nDataSourceSetter.displayName = \"DataSourceSetter\"\nexport default DataSourceSetter\n"],"names":["DataSourceSetter","props","handleUpdateDsl","widgetDisplayName","labelName","labelDesc","actions","useSelector","getActionList","executionErrors","getExecutionError","isError","useMemo","_a","targetComponentProps","rootState","searchDSLByDisplayName","isDynamic","get","finalValue","selectedOptions","action","handleClickFxButton","useCallback","isInOption","option","handleChangeInput","value","handleChangeSelect","jsx","publicPaddingStyle","BaseDynamicSelect","VALIDATION_TYPES"],"mappings":"snBAYM,MAAAA,EAAoDC,GAAU,CAClE,KAAM,CAAE,gBAAAC,EAAiB,kBAAAC,EAAmB,UAAAC,EAAW,UAAAC,GAAcJ,EAC/DK,EAAUC,EAAYC,CAAa,EACnCC,EAAkBF,EAAYG,CAAiB,EAC/CC,EAAUC,EAAAA,QAAQ,IAAM,OAC5B,QACGC,EAAAJ,EAAgB,GAAGN,CAAiB,aAAa,GAAK,CAAA,IAAtD,YAAAU,EAA2D,QAAS,CAAA,EAEtE,CAACJ,EAAiBN,CAAiB,CAAC,EAEjCW,EAAuBP,EAC1BQ,GAAc,OACb,QAAOF,EAAAG,EAAuBb,EAAmBY,CAAS,IAAnD,YAAAF,EAAsD,QAAS,CAAA,CACxE,CAAA,EAGII,EAAYL,EAAAA,QAAQ,IACDM,EAAIJ,EAAsB,iBAAkB,QAAQ,IACjD,UACzB,CAACA,CAAoB,CAAC,EAEnBK,EAAaP,EAAAA,QAAQ,IACrBK,EACKC,EAAIJ,EAAsB,cAAc,EAExCI,EAAIJ,EAAsB,YAAY,EAE9C,CAACG,EAAWH,CAAoB,CAAC,EAE9BM,EAAkBR,EAAAA,QAAQ,IACvBN,EAAQ,IAAKe,IAAY,CAC9B,MAAOA,EAAO,YACd,MAAO,KAAKA,EAAO,WAAW,SAC9B,EAAA,EACD,CAACf,CAAO,CAAC,EAENgB,EAAsBC,EAAAA,YAAY,IAAM,CAC5C,MAAMC,EAAaJ,EAAgB,KAChCK,GAAWA,EAAO,QAAUN,CAAA,EAE3BF,GACFf,EAAgB,iBAAkB,QAAQ,EACrCsB,EAGHtB,EAAgB,aAAciB,CAAU,EAFxCjB,EAAgB,aAAc,EAAE,IAKlCA,EAAgB,iBAAkB,SAAS,EACvCsB,GACFtB,EAAgB,eAAgBiB,CAAU,IAG7C,CAACjB,EAAiBe,EAAWG,EAAiBD,CAAU,CAAC,EAEtDO,EAAoBH,EAAA,YACvBI,GAAkB,CACjBzB,EAAgB,eAAgByB,CAAK,CACvC,EACA,CAACzB,CAAe,CAAA,EAGZ0B,EAAqBL,EAAA,YACxBI,GAAe,CACdzB,EAAgB,aAAcyB,CAAK,CACrC,EACA,CAACzB,CAAe,CAAA,EAIhB,OAAA2B,EAAC,MAAI,CAAA,IAAKC,EACR,SAAAD,EAACE,EAAA,CACE,GAAG9B,EACJ,UAAAgB,EACA,gBAAiBK,EACjB,kBAAkB,gCAClB,iBAAiB,OACjB,cAAeI,EACf,KAAM,GAAGvB,CAAiB,gBAC1B,QAASiB,EACT,aAAcY,EAAiB,MAC/B,eAAgBJ,EAChB,MAAOT,EACP,UAAAf,EACA,UAAAC,EACA,QAAAM,CAAA,CAEJ,CAAA,CAAA,CAEJ,EAEAX,EAAiB,YAAc"}