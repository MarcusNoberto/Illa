{"version":3,"file":"chartColorSelectSetter-5ebfb4fc.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/ChartSetter/chartColorSelectSetter.tsx"],"sourcesContent":["import { get } from \"lodash-es\"\nimport { FC, useMemo } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport {\n  CHART_COLOR_TYPE_CONFIG_KEYS,\n  CHART__BASE_COLOR_TYPE_CONFIG,\n  ColorArea,\n} from \"@/page/App/components/InspectPanel/PanelSetters/ChartSetter/chartDatasetsSetter/listItem\"\nimport { chartColorLabelStyle } from \"@/page/App/components/InspectPanel/PanelSetters/ChartSetter/style\"\nimport { getExecutionResult } from \"@/redux/currentApp/executionTree/executionSelector\"\nimport { RootState } from \"@/store\"\nimport BaseSelectSetter from \"../SelectSetter/baseSelect\"\nimport { ChartColorSelectSetterProps } from \"./interface\"\n\ninterface CHartColorLabelProps {\n  color: string\n}\n\nexport const ChartColorLabel: FC<CHartColorLabelProps> = (props) => {\n  const { color } = props\n  return (\n    <div css={chartColorLabelStyle}>\n      <ColorArea color={color} />\n      {color}\n    </div>\n  )\n}\n\nconst ChartColorSelectSetter: FC<ChartColorSelectSetterProps> = (props) => {\n  const { widgetDisplayName } = props\n\n  const targetComponentProps = useSelector<RootState, Record<string, any>>(\n    (rootState) => {\n      const executionTree = getExecutionResult(rootState)\n      return get(executionTree, widgetDisplayName, {})\n    },\n  )\n\n  const chartType = useMemo(() => {\n    return get(targetComponentProps, \"chartType\", \"bar\")\n  }, [targetComponentProps])\n\n  const isCanGroupBy = useMemo(() => {\n    return !!get(targetComponentProps, \"groupBy\", \"\")\n  }, [targetComponentProps])\n\n  const options = useMemo(() => {\n    if (isCanGroupBy || chartType === \"pie\") {\n      return CHART_COLOR_TYPE_CONFIG_KEYS.map((key) => {\n        return {\n          label: <ChartColorLabel color={key} />,\n          value: key,\n        }\n      })\n    }\n    return CHART__BASE_COLOR_TYPE_CONFIG.map((key) => {\n      return {\n        label: <ChartColorLabel color={key} />,\n        value: key,\n      }\n    })\n  }, [chartType, isCanGroupBy])\n\n  return <BaseSelectSetter {...props} options={options} />\n}\n\nChartColorSelectSetter.displayName = \"BaseSelect\"\nexport default ChartColorSelectSetter\n"],"names":["ChartColorLabel","props","color","jsxs","chartColorLabelStyle","jsx","ColorArea","ChartColorSelectSetter","widgetDisplayName","targetComponentProps","useSelector","rootState","executionTree","getExecutionResult","get","chartType","useMemo","isCanGroupBy","options","CHART_COLOR_TYPE_CONFIG_KEYS","key","CHART__BASE_COLOR_TYPE_CONFIG","BaseSelectSetter"],"mappings":"weAkBa,MAAAA,EAA6CC,GAAU,CAC5D,KAAA,CAAE,MAAAC,CAAU,EAAAD,EAEhB,OAAAE,EAAC,MAAI,CAAA,IAAKC,EACR,SAAA,CAAAC,EAACC,GAAU,MAAAJ,EAAc,EACxBA,CACH,CAAA,CAAA,CAEJ,EAEMK,EAA2DN,GAAU,CACnE,KAAA,CAAE,kBAAAO,CAAsB,EAAAP,EAExBQ,EAAuBC,EAC1BC,GAAc,CACP,MAAAC,EAAgBC,EAAmBF,CAAS,EAClD,OAAOG,EAAIF,EAAeJ,EAAmB,CAAE,CAAA,CACjD,CAAA,EAGIO,EAAYC,EAAAA,QAAQ,IACjBF,EAAIL,EAAsB,YAAa,KAAK,EAClD,CAACA,CAAoB,CAAC,EAEnBQ,EAAeD,EAAAA,QAAQ,IACpB,CAAC,CAACF,EAAIL,EAAsB,UAAW,EAAE,EAC/C,CAACA,CAAoB,CAAC,EAEnBS,EAAUF,EAAAA,QAAQ,IAClBC,GAAgBF,IAAc,MACzBI,EAA6B,IAAKC,IAChC,CACL,MAAOf,EAACL,EAAgB,CAAA,MAAOoB,CAAK,CAAA,EACpC,MAAOA,CAAA,EAEV,EAEIC,EAA8B,IAAKD,IACjC,CACL,MAAOf,EAACL,EAAgB,CAAA,MAAOoB,CAAK,CAAA,EACpC,MAAOA,CAAA,EAEV,EACA,CAACL,EAAWE,CAAY,CAAC,EAE5B,OAAQZ,EAAAiB,EAAA,CAAkB,GAAGrB,EAAO,QAAAiB,CAAkB,CAAA,CACxD,EAEAX,EAAuB,YAAc"}