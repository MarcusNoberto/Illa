{"version":3,"file":"index-eb6ac370.js","sources":["../../src/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/BasicSheetConfig/style.ts","../../src/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/BasicSheetConfig/index.tsx","../../src/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/AppendSpreadsheetSubPanel/index.tsx","../../src/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/BulkUpdateSpreadsheetSubPanel/index.tsx","../../src/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/CopySpreadSheetSubPanel/style.ts","../../src/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/CopySpreadSheetSubPanel/index.tsx","../../src/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/CreateSpreadsheetSubPanel/index.tsx","../../src/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/DeleteSpreadsheetSubPanel/index.tsx","../../src/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/GetSpreadsheetSubPanel/index.tsx","../../src/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/style.ts","../../src/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/values.ts","../../src/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/ReadSpreadsheetSubPanel/style.ts","../../src/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/ReadSpreadsheetSubPanel/index.tsx","../../src/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/UpdateSpreadsheetSubPanel/index.tsx","../../src/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/index.tsx"],"sourcesContent":["import { css } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/react\"\n\nexport const sheetConfigContainerStyle = css`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: flex-start;\n`\n\nexport const spreadsheetContainerStyle = css`\n  display: flex;\n  align-items: center;\n  flex: 1;\n`\n\nexport const getFxIconStyle = (fullwidth: boolean, selected?: boolean) => {\n  const hasRightMargin = fullwidth\n    ? css`\n        margin-right: 16px;\n      `\n    : css``\n  return css`\n    width: 16px;\n    height: 16px;\n    color: ${selected\n      ? getColor(\"techPurple\", \"03\")\n      : getColor(\"grayBlue\", \"04\")};\n    cursor: pointer;\n    z-index: 1;\n    ${hasRightMargin};\n    :hover {\n      cursor: pointer;\n      color: ${getColor(\"techPurple\", \"03\")};\n    }\n  `\n}\n","import { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { FxIcon } from \"@illa-design/react\"\nimport {\n  getFxIconStyle,\n  sheetConfigContainerStyle,\n  spreadsheetContainerStyle,\n} from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/BasicSheetConfig/style\"\nimport { BasicSheetConfigProps } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/interface\"\nimport { SingleTypeComponent } from \"@/page/App/components/Actions/ActionPanel/SingleTypeComponent\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const BasicSheetConfig: FC<BasicSheetConfigProps> = (props) => {\n  const {\n    spreadsheet,\n    sheetName,\n    onChange,\n    spreadsheetsOption,\n    isHiddenSheetName = false,\n    fx,\n  } = props\n  const { t } = useTranslation()\n\n  const handleOnClick = () => {\n    onChange(\"fx\")(!fx)\n  }\n\n  return (\n    <div css={sheetConfigContainerStyle}>\n      <div css={spreadsheetContainerStyle}>\n        {fx ? (\n          <InputEditor\n            title={t(\"editor.action.form.label.gs.spreadsheet\")}\n            value={spreadsheet}\n            onChange={onChange(\"spreadsheet\")}\n            expectedType={VALIDATION_TYPES.STRING}\n          />\n        ) : (\n          <SingleTypeComponent\n            title={t(\"editor.action.form.label.gs.spreadsheet\")}\n            componentType=\"select\"\n            value={spreadsheet}\n            onChange={onChange(\"spreadsheet\")}\n            options={spreadsheetsOption}\n          />\n        )}\n        <FxIcon\n          onClick={handleOnClick}\n          css={getFxIconStyle(isHiddenSheetName, fx)}\n        />\n      </div>\n      {!isHiddenSheetName && (\n        <div css={spreadsheetContainerStyle}>\n          <InputEditor\n            title={t(\"editor.action.form.label.gs.sheet_name\")}\n            value={sheetName ?? \"\"}\n            onChange={onChange(\"sheetName\")}\n            tips={t(\"editor.action.form.tips.gs.leave_blank_to_selec\")}\n            expectedType={VALIDATION_TYPES.STRING}\n          />\n        </div>\n      )}\n    </div>\n  )\n}\nBasicSheetConfig.displayName = \"BasicSheetConfig\"\n","import { GoogleSheetsActionAppendOpts } from \"@illa-public/public-types\"\nimport { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { BasicSheetConfig } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/BasicSheetConfig\"\nimport { GoogleSheetsActionSubPanelProps } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const AppendSpreadsheetSubPanel: FC<GoogleSheetsActionSubPanelProps> = (\n  props,\n) => {\n  const { onChange, spreadsheetsOption } = props\n  const { t } = useTranslation()\n  const opts = props.opts as GoogleSheetsActionAppendOpts\n\n  return (\n    <>\n      <BasicSheetConfig\n        sheetName={opts.sheetName}\n        spreadsheet={opts.spreadsheet}\n        onChange={onChange}\n        spreadsheetsOption={spreadsheetsOption}\n        fx={opts.fx}\n      />\n      <InputEditor\n        value={opts.values}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        onChange={onChange(\"values\")}\n        title={t(\"editor.action.form.label.gs.values_to_append\")}\n        placeholder={t(\"editor.action.form.tips.gs.values_to_append\")}\n        expectedType={VALIDATION_TYPES.ARRAY}\n      />\n    </>\n  )\n}\nAppendSpreadsheetSubPanel.displayName = \"AppendSpreadsheetSubPanel\"\n","import { GoogleSheetsActionBulkOpts } from \"@illa-public/public-types\"\nimport { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { BasicSheetConfig } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/BasicSheetConfig\"\nimport { GoogleSheetsActionSubPanelProps } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const BulkUpdateSpreadsheetSubPanel: FC<\n  GoogleSheetsActionSubPanelProps\n> = (props) => {\n  const { t } = useTranslation()\n  const { onChange, spreadsheetsOption } = props\n  const opts = props.opts as GoogleSheetsActionBulkOpts\n\n  return (\n    <>\n      <BasicSheetConfig\n        sheetName={opts.sheetName}\n        spreadsheet={opts.spreadsheet}\n        onChange={onChange}\n        spreadsheetsOption={spreadsheetsOption}\n        fx={opts.fx}\n      />\n      <InputEditor\n        value={opts.primaryKey}\n        onChange={onChange(\"primaryKey\")}\n        title={t(\"editor.action.form.label.gs.primary_key_column\")}\n        placeholder={t(\"editor.action.form.placeholder.gs.primary_key_column\")}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n      <InputEditor\n        value={opts.rowsArray}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        onChange={onChange(\"rowsArray\")}\n        title={t(\"editor.action.form.label.gs.array_of_rows_to_upd\")}\n        placeholder={t(\n          \"editor.action.form.placeholder.gs.array_of_rows_to_upd\",\n        )}\n        expectedType={VALIDATION_TYPES.ARRAY}\n      />\n    </>\n  )\n}\nBulkUpdateSpreadsheetSubPanel.displayName = \"BulkUpdateSpreadsheetSubPanel\"\n","import { SerializedStyles, css } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/react\"\n\nexport const sheetConfigContainerStyle = css`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: flex-start;\n`\n\nexport const spreadsheetContainerStyle = css`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nexport function applyFxIconStyle(selected?: boolean): SerializedStyles {\n  return css`\n    width: 16px;\n    height: 16px;\n    color: ${selected\n      ? getColor(\"techPurple\", \"03\")\n      : getColor(\"grayBlue\", \"04\")};\n    cursor: pointer;\n    z-index: 1;\n    :hover {\n      cursor: pointer;\n      color: ${getColor(\"techPurple\", \"03\")};\n    }\n  `\n}\n","import { GoogleSheetsActionCopyOpts } from \"@illa-public/public-types\"\nimport { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { FxIcon } from \"@illa-design/react\"\nimport { BasicSheetConfig } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/BasicSheetConfig\"\nimport {\n  applyFxIconStyle,\n  sheetConfigContainerStyle,\n  spreadsheetContainerStyle,\n} from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/CopySpreadSheetSubPanel/style\"\nimport { GoogleSheetsActionSubPanelProps } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/interface\"\nimport { SingleTypeComponent } from \"@/page/App/components/Actions/ActionPanel/SingleTypeComponent\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const CopySpreadsheetSubPanel: FC<GoogleSheetsActionSubPanelProps> = (\n  props,\n) => {\n  const { t } = useTranslation()\n  const { onChange, spreadsheetsOption } = props\n  const opts = props.opts as GoogleSheetsActionCopyOpts\n  const {\n    toSpreadsheet,\n    toSheet,\n    sheetName,\n    spreadsheet,\n    fx,\n    toFx = false,\n  } = opts\n\n  const handleOnClick = () => {\n    onChange(\"toFx\")(!toFx)\n  }\n\n  return (\n    <>\n      <BasicSheetConfig\n        sheetName={sheetName}\n        spreadsheet={spreadsheet}\n        onChange={onChange}\n        spreadsheetsOption={spreadsheetsOption}\n        fx={fx}\n      />\n      <div css={sheetConfigContainerStyle}>\n        <div css={spreadsheetContainerStyle}>\n          {toFx ? (\n            <InputEditor\n              title={t(\"editor.action.form.label.gs.sheet_to_copy_to\")}\n              value={toSpreadsheet}\n              onChange={onChange(\"toSpreadsheet\")}\n              expectedType={VALIDATION_TYPES.STRING}\n            />\n          ) : (\n            <SingleTypeComponent\n              title={t(\"editor.action.form.label.gs.sheet_to_copy_to\")}\n              componentType=\"select\"\n              value={toSpreadsheet}\n              onChange={onChange(\"toSpreadsheet\")}\n              options={spreadsheetsOption}\n            />\n          )}\n          <FxIcon onClick={handleOnClick} css={applyFxIconStyle(toFx)} />\n        </div>\n        <div css={spreadsheetContainerStyle}>\n          <InputEditor\n            title={t(\"editor.action.form.label.gs.sheet_name\")}\n            value={toSheet ?? \"\"}\n            onChange={onChange(\"toSheet\")}\n            tips={t(\"editor.action.form.tips.gs.copy_to_sheet_name\")}\n            expectedType={VALIDATION_TYPES.STRING}\n          />\n        </div>\n      </div>\n    </>\n  )\n}\nCopySpreadsheetSubPanel.displayName = \"CopySpreadsheetSubPanel\"\n","import { GoogleSheetsActionCreateOpts } from \"@illa-public/public-types\"\nimport { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { GoogleSheetsActionSubPanelProps } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\n\nexport const CreateSpreadsheetSubPanel: FC<GoogleSheetsActionSubPanelProps> = (\n  props,\n) => {\n  const { onChange } = props\n  const { t } = useTranslation()\n  const opts = props.opts as GoogleSheetsActionCreateOpts\n\n  return (\n    <InputEditor\n      title={t(\"editor.action.form.label.gs.title_of_spreadsheet\")}\n      value={opts.title}\n      onChange={onChange(\"title\")}\n    />\n  )\n}\nCreateSpreadsheetSubPanel.displayName = \"CreateSpreadsheetSubPanel\"\n","import { GoogleSheetsActionDeleteOpts } from \"@illa-public/public-types\"\nimport { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { BasicSheetConfig } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/BasicSheetConfig\"\nimport { GoogleSheetsActionSubPanelProps } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const DeleteSpreadsheetSubPanel: FC<GoogleSheetsActionSubPanelProps> = (\n  props,\n) => {\n  const { t } = useTranslation()\n  const { onChange, spreadsheetsOption } = props\n  const opts = props.opts as GoogleSheetsActionDeleteOpts\n\n  return (\n    <>\n      <BasicSheetConfig\n        sheetName={opts.sheetName}\n        spreadsheet={opts.spreadsheet}\n        onChange={onChange}\n        spreadsheetsOption={spreadsheetsOption}\n        fx={opts.fx}\n      />\n      <InputEditor\n        value={opts.rowIndex}\n        onChange={onChange(\"rowIndex\")}\n        title={t(\"editor.action.form.label.gs.filters_to_match_row\")}\n        placeholder=\"{{ 2 }}\"\n        expectedType={VALIDATION_TYPES.NUMBER}\n      />\n    </>\n  )\n}\nDeleteSpreadsheetSubPanel.displayName = \"DeleteSpreadsheetSubPanel\"\n","import { GoogleSheetsActionGetOpts } from \"@illa-public/public-types\"\nimport { FC } from \"react\"\nimport { BasicSheetConfig } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/BasicSheetConfig\"\nimport { GoogleSheetsActionSubPanelProps } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/interface\"\n\nexport const GetSpreadsheetSubPanel: FC<GoogleSheetsActionSubPanelProps> = (\n  props,\n) => {\n  const { onChange, spreadsheetsOption } = props\n  const opts = props.opts as GoogleSheetsActionGetOpts\n\n  return (\n    <BasicSheetConfig\n      spreadsheet={opts.spreadsheet}\n      onChange={onChange}\n      isHiddenSheetName={true}\n      spreadsheetsOption={spreadsheetsOption}\n      fx={opts.fx}\n    />\n  )\n}\nGetSpreadsheetSubPanel.displayName = \"GetSpreadsheetSubPanel\"\n","import { css } from \"@emotion/react\"\n\nexport const sheetConfigContainerStyle = css`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: flex-start;\n`\n\nexport const spreadsheetContainerStyle = css`\n  display: flex;\n  position: relative;\n  width: 50%;\n`\n\nexport const updateEditorKeyContainerStyle = css`\n  flex-grow: 2;\n  .cm-editor {\n    height: 32px;\n  }\n`\n\nexport const updateEditorValueContainerStyle = css`\n  flex-grow: 3;\n  .cm-editor {\n    height: 32px;\n  }\n`\n","import { GoogleSheetsActionType } from \"@illa-public/public-types\"\nimport i18n from \"@/i18n/config\"\n\nexport const GoogleSheetsActionTypesOptions: {\n  label: string\n  value: GoogleSheetsActionType\n}[] = [\n  {\n    label: i18n.t(\n      \"editor.action.form.option.gs.action_type.read_data_from_a_spr\",\n    ),\n    value: \"read\",\n  },\n  {\n    label: i18n.t(\n      \"editor.action.form.option.gs.action_type.append_data_to_a_spr\",\n    ),\n    value: \"append\",\n  },\n  {\n    label: i18n.t(\n      \"editor.action.form.option.gs.action_type.update_a_spreadsheet\",\n    ),\n    value: \"update\",\n  },\n  {\n    label: i18n.t(\n      \"editor.action.form.option.gs.action_type.bulk_update_a_spread\",\n    ),\n    value: \"bulkUpdate\",\n  },\n  {\n    label: i18n.t(\n      \"editor.action.form.option.gs.action_type.delete_a_single_row_\",\n    ),\n    value: \"delete\",\n  },\n  {\n    label: i18n.t(\n      \"editor.action.form.option.gs.action_type.create_a_spreadsheet\",\n    ),\n    value: \"create\",\n  },\n  {\n    label: i18n.t(\n      \"editor.action.form.option.gs.action_type.copy_a_single_sheet_\",\n    ),\n    value: \"copy\",\n  },\n  {\n    label: i18n.t(\n      \"editor.action.form.option.gs.action_type.list_available_sprea\",\n    ),\n    value: \"list\",\n  },\n  {\n    label: i18n.t(\n      \"editor.action.form.option.gs.action_type.get_spreadsheet_info\",\n    ),\n    value: \"get\",\n  },\n]\n\nexport const ReadGoogleSheetsActionOptions = [\n  {\n    label: i18n.t(\"editor.action.form.option.gs.data_range.use_a1_notation\"),\n    value: \"a1\",\n  },\n  {\n    label: i18n.t(\n      \"editor.action.form.option.gs.data_range.use_limit_and_offset\",\n    ),\n    value: \"limit\",\n  },\n]\n","import { css } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/react\"\n\nexport const optionLabelContainerStyle = css`\n  min-height: 48px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding: 16px 16px 8px;\n  gap: 128px;\n`\n\nexport const optionLabelStyle = css`\n  height: 22px;\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 22px;\n  color: ${getColor(\"grayBlue\", \"04\")};\n`\n\nexport const radioGroupContainerStyle = css`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  padding: 1px;\n  gap: 2px;\n  height: 24px;\n`\n","import { GoogleSheetsActionReadOpts } from \"@illa-public/public-types\"\nimport { TextLink } from \"@illa-public/text-link\"\nimport { FC } from \"react\"\nimport { Trans, useTranslation } from \"react-i18next\"\nimport { Divider, RadioGroup } from \"@illa-design/react\"\nimport { BasicSheetConfig } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/BasicSheetConfig\"\nimport { GoogleSheetsActionSubPanelProps } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/interface\"\nimport {\n  sheetConfigContainerStyle,\n  spreadsheetContainerStyle,\n} from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/style\"\nimport { ReadGoogleSheetsActionOptions } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/values\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport {\n  optionLabelContainerStyle,\n  optionLabelStyle,\n  radioGroupContainerStyle,\n} from \"./style\"\n\nexport const ReadSpreadsheetSubPanel: FC<GoogleSheetsActionSubPanelProps> = (\n  props,\n) => {\n  const { t } = useTranslation()\n  const { onChange, spreadsheetsOption } = props\n  const opts = props.opts as GoogleSheetsActionReadOpts\n  const { spreadsheet, sheetName, fx } = opts\n\n  return (\n    <>\n      <BasicSheetConfig\n        spreadsheet={spreadsheet}\n        sheetName={sheetName}\n        onChange={onChange}\n        spreadsheetsOption={spreadsheetsOption}\n        fx={fx}\n        isHiddenSheetName={opts.rangeType === \"a1\"}\n      />\n      <Divider direction=\"horizontal\" w=\"unset\" />\n      <div css={optionLabelContainerStyle}>\n        <span css={optionLabelStyle}>\n          {t(\"editor.action.form.label.gs.data_range\")}\n        </span>\n        <div css={radioGroupContainerStyle}>\n          <RadioGroup\n            type=\"button\"\n            value={opts.rangeType}\n            defaultValue={opts.rangeType}\n            options={ReadGoogleSheetsActionOptions}\n            onChange={onChange(\"rangeType\")}\n          />\n        </div>\n      </div>\n      {opts.rangeType === \"limit\" && (\n        <div css={sheetConfigContainerStyle}>\n          <div css={spreadsheetContainerStyle}>\n            <InputEditor\n              value={opts.limit ?? \"\"}\n              onChange={onChange(\"limit\")}\n              title={t(\"editor.action.form.label.gs.limit\")}\n              expectedType={VALIDATION_TYPES.NUMBER}\n            />\n          </div>\n          <div css={spreadsheetContainerStyle}>\n            <InputEditor\n              value={opts.offset ?? \"\"}\n              onChange={onChange(\"offset\")}\n              title={t(\"editor.action.form.label.gs.offset\")}\n              expectedType={VALIDATION_TYPES.NUMBER}\n            />\n          </div>\n        </div>\n      )}\n      {opts.rangeType === \"a1\" && (\n        <InputEditor\n          title={t(\"editor.action.form.label.gs.a1_notation\")}\n          value={opts.a1Notation}\n          onChange={onChange(\"a1Notation\")}\n          tips={\n            <Trans\n              i18nKey=\"editor.action.form.tips.gs.to_select_the_first_\"\n              t={t}\n              components={[\n                <TextLink\n                  key=\"notation-link\"\n                  onClick={() => {\n                    window.open(\n                      \"https://developers.google.com/sheets/api/guides/concepts#a1_notation\",\n                      \"_blank\",\n                    )\n                  }}\n                />,\n              ]}\n            />\n          }\n        />\n      )}\n    </>\n  )\n}\n\nReadSpreadsheetSubPanel.displayName = \"ReadSpreadsheetSubPanel\"\n","import { GoogleSheetsActionUpdateOpts, Params } from \"@illa-public/public-types\"\nimport { TextLink } from \"@illa-public/text-link\"\nimport { FC, useCallback } from \"react\"\nimport { Trans, useTranslation } from \"react-i18next\"\nimport { Select } from \"@illa-design/react\"\nimport { CodeEditor } from \"@/components/CodeEditor\"\nimport {\n  CODE_LANG,\n  CODE_TYPE,\n} from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { RecordEditor } from \"@/components/RecordEditor\"\nimport {\n  codeMirrorWrapperLabelStyle,\n  codeMirrorWrapperValueStyle,\n} from \"@/page/App/components/Actions/ActionPanel/FirebasePanel/components/CollectionRecordEditor/style\"\nimport { actionItemRecordEditorStyle } from \"@/page/App/components/Actions/ActionPanel/FirebasePanel/style\"\nimport { BasicSheetConfig } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/BasicSheetConfig\"\nimport { GoogleSheetsActionSubPanelProps } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/interface\"\nimport {\n  updateEditorKeyContainerStyle,\n  updateEditorValueContainerStyle,\n} from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/style\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const UpdateSpreadsheetSubPanel: FC<GoogleSheetsActionSubPanelProps> = (\n  props,\n) => {\n  const { t } = useTranslation()\n  const { onChange, spreadsheetsOption } = props\n  const opts = props.opts as GoogleSheetsActionUpdateOpts\n\n  const isFiltersType = opts.filterType === \"filter\"\n\n  const handleOnChangeKeyOrValue = useCallback(\n    (\n      index: number,\n      key: string,\n      value: string,\n      operator: string,\n      _name?: string,\n    ) => {\n      const params = opts.filters as Params[]\n      let newList = [...params]\n      newList[index] = {\n        key,\n        value,\n        operator,\n      }\n      onChange(\"filters\")(newList)\n    },\n    [onChange, opts.filters],\n  )\n\n  const handleOnAddKeys = useCallback(() => {\n    const params = opts.filters as Params[]\n    let newList: Params[] = [\n      ...params,\n      { key: \"\", value: \"\", operator: \"\" } as Params,\n    ]\n    onChange(\"filters\")(newList)\n  }, [onChange, opts.filters])\n\n  const handleOnDeleteKeys = useCallback(\n    (index: number) => {\n      const params = opts.filters as Params[]\n      let newList = [...params]\n      newList.splice(index, 1)\n      if (newList.length === 0) {\n        newList = [{ key: \"\", value: \"\", operator: \"\" } as Params]\n      }\n      onChange(\"filters\")(newList)\n    },\n    [onChange, opts.filters],\n  )\n\n  const handleSubLabelClick = useCallback(() => {\n    const updateValue = opts.filterType === \"filter\" ? \"a1\" : \"filter\"\n    onChange(\"filterType\")(updateValue)\n  }, [onChange, opts.filterType])\n\n  return (\n    <>\n      <BasicSheetConfig\n        sheetName={opts.sheetName}\n        spreadsheet={opts.spreadsheet}\n        onChange={onChange}\n        isHiddenSheetName={!isFiltersType}\n        spreadsheetsOption={spreadsheetsOption}\n        fx={opts.fx}\n      />\n      {isFiltersType ? (\n        <RecordEditor\n          label={t(\"editor.action.form.label.gs.filter_by\")}\n          subLabel={\n            isFiltersType\n              ? t(\"editor.action.form.option.gs.filter_by.use_a1_notation\")\n              : t(\"editor.action.form.option.gs.filter_by.use_row_filters\")\n          }\n          onSubLabelClick={handleSubLabelClick}\n          records={(opts.filters ?? []) as Params[]}\n          customRender={(record, index) => (\n            <>\n              <div\n                css={[\n                  actionItemRecordEditorStyle,\n                  updateEditorKeyContainerStyle,\n                ]}\n              >\n                <CodeEditor\n                  value={record.key}\n                  singleLine\n                  onChange={(val) => {\n                    handleOnChangeKeyOrValue(\n                      index,\n                      val,\n                      record.value,\n                      record.operator,\n                    )\n                  }}\n                  wrapperCss={codeMirrorWrapperLabelStyle}\n                  expectValueType={VALIDATION_TYPES.STRING}\n                  lang={CODE_LANG.JAVASCRIPT}\n                  codeType={CODE_TYPE.EXPRESSION}\n                  canShowCompleteInfo\n                  placeholder={t(\n                    \"editor.action.form.placeholder.gs.row_filter.column_name\",\n                  )}\n                />\n              </div>\n              <Select\n                colorScheme=\"techPurple\"\n                showSearch={true}\n                defaultValue={record.operator}\n                value={record.operator}\n                w=\"0\"\n                h=\"32px\"\n                bdRadius=\"0\"\n                flexGrow=\"1\"\n                onChange={(val) =>\n                  handleOnChangeKeyOrValue(\n                    index,\n                    record.key,\n                    record.value,\n                    val as string,\n                  )\n                }\n                options={[\"=\"]}\n              />\n              <div\n                css={[\n                  actionItemRecordEditorStyle,\n                  updateEditorValueContainerStyle,\n                ]}\n              >\n                <CodeEditor\n                  singleLine\n                  value={record.value}\n                  onChange={(val) => {\n                    handleOnChangeKeyOrValue(\n                      index,\n                      record.key,\n                      val,\n                      record.operator,\n                    )\n                  }}\n                  wrapperCss={codeMirrorWrapperValueStyle}\n                  expectValueType={VALIDATION_TYPES.STRING}\n                  lang={CODE_LANG.JAVASCRIPT}\n                  codeType={CODE_TYPE.EXPRESSION}\n                  canShowCompleteInfo\n                  placeholder={t(\n                    \"editor.action.form.placeholder.gs.row_filter.value\",\n                  )}\n                />\n              </div>\n            </>\n          )}\n          name=\"filter\"\n          onAdd={handleOnAddKeys}\n          onDelete={handleOnDeleteKeys}\n          onChangeKey={() => {}}\n          onChangeValue={() => {}}\n        />\n      ) : (\n        <InputEditor\n          title={t(\"editor.action.form.label.gs.filter_by\")}\n          value={opts.a1Notation}\n          onChange={onChange(\"a1Notation\")}\n          tips={\n            <Trans\n              i18nKey=\"editor.action.form.tips.gs.a1_notation\"\n              t={t}\n              components={[\n                <TextLink\n                  key=\"editor.action.form.tips.gs.a1_notation\"\n                  onClick={() =>\n                    window.open(\n                      \"https://developers.google.com/sheets/api/guides/concepts#a1_notation\",\n                      \"_blank\",\n                    )\n                  }\n                />,\n              ]}\n            />\n          }\n          expectedType={VALIDATION_TYPES.STRING}\n          subtitle={\n            isFiltersType\n              ? t(\"editor.action.form.option.gs.filter_by.use_a1_notation\")\n              : t(\"editor.action.form.option.gs.filter_by.use_row_filters\")\n          }\n          handleSubtitleClick={handleSubLabelClick}\n        />\n      )}\n      <InputEditor\n        title={t(\"editor.action.form.label.gs.update_value\")}\n        value={opts.values}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        onChange={onChange(\"values\")}\n        placeholder={t(\"editor.action.form.placeholder.gs.update_value\")}\n        expectedType={VALIDATION_TYPES.ARRAY}\n      />\n    </>\n  )\n}\nUpdateSpreadsheetSubPanel.displayName = \"UpdateSpreadsheetSubPanel\"\n","import {\n  GoogleSheetsActionInitial,\n  GoogleSheetsActionInitialMaps,\n} from \"@illa-public/public-configs\"\nimport {\n  ActionItem,\n  GoogleSheetsAction,\n  GoogleSheetsActionOpts,\n  GoogleSheetsActionType,\n} from \"@illa-public/public-types\"\nimport { Params } from \"@illa-public/public-types\"\nimport { FC, useCallback, useEffect, useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { SelectOptionObject, SelectValue } from \"@illa-design/react\"\nimport { AppendSpreadsheetSubPanel } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/AppendSpreadsheetSubPanel\"\nimport { BulkUpdateSpreadsheetSubPanel } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/BulkUpdateSpreadsheetSubPanel\"\nimport { CopySpreadsheetSubPanel } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/CopySpreadSheetSubPanel\"\nimport { CreateSpreadsheetSubPanel } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/CreateSpreadsheetSubPanel\"\nimport { DeleteSpreadsheetSubPanel } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/DeleteSpreadsheetSubPanel\"\nimport { GetSpreadsheetSubPanel } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/GetSpreadsheetSubPanel\"\nimport { ReadSpreadsheetSubPanel } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/ReadSpreadsheetSubPanel\"\nimport { UpdateSpreadsheetSubPanel } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/UpdateSpreadsheetSubPanel\"\nimport { GoogleSheetsActionTypesOptions } from \"@/page/App/components/Actions/ActionPanel/GoogleSheetsPanel/values\"\nimport { SingleTypeComponent } from \"@/page/App/components/Actions/ActionPanel/SingleTypeComponent\"\nimport { TransformerComponent } from \"@/page/App/components/Actions/ActionPanel/TransformerComponent\"\nimport { actionItemContainer } from \"@/page/App/components/Actions/ActionPanel/style\"\nimport {\n  getCachedAction,\n  getSelectedAction,\n} from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { fetchResourceMeta } from \"@/services/resource\"\n\nconst SubPanelMap: Record<GoogleSheetsActionType, any> = {\n  read: ReadSpreadsheetSubPanel,\n  update: UpdateSpreadsheetSubPanel,\n  delete: DeleteSpreadsheetSubPanel,\n  list: null,\n  append: AppendSpreadsheetSubPanel,\n  bulkUpdate: BulkUpdateSpreadsheetSubPanel,\n  copy: CopySpreadsheetSubPanel,\n  create: CreateSpreadsheetSubPanel,\n  get: GetSpreadsheetSubPanel,\n}\n\nconst GoogleSheetsPanel: FC = () => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    GoogleSheetsAction<GoogleSheetsActionOpts>\n  >\n  const selectedAction = useSelector(getSelectedAction) as ActionItem<\n    GoogleSheetsAction<GoogleSheetsActionOpts>\n  >\n\n  const [spreadsheetsOption, setSpreadsheetsOption] = useState<\n    SelectOptionObject[]\n  >([])\n\n  const content = cachedAction?.content ?? GoogleSheetsActionInitial\n  const selectedContent = selectedAction.content\n\n  useEffect(() => {\n    if (cachedAction.resourceID == undefined) return\n    fetchResourceMeta(cachedAction.resourceID).then(({ data }) => {\n      let tables: { id: string; name: string }[] = []\n      if (data.Schema) {\n        tables = (data.Schema?.spreadsheets ?? []) as {\n          id: string\n          name: string\n        }[]\n      }\n      setSpreadsheetsOption(\n        tables.map((table) => ({ label: table.name, value: table.id })),\n      )\n    })\n  }, [cachedAction.resourceID])\n\n  const handleSelectValueChange = useCallback(\n    (value: SelectValue) => {\n      const content =\n        selectedContent.method === value\n          ? selectedContent\n          : {\n              method: value as GoogleSheetsActionType,\n              opts: GoogleSheetsActionInitialMaps[\n                value as GoogleSheetsActionType\n              ],\n            }\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content,\n        }),\n      )\n    },\n    [cachedAction, dispatch, selectedContent],\n  )\n\n  const handleValueChange = useCallback(\n    (key: string) => (value: string | boolean | Params[]) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...content,\n            opts: {\n              ...content.opts,\n              [key]: value,\n            },\n          },\n        }),\n      )\n    },\n    [cachedAction, content, dispatch],\n  )\n\n  const SubPanel = SubPanelMap[content.method]\n\n  return (\n    <div css={actionItemContainer}>\n      <SingleTypeComponent\n        title={t(\"editor.action.form.label.gs.action_type\")}\n        componentType=\"select\"\n        value={content.method}\n        options={GoogleSheetsActionTypesOptions}\n        onSelectedValueChange={handleSelectValueChange}\n      />\n      {SubPanel && (\n        <SubPanel\n          opts={content.opts}\n          onChange={handleValueChange}\n          spreadsheetsOption={spreadsheetsOption}\n        />\n      )}\n      <TransformerComponent />\n    </div>\n  )\n}\n\nGoogleSheetsPanel.displayName = \"GoogleSheetsPanel\"\nexport default GoogleSheetsPanel\n"],"names":["sheetConfigContainerStyle","css","spreadsheetContainerStyle","getFxIconStyle","fullwidth","selected","hasRightMargin","getColor","BasicSheetConfig","props","spreadsheet","sheetName","onChange","spreadsheetsOption","isHiddenSheetName","fx","t","useTranslation","handleOnClick","jsxs","jsx","InputEditor","VALIDATION_TYPES","SingleTypeComponent","FxIcon","AppendSpreadsheetSubPanel","opts","Fragment","BulkUpdateSpreadsheetSubPanel","applyFxIconStyle","CopySpreadsheetSubPanel","toSpreadsheet","toSheet","toFx","CreateSpreadsheetSubPanel","DeleteSpreadsheetSubPanel","GetSpreadsheetSubPanel","updateEditorKeyContainerStyle","updateEditorValueContainerStyle","GoogleSheetsActionTypesOptions","i18n","ReadGoogleSheetsActionOptions","optionLabelContainerStyle","optionLabelStyle","radioGroupContainerStyle","ReadSpreadsheetSubPanel","Divider","RadioGroup","Trans","TextLink","UpdateSpreadsheetSubPanel","isFiltersType","handleOnChangeKeyOrValue","useCallback","index","key","value","operator","_name","newList","handleOnAddKeys","handleOnDeleteKeys","handleSubLabelClick","updateValue","RecordEditor","record","actionItemRecordEditorStyle","CodeEditor","val","codeMirrorWrapperLabelStyle","CODE_LANG","CODE_TYPE","Select","codeMirrorWrapperValueStyle","SubPanelMap","GoogleSheetsPanel","dispatch","useDispatch","cachedAction","useSelector","getCachedAction","selectedAction","getSelectedAction","setSpreadsheetsOption","useState","content","GoogleSheetsActionInitial","selectedContent","useEffect","fetchResourceMeta","data","tables","_a","table","handleSelectValueChange","GoogleSheetsActionInitialMaps","configActions","handleValueChange","SubPanel","actionItemContainer","TransformerComponent"],"mappings":"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"}