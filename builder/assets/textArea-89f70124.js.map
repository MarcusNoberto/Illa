{"version":3,"file":"textArea-89f70124.js","sources":["../../src/widgetLibrary/TextAreaWidget/style.ts","../../src/widgetLibrary/TextAreaWidget/utils.ts","../../src/widgetLibrary/TextAreaWidget/textArea.tsx"],"sourcesContent":["import { css } from \"@emotion/react\"\nimport { VALIDATE_MESSAGE_HEIGHT } from \"@/page/App/components/ScaleSquare/constant/widget\"\n\nexport const getTextareaContentContainerStyle = (\n  labelPosition: \"left\" | \"right\" | \"top\" = \"left\",\n  showValidationMessage: boolean,\n) => {\n  return css`\n    display: flex;\n    height: ${showValidationMessage\n      ? `calc(100% - ${VALIDATE_MESSAGE_HEIGHT})px`\n      : \"100%\"};\n    flex-direction: ${labelPosition === \"top\" ? \"column\" : \"row\"};\n    & textarea {\n      resize: none;\n    }\n  `\n}\n\nexport const textAreaStyle = css`\n  flex: 1;\n  width: 100%;\n  overflow-y: auto;\n  & > textarea:hover {\n    z-index: 0;\n  }\n`\n","import {\n  getValidateVFromString,\n  handleValidateCheck,\n} from \"../PublicSector/InvalidMessage/utils\"\nimport { TextareaWidgetProps } from \"./interface\"\n\nexport const getValidateMessageFunc = (\n  value: string | undefined,\n  options: {\n    hideValidationMessage?: TextareaWidgetProps[\"hideValidationMessage\"]\n    pattern?: TextareaWidgetProps[\"pattern\"]\n    regex?: TextareaWidgetProps[\"regex\"]\n    minLength?: TextareaWidgetProps[\"minLength\"]\n    maxLength?: TextareaWidgetProps[\"maxLength\"]\n    required?: TextareaWidgetProps[\"required\"]\n    customRule?: TextareaWidgetProps[\"customRule\"]\n  } = {},\n) => {\n  const {\n    hideValidationMessage,\n    pattern,\n    regex,\n    maxLength,\n    minLength,\n    required,\n    customRule,\n  } = options\n  if (!hideValidationMessage) {\n    const message = handleValidateCheck({\n      value: getValidateVFromString(value),\n      pattern,\n      regex,\n      minLength,\n      maxLength,\n      required,\n      customRule,\n    })\n    const showMessage = message && message.length > 0\n    return showMessage ? message : \"\"\n  }\n  return \"\"\n}\n","import { debounce } from \"lodash-es\"\nimport {\n  FC,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\"\nimport useMeasure from \"react-use-measure\"\nimport { TextArea } from \"@illa-design/react\"\nimport { UNIT_HEIGHT } from \"@/page/App/components/DotPanel/constant/canvas\"\nimport {\n  LABEL_TOP_UNIT_HEIGHT,\n  VALIDATE_MESSAGE_HEIGHT,\n} from \"@/page/App/components/ScaleSquare/constant/widget\"\nimport { AutoHeightContainer } from \"@/widgetLibrary/PublicSector/AutoHeightContainer\"\nimport { InvalidMessage } from \"@/widgetLibrary/PublicSector/InvalidMessage\"\nimport { Label } from \"@/widgetLibrary/PublicSector/Label\"\nimport { TooltipWrapper } from \"@/widgetLibrary/PublicSector/TooltipWrapper\"\nimport {\n  applyLabelAndComponentWrapperStyle,\n  applyValidateMessageWrapperStyle,\n} from \"@/widgetLibrary/PublicSector/TransformWidgetWrapper/style\"\nimport {\n  TextareaWidgetProps,\n  WrappedTextareaProps,\n} from \"@/widgetLibrary/TextAreaWidget/interface\"\nimport {\n  getTextareaContentContainerStyle,\n  textAreaStyle,\n} from \"@/widgetLibrary/TextAreaWidget/style\"\nimport { getValidateMessageFunc } from \"./utils\"\n\nexport const WrappedTextarea = forwardRef<\n  HTMLTextAreaElement,\n  WrappedTextareaProps\n>((props, ref) => {\n  const {\n    value,\n    placeholder,\n    disabled,\n    readOnly,\n    showCharacterCount,\n    colorScheme,\n    handleOnChange,\n    handleOnFocus,\n    handleOnBlur,\n    allowClear,\n    maxLength,\n    dynamicHeight,\n    dynamicMinHeight = 0,\n    dynamicMaxHeight = Infinity,\n    labelPosition,\n    showValidationMessage,\n  } = props\n\n  const limitedStyle = useMemo(() => {\n    const limitLinePosition =\n      labelPosition === \"top\" ? LABEL_TOP_UNIT_HEIGHT : UNIT_HEIGHT\n    const minH = `${\n      showValidationMessage\n        ? dynamicMinHeight - limitLinePosition - VALIDATE_MESSAGE_HEIGHT\n        : dynamicMinHeight - limitLinePosition\n    }px`\n    const maxH = `${\n      showValidationMessage\n        ? dynamicMaxHeight - limitLinePosition - VALIDATE_MESSAGE_HEIGHT\n        : dynamicMaxHeight - limitLinePosition\n    }px`\n    if (dynamicHeight === \"limited\") {\n      return {\n        minH,\n        maxH,\n        h: \"auto\",\n      }\n    }\n    if (dynamicHeight === \"fixed\") {\n      return {\n        maxH: showValidationMessage\n          ? `calc(100% - ${limitLinePosition + VALIDATE_MESSAGE_HEIGHT})px`\n          : `calc(100% - ${limitLinePosition})px`,\n        h: \"auto\",\n      }\n    }\n    return {\n      minH: showValidationMessage\n        ? `calc(100% - ${VALIDATE_MESSAGE_HEIGHT})px`\n        : \"100%\",\n      maxH: showValidationMessage\n        ? `calc(100% - ${VALIDATE_MESSAGE_HEIGHT})px`\n        : \"100%\",\n      h: \"auto\",\n    }\n  }, [\n    dynamicHeight,\n    dynamicMaxHeight,\n    dynamicMinHeight,\n    labelPosition,\n    showValidationMessage,\n  ])\n\n  return (\n    <TextArea\n      css={textAreaStyle}\n      {...limitedStyle}\n      textAreaRef={ref}\n      value={value}\n      placeholder={placeholder}\n      disabled={disabled}\n      readOnly={readOnly}\n      maxLength={maxLength}\n      showWordLimit={showCharacterCount}\n      colorScheme={colorScheme}\n      allowClear={allowClear}\n      onFocus={handleOnFocus}\n      onBlur={handleOnBlur}\n      onChange={handleOnChange}\n      onClear={() => {\n        handleOnChange(\"\")\n      }}\n      autoSize\n    />\n  )\n})\n\nWrappedTextarea.displayName = \"WrappedTextarea\"\n\nexport const TextareaWidget: FC<TextareaWidgetProps> = (props) => {\n  const {\n    value,\n    handleUpdateDsl,\n    updateComponentRuntimeProps,\n    deleteComponentRuntimeProps,\n    minLength,\n    maxLength,\n    labelPosition,\n    labelFull,\n    label,\n    labelAlign,\n    labelWidth = 33,\n    labelCaption,\n    labelWidthUnit,\n    required,\n    labelHidden,\n    tooltipText,\n    pattern,\n    regex,\n    customRule,\n    hideValidationMessage,\n    updateComponentHeight,\n    validateMessage,\n    triggerEventHandler,\n    dynamicHeight = \"fixed\",\n    dynamicMinHeight,\n    dynamicMaxHeight,\n    defaultValue,\n    handleUpdateMultiExecutionResult,\n    displayName,\n  } = props\n\n  const textareaRef = useRef<HTMLTextAreaElement>(null)\n  const textareaWrapperRef = useRef<HTMLDivElement>(null)\n  const [messageWrapperRef, bounds] = useMeasure()\n  const [textAreaValue, setTextAreaValue] = useState(defaultValue)\n\n  useEffect(() => {\n    setTextAreaValue(defaultValue)\n    handleUpdateMultiExecutionResult([\n      {\n        displayName,\n        value: {\n          value: defaultValue || \"\",\n        },\n      },\n    ])\n  }, [defaultValue, displayName, handleUpdateMultiExecutionResult])\n\n  useEffect(() => {\n    if (textareaWrapperRef.current) {\n      updateComponentHeight?.(textareaWrapperRef.current?.clientHeight)\n    }\n  }, [validateMessage, labelPosition, updateComponentHeight])\n\n  const handleValidate = useCallback(\n    (value?: string) => {\n      const message = getValidateMessageFunc(value, {\n        hideValidationMessage: hideValidationMessage,\n        pattern: pattern,\n        regex: regex,\n        minLength: minLength,\n        maxLength: maxLength,\n        required: required,\n        customRule: customRule,\n      })\n      handleUpdateDsl({\n        validateMessage: message,\n      })\n      return message\n    },\n    [\n      hideValidationMessage,\n      pattern,\n      regex,\n      minLength,\n      maxLength,\n      required,\n      customRule,\n      handleUpdateDsl,\n    ],\n  )\n\n  const debounceOnChange = useRef(\n    debounce(\n      (\n        value: string,\n        triggerEventHandler: TextareaWidgetProps[\"triggerEventHandler\"],\n        options?: {\n          hideValidationMessage?: TextareaWidgetProps[\"hideValidationMessage\"]\n          pattern?: TextareaWidgetProps[\"pattern\"]\n          regex?: TextareaWidgetProps[\"regex\"]\n          minLength?: TextareaWidgetProps[\"minLength\"]\n          maxLength?: TextareaWidgetProps[\"maxLength\"]\n          required?: TextareaWidgetProps[\"required\"]\n          customRule?: TextareaWidgetProps[\"customRule\"]\n        },\n      ) => {\n        new Promise((resolve) => {\n          const message = getValidateMessageFunc(value, options)\n          handleUpdateMultiExecutionResult([\n            {\n              displayName,\n              value: {\n                value: value || \"\",\n                validateMessage: message,\n              },\n            },\n          ])\n          resolve(true)\n        }).then(() => {\n          triggerEventHandler(\"change\")\n        })\n      },\n      180,\n    ),\n  )\n\n  const handleOnChange = useCallback(\n    (value: string) => {\n      setTextAreaValue(value)\n      debounceOnChange.current(value, triggerEventHandler, {\n        hideValidationMessage: hideValidationMessage,\n        pattern: pattern,\n        regex: regex,\n        minLength: minLength,\n        maxLength: maxLength,\n        required: required,\n        customRule: customRule,\n      })\n    },\n    [\n      customRule,\n      hideValidationMessage,\n      maxLength,\n      minLength,\n      pattern,\n      regex,\n      required,\n      triggerEventHandler,\n    ],\n  )\n\n  useEffect(() => {\n    updateComponentRuntimeProps({\n      focus: () => {\n        textareaRef.current?.focus()\n      },\n      setValue: (value: boolean | string | number | void) => {\n        if (typeof value === \"string\") {\n          handleOnChange(value)\n        } else {\n          handleOnChange(\"\")\n        }\n      },\n      clearValue: () => {\n        handleOnChange(\"\")\n      },\n      validate: () => {\n        return handleValidate(value)\n      },\n      clearValidation: () => {\n        handleUpdateDsl({\n          validateMessage: \"\",\n        })\n      },\n    })\n    return () => {\n      deleteComponentRuntimeProps()\n    }\n  }, [\n    deleteComponentRuntimeProps,\n    handleOnChange,\n    handleUpdateDsl,\n    handleValidate,\n    updateComponentRuntimeProps,\n    value,\n  ])\n\n  const handleOnFocus = useCallback(() => {\n    triggerEventHandler(\"focus\")\n  }, [triggerEventHandler])\n\n  const handleOnBlur = useCallback(() => {\n    triggerEventHandler(\"blur\")\n  }, [triggerEventHandler])\n\n  const enableAutoHeight = useMemo(() => {\n    switch (dynamicHeight) {\n      case \"auto\":\n        return true\n      case \"limited\":\n        return true\n      case \"fixed\":\n      default:\n        return false\n    }\n  }, [dynamicHeight])\n\n  const minMaxValueRef = useRef<{ min?: number; max?: number }>({})\n  const showValidationMessage = useMemo(() => {\n    return Boolean(!hideValidationMessage && validateMessage)\n  }, [hideValidationMessage, validateMessage])\n\n  const getMinMaxHeight = (\n    width: number,\n    height: number,\n    minMaxHeight?: number,\n  ) => {\n    if (minMaxHeight === undefined) {\n      return minMaxHeight\n    }\n    return minMaxHeight - (width + height)\n  }\n\n  const minValue =\n    labelPosition === \"top\" && label\n      ? getMinMaxHeight(30, bounds.height, dynamicMinHeight)\n      : getMinMaxHeight(6, bounds.height, dynamicMinHeight)\n\n  const maxValue =\n    labelPosition === \"top\" && label\n      ? getMinMaxHeight(30, bounds.height, dynamicMaxHeight)\n      : getMinMaxHeight(6, bounds.height, dynamicMaxHeight)\n\n  if (minValue !== minMaxValueRef.current.min) {\n    minMaxValueRef.current.min = minValue\n  }\n  if (maxValue !== minMaxValueRef.current.max) {\n    minMaxValueRef.current.max = maxValue\n  }\n\n  return (\n    <TooltipWrapper tooltipText={tooltipText} tooltipDisabled={!tooltipText}>\n      <AutoHeightContainer\n        updateComponentHeight={updateComponentHeight}\n        enable={enableAutoHeight}\n      >\n        <div\n          css={[\n            applyLabelAndComponentWrapperStyle(labelPosition),\n            getTextareaContentContainerStyle(\n              labelPosition,\n              showValidationMessage,\n            ),\n          ]}\n        >\n          <Label\n            labelFull={labelFull}\n            label={label}\n            labelAlign={labelAlign}\n            labelWidth={labelWidth}\n            labelCaption={labelCaption}\n            labelWidthUnit={labelWidthUnit}\n            labelPosition={labelPosition}\n            required={required}\n            labelHidden={labelHidden}\n            hasTooltip={!!tooltipText}\n          />\n          <WrappedTextarea\n            {...props}\n            value={textAreaValue}\n            ref={textareaRef}\n            handleOnChange={handleOnChange}\n            handleOnFocus={handleOnFocus}\n            handleOnBlur={handleOnBlur}\n            showValidationMessage={showValidationMessage}\n          />\n        </div>\n        {!hideValidationMessage && (\n          <div\n            css={applyValidateMessageWrapperStyle(\n              labelWidth,\n              labelPosition,\n              labelHidden || !label,\n            )}\n            ref={messageWrapperRef}\n          >\n            <InvalidMessage validateMessage={validateMessage} />\n          </div>\n        )}\n      </AutoHeightContainer>\n    </TooltipWrapper>\n  )\n}\n\nWrappedTextarea.displayName = \"WrappedTextarea\"\nexport default TextareaWidget\n"],"names":["getTextareaContentContainerStyle","labelPosition","showValidationMessage","css","VALIDATE_MESSAGE_HEIGHT","textAreaStyle","getValidateMessageFunc","value","options","hideValidationMessage","pattern","regex","maxLength","minLength","required","customRule","message","handleValidateCheck","getValidateVFromString","WrappedTextarea","forwardRef","props","ref","placeholder","disabled","readOnly","showCharacterCount","colorScheme","handleOnChange","handleOnFocus","handleOnBlur","allowClear","dynamicHeight","dynamicMinHeight","dynamicMaxHeight","limitedStyle","useMemo","limitLinePosition","LABEL_TOP_UNIT_HEIGHT","UNIT_HEIGHT","minH","maxH","jsx","TextArea","TextareaWidget","handleUpdateDsl","updateComponentRuntimeProps","deleteComponentRuntimeProps","labelFull","label","labelAlign","labelWidth","labelCaption","labelWidthUnit","labelHidden","tooltipText","updateComponentHeight","validateMessage","triggerEventHandler","defaultValue","handleUpdateMultiExecutionResult","displayName","textareaRef","useRef","textareaWrapperRef","messageWrapperRef","bounds","useMeasure","textAreaValue","setTextAreaValue","useState","useEffect","_a","handleValidate","useCallback","debounceOnChange","debounce","resolve","enableAutoHeight","minMaxValueRef","getMinMaxHeight","width","height","minMaxHeight","minValue","maxValue","TooltipWrapper","jsxs","AutoHeightContainer","applyLabelAndComponentWrapperStyle","Label","applyValidateMessageWrapperStyle","InvalidMessage"],"mappings":"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"}