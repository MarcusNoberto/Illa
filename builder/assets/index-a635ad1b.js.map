{"version":3,"file":"index-a635ad1b.js","sources":["../../src/page/App/components/Actions/ActionPanel/MongoDbPanel/AggregatePart/index.tsx","../../src/page/App/components/Actions/ActionPanel/MongoDbPanel/BulkWritePart/index.tsx","../../src/page/App/components/Actions/ActionPanel/MongoDbPanel/Command/index.tsx","../../src/page/App/components/Actions/ActionPanel/MongoDbPanel/CountPart/index.tsx","../../src/page/App/components/Actions/ActionPanel/MongoDbPanel/DeleteManyPart/index.tsx","../../src/page/App/components/Actions/ActionPanel/MongoDbPanel/DeleteOnePart/index.tsx","../../src/page/App/components/Actions/ActionPanel/MongoDbPanel/DistinctPart/index.tsx","../../src/page/App/components/Actions/ActionPanel/MongoDbPanel/FindOneAndUpdatePart/index.tsx","../../src/page/App/components/Actions/ActionPanel/MongoDbPanel/FindOnePart/index.tsx","../../src/page/App/components/Actions/ActionPanel/MongoDbPanel/FindPart/index.tsx","../../src/page/App/components/Actions/ActionPanel/MongoDbPanel/InertManyPart/index.tsx","../../src/page/App/components/Actions/ActionPanel/MongoDbPanel/InertOnePart/index.tsx","../../src/page/App/components/Actions/ActionPanel/MongoDbPanel/UpdateManyPart/index.tsx","../../src/page/App/components/Actions/ActionPanel/MongoDbPanel/UpdateOnePart/index.tsx","../../src/page/App/components/Actions/ActionPanel/MongoDbPanel/listCollectionsPart/index.tsx","../../src/page/App/components/Actions/ActionPanel/MongoDbPanel/style.ts","../../src/page/App/components/Actions/ActionPanel/MongoDbPanel/constants.ts","../../src/page/App/components/Actions/ActionPanel/MongoDbPanel/index.tsx"],"sourcesContent":["import {\n  ActionItem,\n  MongoDbAction,\n  MongoDbActionTypeContent,\n  MongoDbAggregateContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {\n  CODE_LANG,\n  CODE_TYPE,\n} from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { MongoDbActionPartProps } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const AggregatePart: FC<MongoDbActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    MongoDbAction<MongoDbActionTypeContent>\n  >\n  const typeContent = props.typeContent as MongoDbAggregateContent\n\n  const handleValueChange = useCallback(\n    (name: string) => (value: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            typeContent: {\n              ...typeContent,\n              [name]: value,\n            } as MongoDbAggregateContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, dispatch, typeContent],\n  )\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.aggregation\")}\n        value={typeContent.aggregation}\n        onChange={handleValueChange(\"aggregation\")}\n        style={{ height: \"188px\" }}\n        expectedType={VALIDATION_TYPES.STRING}\n        mode={CODE_LANG.JAVASCRIPT}\n        codeType={CODE_TYPE.EXPRESSION}\n        placeholder={\n          \"[\\n\" +\n          \"   {\\n\" +\n          '      \"$match\": { \"size\": \"medium\" }\\n' +\n          \"   },\\n\" +\n          \"   {\\n\" +\n          '      \"$group\": { \"_id\": \"$type\", \"totalQuantity\": { \"$sum\": \"$price\" } }\\n' +\n          \"   }\\n\" +\n          \"] \"\n        }\n        canShowCompleteInfo\n        lineNumbers\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.options\")}\n        lineNumbers\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.options}\n        style={{ height: \"188px\" }}\n        onChange={handleValueChange(\"options\")}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={\n          \"{\\n\" +\n          '\"collation\":{\\n' +\n          '    \"locale\": \"simple\",\\n' +\n          '    \"caseLevel\": true,\\n' +\n          '    \"caseFirst\": \"upper\",\\n' +\n          \"...\\n\" +\n          \"}}\"\n        }\n      />\n    </>\n  )\n}\n\nAggregatePart.displayName = \"AggregatePart\"\n","import {\n  ActionItem,\n  MongoDbAction,\n  MongoDbActionTypeContent,\n  MongoDbBulkWriteContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { MongoDbActionPartProps } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const BulkWritePart: FC<MongoDbActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    MongoDbAction<MongoDbActionTypeContent>\n  >\n  const typeContent = props.typeContent as MongoDbBulkWriteContent\n\n  const handleValueChange = useCallback(\n    (name: string) => (value: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            typeContent: {\n              ...typeContent,\n              [name]: value,\n            } as MongoDbBulkWriteContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, dispatch, typeContent],\n  )\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.operations\")}\n        lineNumbers\n        style={{ height: \"188px\" }}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.operations}\n        onChange={handleValueChange(\"operations\")}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={\n          \"[\\n\" +\n          '      { \"insertOne\": { \"document\": { \"_id\": 3, \"type\": \"beef\", \"size\": \"medium\", \"price\": 6 } } },\\n' +\n          '      { \"insertOne\": { \"document\": { \"_id\": 4, \"type\": \"sausage\", \"size\": \"large\", \"price\": 10 } } },\\n' +\n          '      { \"updateOne\": {\\n' +\n          '         \"filter\": { \"type\": \"cheese\" },\\n' +\n          '         \"update\": { \"$set\": { \"price\": 8 } }\\n' +\n          \"      } }\\n\" +\n          \"]\"\n        }\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.options\")}\n        lineNumbers\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.options}\n        onChange={handleValueChange(\"options\")}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n    </>\n  )\n}\n\nBulkWritePart.displayName = \"BulkWritePart\"\n","import {\n  ActionItem,\n  MongoDbAction,\n  MongoDbActionTypeContent,\n  MongoDbCommandContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { MongoDbActionPartProps } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const CommandPart: FC<MongoDbActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    MongoDbAction<MongoDbActionTypeContent>\n  >\n  const typeContent = props.typeContent as MongoDbCommandContent\n\n  const handleValueChange = useCallback(\n    (value: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            typeContent: {\n              ...typeContent,\n              document: value,\n            } as MongoDbCommandContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, dispatch, typeContent],\n  )\n\n  return (\n    <InputEditor\n      title={t(\"editor.action.panel.mongodb.document\")}\n      lineNumbers\n      style={{ height: \"120px\" }}\n      mode={CODE_LANG.JAVASCRIPT}\n      value={typeContent.document}\n      onChange={handleValueChange}\n      expectedType={VALIDATION_TYPES.STRING}\n      placeholder={\n        \"{\\n\" +\n        '      \"find\": \"fruit\",\\n' +\n        '      \"filter\": {\"price\":10000}\\n' +\n        \"}\"\n      }\n    />\n  )\n}\n\nCommandPart.displayName = \"CommandPart\"\n","import {\n  ActionItem,\n  MongoDbAction,\n  MongoDbActionTypeContent,\n  MongoDbCountContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { MongoDbActionPartProps } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const CountPart: FC<MongoDbActionPartProps> = (props) => {\n  const { t } = useTranslation()\n\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    MongoDbAction<MongoDbActionTypeContent>\n  >\n\n  const typeContent = props.typeContent as MongoDbCountContent\n\n  const handleValueChange = useCallback(\n    (value: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            typeContent: {\n              ...typeContent,\n              query: value,\n            } as MongoDbCountContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, dispatch, typeContent],\n  )\n\n  return (\n    <InputEditor\n      title={t(\"editor.action.panel.mongodb.query\")}\n      lineNumbers\n      style={{ height: \"88px\" }}\n      mode={CODE_LANG.JAVASCRIPT}\n      placeholder={\n        \"{\\n\" +\n        '  \"type\":\"cheese\",\\n' +\n        '  \"_id\": {\\n' +\n        '    \"$oid\":\"646385ae462e929b7a3d86bc\"\\n' +\n        \"  }\\n\" +\n        \"}\"\n      }\n      value={typeContent.query}\n      onChange={handleValueChange}\n      expectedType={VALIDATION_TYPES.STRING}\n    />\n  )\n}\n\nCountPart.displayName = \"CountPart\"\n","import {\n  ActionItem,\n  MongoDbAction,\n  MongoDbActionTypeContent,\n  MongoDbDeleteManyContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { MongoDbActionPartProps } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const DeleteManyPart: FC<MongoDbActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    MongoDbAction<MongoDbActionTypeContent>\n  >\n  const typeContent = props.typeContent as MongoDbDeleteManyContent\n\n  const handleValueChange = useCallback(\n    (value: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            typeContent: {\n              ...typeContent,\n              filter: value,\n            } as MongoDbDeleteManyContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, dispatch, typeContent],\n  )\n\n  return (\n    <InputEditor\n      title={t(\"editor.action.panel.mongodb.filter\")}\n      lineNumbers\n      style={{ height: \"88px\" }}\n      mode={CODE_LANG.JAVASCRIPT}\n      placeholder={\n        \"{\\n\" +\n        '  \"type\":\"cheese\",\\n' +\n        '  \"_id\": {\\n' +\n        '    \"$oid\":\"646385ae462e929b7a3d86bc\"\\n' +\n        \"  }\\n\" +\n        \"}\"\n      }\n      value={typeContent.filter}\n      onChange={handleValueChange}\n      expectedType={VALIDATION_TYPES.STRING}\n    />\n  )\n}\n\nDeleteManyPart.displayName = \"DeleteManyPart\"\n","import {\n  ActionItem,\n  MongoDbAction,\n  MongoDbActionTypeContent,\n  MongoDbDeleteOneContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { MongoDbActionPartProps } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const DeleteOnePart: FC<MongoDbActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    MongoDbAction<MongoDbActionTypeContent>\n  >\n  const typeContent = props.typeContent as MongoDbDeleteOneContent\n\n  const handleValueChange = useCallback(\n    (value: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            typeContent: {\n              ...typeContent,\n              filter: value,\n            } as MongoDbDeleteOneContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, dispatch, typeContent],\n  )\n\n  return (\n    <InputEditor\n      lineNumbers\n      style={{ height: \"88px\" }}\n      mode={CODE_LANG.JAVASCRIPT}\n      placeholder={\n        \"{\\n\" +\n        '  \"type\":\"cheese\",\\n' +\n        '  \"_id\": {\\n' +\n        '    \"$oid\":\"646385ae462e929b7a3d86bc\"\\n' +\n        \"  }\\n\" +\n        \"}\"\n      }\n      value={typeContent.filter}\n      expectedType={VALIDATION_TYPES.STRING}\n      title={t(\"editor.action.panel.mongodb.filter\")}\n      onChange={handleValueChange}\n    />\n  )\n}\n\nDeleteOnePart.displayName = \"DeleteOnePart\"\n","import {\n  ActionItem,\n  MongoDbAction,\n  MongoDbActionTypeContent,\n  MongoDbDistinctContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { MongoDbActionPartProps } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const DistinctPart: FC<MongoDbActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    MongoDbAction<MongoDbActionTypeContent>\n  >\n  const typeContent = props.typeContent as MongoDbDistinctContent\n\n  const handleValueChange = useCallback(\n    (name: string) => (value: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            typeContent: {\n              ...typeContent,\n              [name]: value,\n            } as MongoDbDistinctContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, dispatch, typeContent],\n  )\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.query\")}\n        lineNumbers\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.query}\n        onChange={handleValueChange(\"query\")}\n        style={{ height: \"188px\" }}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={\n          \"{\\n\" +\n          '  \"type\":\"cheese\",\\n' +\n          '  \"_id\": {\\n' +\n          '    \"$oid\":\"646385ae462e929b7a3d86bc\"\\n' +\n          \"  }\\n\" +\n          \"}\"\n        }\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.field\")}\n        lineNumbers\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.field}\n        onChange={handleValueChange(\"field\")}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={\"_id\"}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.options\")}\n        lineNumbers\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.options}\n        style={{ height: \"188px\" }}\n        placeholder={\n          \"{\\n\" +\n          '\"collation\":{\\n' +\n          '   \"locale\": \"simple\",\\n' +\n          '   \"caseLevel\": true,\\n' +\n          '   \"caseFirst\": \"upper\",\\n' +\n          \"...\\n\" +\n          \"}}\"\n        }\n        onChange={handleValueChange(\"options\")}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n    </>\n  )\n}\n\nDistinctPart.displayName = \"DistinctPart\"\n","import {\n  ActionItem,\n  MongoDbAction,\n  MongoDbActionTypeContent,\n  MongoDbFindOneAndUpdateContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { MongoDbActionPartProps } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const FindOneAndUpdatePart: FC<MongoDbActionPartProps> = (props) => {\n  const { t } = useTranslation()\n\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    MongoDbAction<MongoDbActionTypeContent>\n  >\n  const typeContent = props.typeContent as MongoDbFindOneAndUpdateContent\n\n  const handleValueChange = useCallback(\n    (name: string) => (value: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            typeContent: {\n              ...typeContent,\n              [name]: value,\n            } as MongoDbFindOneAndUpdateContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, dispatch, typeContent],\n  )\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.filter\")}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.filter}\n        onChange={handleValueChange(\"filter\")}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={\n          \"{\\n\" +\n          '  \"type\":\"cheese\",\\n' +\n          '  \"_id\": {\\n' +\n          '    \"$oid\":\"646385ae462e929b7a3d86bc\"\\n' +\n          \"  }\\n\" +\n          \"}\"\n        }\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.update\")}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.update}\n        onChange={handleValueChange(\"update\")}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={'{\"$set\":{\"type\":\"chicken\", \"price\":100}}'}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.options\")}\n        lineNumbers\n        style={{ height: \"188px\" }}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.options}\n        onChange={handleValueChange(\"options\")}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={\n          \"{\\n\" +\n          '\"collation\":{\\n' +\n          '   \"locale\": \"simple\",\\n' +\n          '   \"caseLevel\": true,\\n' +\n          '   \"caseFirst\": \"upper\",\\n' +\n          \"...\\n\" +\n          \"}}\"\n        }\n      />\n    </>\n  )\n}\n\nFindOneAndUpdatePart.displayName = \"FindOneAndUpdatePart\"\n","import {\n  ActionItem,\n  MongoDbAction,\n  MongoDbActionTypeContent,\n  MongoDbFindOneContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { MongoDbActionPartProps } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const FindOnePart: FC<MongoDbActionPartProps> = (props) => {\n  const { t } = useTranslation()\n\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    MongoDbAction<MongoDbActionTypeContent>\n  >\n  const typeContent = props.typeContent as MongoDbFindOneContent\n\n  const handleValueChange = useCallback(\n    (name: string) => (value: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            typeContent: {\n              ...typeContent,\n              [name]: value,\n            } as MongoDbFindOneContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, dispatch, typeContent],\n  )\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.query\")}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.query}\n        onChange={handleValueChange(\"query\")}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={\n          \"{\\n\" +\n          '  \"type\":\"cheese\",\\n' +\n          '  \"_id\": {\\n' +\n          '    \"$oid\":\"646385ae462e929b7a3d86bc\"\\n' +\n          \"  }\\n\" +\n          \"}\"\n        }\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.projection\")}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.projection}\n        onChange={handleValueChange(\"projection\")}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={\n          \"{ \\n\" +\n          '  \"_id\": {\\n' +\n          '    \"$oid\":\"646385ae462e929b7a3d86bc\"\\n' +\n          \"  }\\n\" +\n          \"}\"\n        }\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.skip\")}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.skip}\n        onChange={handleValueChange(\"skip\")}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={\"10\"}\n      />\n    </>\n  )\n}\n\nFindOnePart.displayName = \"FindOnePart\"\n","import {\n  ActionItem,\n  MongoDbAction,\n  MongoDbActionTypeContent,\n  MongoDbFindContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { MongoDbActionPartProps } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const FindPart: FC<MongoDbActionPartProps> = (props) => {\n  const { t } = useTranslation()\n\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    MongoDbAction<MongoDbActionTypeContent>\n  >\n  const typeContent = props.typeContent as MongoDbFindContent\n\n  const handleValueChange = useCallback(\n    (name: string) => (value: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            typeContent: {\n              ...typeContent,\n              [name]: value,\n            } as MongoDbFindContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, dispatch, typeContent],\n  )\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.query\")}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.query}\n        onChange={handleValueChange(\"query\")}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={\n          \"{\\n\" +\n          '  \"type\":\"cheese\",\\n' +\n          '  \"_id\": {\\n' +\n          '    \"$oid\":\"646385ae462e929b7a3d86bc\"\\n' +\n          \"  }\\n\" +\n          \"}\"\n        }\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.projection\")}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.projection}\n        onChange={handleValueChange(\"projection\")}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={\n          \"{ \\n\" +\n          '  \"_id\": {\\n' +\n          '    \"$oid\":\"646385ae462e929b7a3d86bc\"\\n' +\n          \"  }\\n\" +\n          \"}\"\n        }\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.sort_by\")}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.sortBy}\n        onChange={handleValueChange(\"sortBy\")}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={\n          \"{ \\n\" +\n          '  \"_id\": {\\n' +\n          '    \"$oid\":\"646385ae462e929b7a3d86bc\"\\n' +\n          \"  }\\n\" +\n          \"}\"\n        }\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.limit\")}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.limit}\n        onChange={handleValueChange(\"limit\")}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={\"100\"}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.skip\")}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.skip}\n        onChange={handleValueChange(\"skip\")}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={\"10\"}\n      />\n    </>\n  )\n}\n\nFindPart.displayName = \"FindPart\"\n","import {\n  ActionItem,\n  MongoDbAction,\n  MongoDbActionTypeContent,\n  MongoDbInsertManyContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { MongoDbActionPartProps } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const InsertManyPart: FC<MongoDbActionPartProps> = (props) => {\n  const { t } = useTranslation()\n\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    MongoDbAction<MongoDbActionTypeContent>\n  >\n  const typeContent = props.typeContent as MongoDbInsertManyContent\n\n  const handleValueChange = useCallback(\n    (value: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            typeContent: {\n              ...typeContent,\n              document: value,\n            } as MongoDbInsertManyContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, dispatch, typeContent],\n  )\n\n  return (\n    <InputEditor\n      title={t(\"editor.action.panel.mongodb.document\")}\n      lineNumbers\n      style={{ height: \"88px\" }}\n      mode={CODE_LANG.JAVASCRIPT}\n      onChange={handleValueChange}\n      value={typeContent.document}\n      expectedType={VALIDATION_TYPES.STRING}\n      placeholder={\n        '[{\"item\":\"apple\", \"price\":1.49},{\"item\":\"banana\", \"price\":2.50}]'\n      }\n    />\n  )\n}\n\nInsertManyPart.displayName = \"InsertManyPart\"\n","import {\n  ActionItem,\n  MongoDbAction,\n  MongoDbActionTypeContent,\n  MongoDbInsertOneContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { MongoDbActionPartProps } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const InsertOnePart: FC<MongoDbActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    MongoDbAction<MongoDbActionTypeContent>\n  >\n  const typeContent = props.typeContent as MongoDbInsertOneContent\n\n  const handleValueChange = useCallback(\n    (value: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            typeContent: {\n              ...typeContent,\n              document: value,\n            } as MongoDbInsertOneContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, dispatch, typeContent],\n  )\n\n  return (\n    <InputEditor\n      title={t(\"editor.action.panel.mongodb.document\")}\n      lineNumbers\n      style={{ height: \"88px\" }}\n      mode={CODE_LANG.JAVASCRIPT}\n      value={typeContent.document}\n      onChange={handleValueChange}\n      expectedType={VALIDATION_TYPES.STRING}\n      placeholder={'{\"item\":\"apple\", \"price\":1.49}'}\n    />\n  )\n}\n\nInsertOnePart.displayName = \"InsertOnePart\"\n","import {\n  ActionItem,\n  MongoDbAction,\n  MongoDbActionTypeContent,\n  MongoDbUpdateManyContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { MongoDbActionPartProps } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const UpdateManyPart: FC<MongoDbActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    MongoDbAction<MongoDbActionTypeContent>\n  >\n  const typeContent = props.typeContent as MongoDbUpdateManyContent\n\n  const handleValueChange = useCallback(\n    (name: string) => (value: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            typeContent: {\n              ...typeContent,\n              [name]: value,\n            } as MongoDbUpdateManyContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, dispatch, typeContent],\n  )\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.filter\")}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        value={typeContent.filter}\n        onChange={handleValueChange(\"filter\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={\n          \"{\\n\" +\n          '  \"type\":\"cheese\",\\n' +\n          '  \"_id\": {\\n' +\n          '    \"$oid\":\"646385ae462e929b7a3d86bc\"\\n' +\n          \"  }\\n\" +\n          \"}\"\n        }\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.update\")}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.update}\n        onChange={handleValueChange(\"update\")}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={'{\"$set\":{\"type\":\"chicken\", \"price\":100}}'}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.options\")}\n        lineNumbers\n        style={{ height: \"188px\" }}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.options}\n        onChange={handleValueChange(\"options\")}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={\n          \"{\\n\" +\n          '\"collation\":{\\n' +\n          '   \"locale\": \"simple\",\\n' +\n          '   \"caseLevel\": true,\\n' +\n          '   \"caseFirst\": \"upper\",\\n' +\n          \"...\\n\" +\n          \"}}\"\n        }\n      />\n    </>\n  )\n}\n\nUpdateManyPart.displayName = \"UpdateManyPart\"\n","import {\n  ActionItem,\n  MongoDbAction,\n  MongoDbActionTypeContent,\n  MongoDbUpdateOneContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { MongoDbActionPartProps } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const UpdateOnePart: FC<MongoDbActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    MongoDbAction<MongoDbActionTypeContent>\n  >\n  const typeContent = props.typeContent as MongoDbUpdateOneContent\n\n  const handleValueChange = useCallback(\n    (name: string) => (value: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            typeContent: {\n              ...typeContent,\n              [name]: value,\n            } as MongoDbUpdateOneContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, dispatch, typeContent],\n  )\n\n  return (\n    <>\n      <InputEditor\n        value={typeContent.filter}\n        onChange={handleValueChange(\"filter\")}\n        title={t(\"editor.action.panel.mongodb.filter\")}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        expectedType={VALIDATION_TYPES.STRING}\n        mode={CODE_LANG.JAVASCRIPT}\n        placeholder={\n          \"{\\n\" +\n          '  \"type\":\"cheese\",\\n' +\n          '  \"_id\": {\\n' +\n          '    \"$oid\":\"646385ae462e929b7a3d86bc\"\\n' +\n          \"  }\\n\" +\n          \"}\"\n        }\n      />\n      <InputEditor\n        lineNumbers\n        style={{ height: \"88px\" }}\n        value={typeContent.update}\n        onChange={handleValueChange(\"update\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        expectedType={VALIDATION_TYPES.STRING}\n        title={t(\"editor.action.panel.mongodb.update\")}\n        placeholder={'{\"$set\":{\"type\":\"chicken\", \"price\":100}}'}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.mongodb.options\")}\n        lineNumbers\n        style={{ height: \"188px\" }}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={typeContent.options}\n        onChange={handleValueChange(\"options\")}\n        expectedType={VALIDATION_TYPES.STRING}\n        placeholder={\n          \"{\\n\" +\n          '\"collation\":{\\n' +\n          '   \"locale\": \"simple\",\\n' +\n          '   \"caseLevel\": true,\\n' +\n          '   \"caseFirst\": \"upper\",\\n' +\n          \"...\\n\" +\n          \"}}\"\n        }\n      />\n    </>\n  )\n}\n\nUpdateOnePart.displayName = \"UpdateOnePart\"\n","import {\n  ActionItem,\n  MongoDbAction,\n  MongoDbActionTypeContent,\n  MongoDbListCollectionsContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { MongoDbActionPartProps } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const ListCollectionsPart: FC<MongoDbActionPartProps> = (props) => {\n  const { t } = useTranslation()\n\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    MongoDbAction<MongoDbActionTypeContent>\n  >\n  const typeContent = props.typeContent as MongoDbListCollectionsContent\n\n  const handleValueChange = useCallback(\n    (value: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            typeContent: {\n              ...typeContent,\n              query: value,\n            } as MongoDbListCollectionsContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, dispatch, typeContent],\n  )\n\n  return (\n    <InputEditor\n      title={t(\"editor.action.panel.mongodb.query\")}\n      lineNumbers\n      style={{ height: \"88px\" }}\n      mode={CODE_LANG.JAVASCRIPT}\n      value={typeContent.query}\n      onChange={handleValueChange}\n      expectedType={VALIDATION_TYPES.STRING}\n      placeholder={'{\"name\":\"fruit\"}'}\n    />\n  )\n}\n\nListCollectionsPart.displayName = \"ListCollectionsPart\"\n","import { css } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/react\"\n\nexport const codeEditorLabelStyle = css`\n  min-width: 160px;\n  font-size: 14px;\n  font-weight: 500;\n  text-align: right;\n  color: ${getColor(\"grayBlue\", \"02\")};\n  height: 48px;\n  display: flex;\n  flex-direction: row;\n  justify-content: end;\n  align-items: center;\n  align-self: start;\n`\n\nexport const actionItemContainer = css`\n  padding: 8px 0;\n`\n","export const MongoDbActionList = [\n  \"aggregate\",\n  \"bulkWrite\",\n  \"count\",\n  \"deleteMany\",\n  \"deleteOne\",\n  \"distinct\",\n  \"find\",\n  \"findOne\",\n  \"findOneAndUpdate\",\n  \"insertOne\",\n  \"insertMany\",\n  \"listCollections\",\n  \"updateMany\",\n  \"updateOne\",\n  \"command\",\n]\n","import {\n  MongoDbAggregateContentInitial,\n  MongoDbBulkWriteContentInitial,\n  MongoDbCommandContentInitial,\n  MongoDbCountContentInitial,\n  MongoDbDeleteManyContentInitial,\n  MongoDbDeleteOneContentInitial,\n  MongoDbDistinctContentInitial,\n  MongoDbFindContentInitial,\n  MongoDbFindOneAndUpdateContentInitial,\n  MongoDbFindOneContentInitial,\n  MongoDbInsertManyContentInitial,\n  MongoDbInsertOneContentInitial,\n  MongoDbListCollectionsContentInitial,\n  MongoDbUpdateManyContentInitial,\n  MongoDbUpdateOneContentInitial,\n} from \"@illa-public/public-configs\"\nimport {\n  ActionItem,\n  MongoDbAction,\n  MongoDbActionType,\n  MongoDbActionTypeContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback, useMemo } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { SelectValue } from \"@illa-design/react\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { AggregatePart } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/AggregatePart\"\nimport { BulkWritePart } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/BulkWritePart\"\nimport { CommandPart } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/Command\"\nimport { CountPart } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/CountPart\"\nimport { DeleteManyPart } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/DeleteManyPart\"\nimport { DeleteOnePart } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/DeleteOnePart\"\nimport { DistinctPart } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/DistinctPart\"\nimport { FindOneAndUpdatePart } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/FindOneAndUpdatePart\"\nimport { FindOnePart } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/FindOnePart\"\nimport { FindPart } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/FindPart\"\nimport { InsertManyPart } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/InertManyPart\"\nimport { InsertOnePart } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/InertOnePart\"\nimport { UpdateManyPart } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/UpdateManyPart\"\nimport { UpdateOnePart } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/UpdateOnePart\"\nimport { ListCollectionsPart } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/listCollectionsPart\"\nimport { actionItemContainer } from \"@/page/App/components/Actions/ActionPanel/MongoDbPanel/style\"\nimport { SingleTypeComponent } from \"@/page/App/components/Actions/ActionPanel/SingleTypeComponent\"\nimport { TransformerComponent } from \"@/page/App/components/Actions/ActionPanel/TransformerComponent\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport {\n  getCachedAction,\n  getSelectedAction,\n} from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport { MongoDbActionList } from \"./constants\"\n\nconst MongoDbPanel: FC = () => {\n  const { t } = useTranslation()\n\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    MongoDbAction<MongoDbActionTypeContent>\n  >\n  const selectedAction = useSelector(getSelectedAction)\n  const dispatch = useDispatch()\n\n  let content = cachedAction.content as MongoDbAction<MongoDbActionTypeContent>\n\n  const renderInputBody = useMemo(() => {\n    switch (content.actionType) {\n      case \"aggregate\":\n        return <AggregatePart typeContent={content.typeContent} />\n      case \"bulkWrite\":\n        return <BulkWritePart typeContent={content.typeContent} />\n      case \"count\":\n        return <CountPart typeContent={content.typeContent} />\n      case \"deleteMany\":\n        return <DeleteManyPart typeContent={content.typeContent} />\n      case \"deleteOne\":\n        return <DeleteOnePart typeContent={content.typeContent} />\n      case \"distinct\":\n        return <DistinctPart typeContent={content.typeContent} />\n      case \"find\":\n        return <FindPart typeContent={content.typeContent} />\n      case \"findOne\":\n        return <FindOnePart typeContent={content.typeContent} />\n      case \"findOneAndUpdate\":\n        return <FindOneAndUpdatePart typeContent={content.typeContent} />\n      case \"insertOne\":\n        return <InsertOnePart typeContent={content.typeContent} />\n      case \"insertMany\":\n        return <InsertManyPart typeContent={content.typeContent} />\n      case \"listCollections\":\n        return <ListCollectionsPart typeContent={content.typeContent} />\n      case \"updateMany\":\n        return <UpdateManyPart typeContent={content.typeContent} />\n      case \"updateOne\":\n        return <UpdateOnePart typeContent={content.typeContent} />\n      case \"command\":\n        return <CommandPart typeContent={content.typeContent} />\n      default:\n        return <></>\n    }\n  }, [content.actionType, content.typeContent])\n\n  const handleActionTypeChange = useCallback(\n    (value: SelectValue) => {\n      let newTypeContent: MongoDbActionTypeContent =\n        MongoDbAggregateContentInitial\n      if (\n        selectedAction &&\n        cachedAction.resourceID === selectedAction.resourceID &&\n        (selectedAction.content as MongoDbAction<MongoDbActionTypeContent>)\n          .actionType === value\n      ) {\n        newTypeContent = (\n          selectedAction.content as MongoDbAction<MongoDbActionTypeContent>\n        )?.typeContent\n      } else {\n        switch (value) {\n          case \"aggregate\":\n            newTypeContent = MongoDbAggregateContentInitial\n            break\n          case \"bulkWrite\":\n            newTypeContent = MongoDbBulkWriteContentInitial\n            break\n          case \"count\":\n            newTypeContent = MongoDbCountContentInitial\n            break\n          case \"deleteMany\":\n            newTypeContent = MongoDbDeleteManyContentInitial\n            break\n          case \"deleteOne\":\n            newTypeContent = MongoDbDeleteOneContentInitial\n            break\n          case \"distinct\":\n            newTypeContent = MongoDbDistinctContentInitial\n            break\n          case \"find\":\n            newTypeContent = MongoDbFindContentInitial\n            break\n          case \"findOne\":\n            newTypeContent = MongoDbFindOneContentInitial\n            break\n          case \"findOneAndUpdate\":\n            newTypeContent = MongoDbFindOneAndUpdateContentInitial\n            break\n          case \"insertOne\":\n            newTypeContent = MongoDbInsertOneContentInitial\n            break\n          case \"insertMany\":\n            newTypeContent = MongoDbInsertManyContentInitial\n            break\n          case \"listCollections\":\n            newTypeContent = MongoDbListCollectionsContentInitial\n            break\n          case \"updateMany\":\n            newTypeContent = MongoDbUpdateManyContentInitial\n            break\n          case \"updateOne\":\n            newTypeContent = MongoDbUpdateOneContentInitial\n            break\n          case \"command\":\n            newTypeContent = MongoDbCommandContentInitial\n            break\n        }\n      }\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            actionType: value as MongoDbActionType,\n            typeContent: newTypeContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, dispatch, selectedAction],\n  )\n\n  const handleCollectionChange = useCallback(\n    (value: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            collection: value,\n          },\n        }),\n      )\n    },\n    [cachedAction, dispatch],\n  )\n\n  return (\n    <div css={actionItemContainer}>\n      <SingleTypeComponent\n        componentType=\"select\"\n        showSearch={true}\n        value={content.actionType}\n        onSelectedValueChange={handleActionTypeChange}\n        options={MongoDbActionList}\n        title={t(\"editor.action.panel.mongodb.action_type\")}\n      />\n      {cachedAction.content.actionType !== \"command\" &&\n        cachedAction.content.actionType !== \"listCollections\" && (\n          <InputEditor\n            value={content.collection}\n            title={t(\"editor.action.panel.mongodb.collection\")}\n            onChange={handleCollectionChange}\n            mode={CODE_LANG.JAVASCRIPT}\n            expectedType={VALIDATION_TYPES.STRING}\n          />\n        )}\n      {renderInputBody}\n      <TransformerComponent />\n    </div>\n  )\n}\n\nMongoDbPanel.displayName = \"MongoDbPanel\"\nexport default MongoDbPanel\n"],"names":["AggregatePart","props","t","useTranslation","dispatch","useDispatch","cachedAction","useSelector","getCachedAction","typeContent","handleValueChange","useCallback","name","value","configActions","jsxs","Fragment","jsx","InputEditor","VALIDATION_TYPES","CODE_LANG","CODE_TYPE","BulkWritePart","CommandPart","CountPart","DeleteManyPart","DeleteOnePart","DistinctPart","FindOneAndUpdatePart","FindOnePart","FindPart","InsertManyPart","InsertOnePart","UpdateManyPart","UpdateOnePart","ListCollectionsPart","css","getColor","actionItemContainer","MongoDbActionList","MongoDbPanel","selectedAction","getSelectedAction","content","renderInputBody","useMemo","handleActionTypeChange","newTypeContent","MongoDbAggregateContentInitial","_a","MongoDbBulkWriteContentInitial","MongoDbCountContentInitial","MongoDbDeleteManyContentInitial","MongoDbDeleteOneContentInitial","MongoDbDistinctContentInitial","MongoDbFindContentInitial","MongoDbFindOneContentInitial","MongoDbFindOneAndUpdateContentInitial","MongoDbInsertOneContentInitial","MongoDbInsertManyContentInitial","MongoDbListCollectionsContentInitial","MongoDbUpdateManyContentInitial","MongoDbUpdateOneContentInitial","MongoDbCommandContentInitial","handleCollectionChange","SingleTypeComponent","TransformerComponent"],"mappings":"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"}