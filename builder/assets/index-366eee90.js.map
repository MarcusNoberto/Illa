{"version":3,"file":"index-366eee90.js","sources":["../../../../packages/illa-public-component/ResourceGenerator/components/ConfigElements/ClickhouseConfigElement/index.tsx"],"sourcesContent":["import { ClickhouseResourceInitial } from \"@illa-public/public-configs\"\nimport { ClickhouseResource } from \"@illa-public/public-types\"\nimport { TextLink } from \"@illa-public/text-link\"\nimport { isCloudVersion } from \"@illa-public/utils\"\nimport { FC, useCallback, useContext, useState } from \"react\"\nimport { useFormContext } from \"react-hook-form\"\nimport { Trans, useTranslation } from \"react-i18next\"\nimport { Alert, Divider, WarningCircleIcon, getColor } from \"@illa-design/react\"\nimport { ResourceGeneratorContext } from \"../../../provider\"\nimport {\n  isContainLocalPath,\n  urlValidate,\n  validateNotEmpty,\n} from \"../../../utils\"\nimport { ControlledElement } from \"../../ControlledElement\"\nimport { BaseConfigElementProps } from \"../interface\"\nimport {\n  applyConfigItemLabelText,\n  configItemTip,\n  connectType,\n  connectTypeStyle,\n  container,\n  errorIconStyle,\n  errorMsgStyle,\n  labelContainer,\n  optionLabelStyle,\n} from \"../style\"\n\nconst ClickhouseConfigElement: FC<BaseConfigElementProps> = (props) => {\n  const { resourceID } = props\n\n  const { t } = useTranslation()\n  const { control, formState, watch } = useFormContext()\n  const { getResourceByID } = useContext(ResourceGeneratorContext)\n  const findResource = getResourceByID(resourceID)\n\n  const content = (findResource?.content ??\n    ClickhouseResourceInitial) as ClickhouseResource\n\n  const [showAlert, setShowAlert] = useState<boolean>(false)\n\n  const sslOpen = watch(\"ssl\", content.ssl.ssl)\n  const selfSigned = sslOpen && watch(\"selfSigned\", content.ssl.selfSigned)\n\n  const handleDocLinkClick = () => {\n    window.open(\"https://www.illacloud.com/docs/illa-cli\", \"_blank\")\n  }\n\n  const handleHostValidate = useCallback(\n    (value: string) => {\n      const isShowAlert = isContainLocalPath(value ?? \"\")\n      if (isShowAlert !== showAlert) {\n        setShowAlert(isShowAlert)\n      }\n      return urlValidate(value)\n    },\n    [showAlert],\n  )\n\n  return (\n    <>\n      <div css={container}>\n        <ControlledElement\n          controlledType=\"input\"\n          isRequired\n          title={t(\"editor.action.resource.db.label.name\")}\n          control={control}\n          defaultValue={findResource?.resourceName ?? \"\"}\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          placeholders={[t(\"editor.action.resource.db.placeholder.name\")]}\n          name=\"resourceName\"\n          tips={t(\"editor.action.resource.restapi.tip.name\")}\n        />\n        <Divider\n          direction=\"horizontal\"\n          ml=\"24px\"\n          mr=\"24px\"\n          mt=\"8px\"\n          mb=\"8px\"\n          w=\"unset\"\n        />\n        <div css={optionLabelStyle}>\n          {t(\"editor.action.resource.db.title.general_option\")}\n        </div>\n        <ControlledElement\n          controlledType={[\"input\", \"number\"]}\n          isRequired\n          title={t(\"editor.action.resource.db.label.hostname_port\")}\n          control={control}\n          defaultValue={[content.host, content.port]}\n          rules={[\n            {\n              required: t(\"editor.action.resource.error.invalid_url\"),\n              validate: handleHostValidate,\n            },\n            {\n              required: true,\n            },\n          ]}\n          placeholders={[\n            t(\"editor.action.resource.db.placeholder.hostname\"),\n            \"9440\",\n          ]}\n          name={[\"host\", \"port\"]}\n          styles={[\n            {},\n            {\n              w: \"142px\",\n              ml: \"8px\",\n            },\n          ]}\n          tips={\n            formState.errors.host && !showAlert ? (\n              <div css={errorMsgStyle}>\n                <WarningCircleIcon css={errorIconStyle} />\n                <>{formState.errors.host.message}</>\n              </div>\n            ) : null\n          }\n        />\n        {showAlert && (\n          <ControlledElement\n            defaultValue=\"\"\n            name=\"\"\n            title=\"\"\n            controlledType=\"none\"\n            control={control}\n            tips={\n              <Alert\n                title={t(\"editor.action.form.tips.connect_to_local.title.tips\")}\n                closable={false}\n                content={\n                  isCloudVersion ? (\n                    <Trans\n                      i18nKey=\"editor.action.form.tips.connect_to_local.cloud\"\n                      t={t}\n                      components={[\n                        <TextLink\n                          key=\"editor.action.form.tips.connect_to_local.cloud\"\n                          onClick={handleDocLinkClick}\n                        />,\n                      ]}\n                    />\n                  ) : (\n                    t(\"editor.action.form.tips.connect_to_local.selfhost\")\n                  )\n                }\n              />\n            }\n          />\n        )}\n        <ControlledElement\n          controlledType={[\"input\"]}\n          isRequired\n          title={t(\"editor.action.resource.db.label.database\")}\n          control={control}\n          defaultValue={content.databaseName}\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          placeholders={[t(\"editor.action.resource.db.placeholder.default\")]}\n          name=\"databaseName\"\n        />\n\n        <ControlledElement\n          controlledType={[\"input\", \"password\"]}\n          title={t(\"editor.action.resource.db.label.username_password\")}\n          control={control}\n          defaultValue={[content.username, content.password]}\n          placeholders={[\n            t(\"editor.action.resource.db.placeholder.username\"),\n            t(\"editor.action.resource.db.placeholder.password\"),\n          ]}\n          name={[\"username\", \"password\"]}\n          styles={[\n            {},\n            {\n              ml: \"8px\",\n            },\n          ]}\n        />\n\n        {isCloudVersion && (\n          <>\n            <div css={configItemTip}>\n              {t(\"editor.action.resource.db.tip.username_password\")}\n            </div>\n            <div css={connectType}>\n              <div css={labelContainer}>\n                <span\n                  css={applyConfigItemLabelText(getColor(\"grayBlue\", \"02\"))}\n                >\n                  {t(\"editor.action.resource.db.label.connect_type\")}\n                </span>\n              </div>\n              <span css={connectTypeStyle}>\n                {t(\"editor.action.resource.db.tip.connect_type\")}\n              </span>\n            </div>\n          </>\n        )}\n        <Divider\n          direction=\"horizontal\"\n          ml=\"24px\"\n          mr=\"24px\"\n          mt=\"8px\"\n          mb=\"8px\"\n          w=\"unset\"\n        />\n        <div css={optionLabelStyle}>\n          {t(\"editor.action.resource.db.title.advanced_option\")}\n        </div>\n\n        <ControlledElement\n          controlledType={[\"switch\"]}\n          title={t(\"editor.action.resource.db.label.ssl_options\")}\n          control={control}\n          defaultValue={content.ssl.ssl}\n          name=\"ssl\"\n          contentLabel={t(\"editor.action.resource.db.tip.ssl_options\")}\n          tips={t(\"editor.action.form.tips.clickhouse.ssl\")}\n        />\n\n        {sslOpen && (\n          <ControlledElement\n            controlledType={[\"switch\"]}\n            title={\"\"}\n            control={control}\n            defaultValue={content.ssl.selfSigned}\n            name=\"selfSigned\"\n            contentLabel={t(\n              \"editor.action.resource.db.label.self_signed_certificate\",\n            )}\n          />\n        )}\n        {selfSigned && (\n          <>\n            <ControlledElement\n              controlledType={[\"textarea\"]}\n              title={t(\"editor.action.resource.db.label.ca_certificate\")}\n              isRequired\n              rules={[\n                {\n                  validate: validateNotEmpty,\n                },\n              ]}\n              control={control}\n              defaultValue={content.ssl.caCert}\n              name=\"caCert\"\n              placeholders={[\n                t(\"editor.action.resource.db.placeholder.certificate\"),\n              ]}\n            />\n            <ControlledElement\n              controlledType={[\"textarea\"]}\n              title={t(\"editor.action.resource.db.label.client_key\")}\n              control={control}\n              defaultValue={content.ssl.privateKey}\n              name=\"privateKey\"\n              placeholders={[\n                t(\"editor.action.resource.db.placeholder.certificate\"),\n              ]}\n            />\n            <ControlledElement\n              controlledType={[\"textarea\"]}\n              title={t(\"editor.action.resource.db.label.client_certificate\")}\n              control={control}\n              defaultValue={content.ssl.clientCert}\n              name=\"clientCert\"\n              placeholders={[\n                t(\"editor.action.resource.db.placeholder.certificate\"),\n              ]}\n            />\n          </>\n        )}\n      </div>\n    </>\n  )\n}\n\nClickhouseConfigElement.displayName = \"ClickhouseConfigElement\"\nexport default ClickhouseConfigElement\n"],"names":["ClickhouseConfigElement","props","resourceID","t","useTranslation","control","formState","watch","useFormContext","getResourceByID","useContext","ResourceGeneratorContext","findResource","content","ClickhouseResourceInitial","showAlert","setShowAlert","useState","sslOpen","selfSigned","handleHostValidate","useCallback","value","isShowAlert","isContainLocalPath","urlValidate","jsx","Fragment","jsxs","container","ControlledElement","validateNotEmpty","Divider","optionLabelStyle","errorMsgStyle","WarningCircleIcon","errorIconStyle","Alert","isCloudVersion"],"mappings":"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"}