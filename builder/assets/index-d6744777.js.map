{"version":3,"file":"index-d6744777.js","sources":["../../src/assets/no-component-selected-icon.svg?react","../../src/page/App/components/InspectPanel/components/EmptySelected/style.ts","../../src/page/App/components/InspectPanel/components/EmptySelected/index.tsx","../../src/page/App/components/InspectPanel/components/MultiSelectedPanel/style.ts","../../src/page/App/components/InspectPanel/components/MultiSelectedPanel/multiSelectedPanel.tsx","../../src/page/App/components/InspectPanel/components/ActionMenu/index.tsx","../../src/page/App/components/InspectPanel/components/Header/style.ts","../../src/page/App/components/InspectPanel/components/Header/index.tsx","../../src/page/App/components/InspectPanel/utils/panelBuilder.ts","../../src/page/App/components/InspectPanel/utils/fieldFactory.tsx","../../src/page/App/components/InspectPanel/components/Panelbar/style.ts","../../src/page/App/components/InspectPanel/components/Panelbar/index.tsx","../../src/page/App/components/InspectPanel/components/FieldFactory/index.tsx","../../src/page/App/components/InspectPanel/components/SingleSelectedPanel/style.ts","../../src/page/App/components/InspectPanel/components/SingleSelectedPanel/singleSelectedPanel.tsx","../../src/page/App/components/InspectPanel/index.tsx"],"sourcesContent":["import * as React from \"react\";\nconst SvgNoComponentSelectedIcon = (props) => /* @__PURE__ */ React.createElement(\"svg\", { width: 49, height: 49, viewBox: \"0 0 49 49\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"M28 34H14C12.8954 34 12 33.1046 12 32V12C12 10.8954 12.8954 10 14 10H22H26H34C35.1046 10 36 10.8954 36 12V26\", stroke: \"#A9AEB8\", strokeWidth: 1.5, strokeLinecap: \"round\" }), /* @__PURE__ */ React.createElement(\"path\", { d: \"M33 12H25.6667H22.3333H15C14.4477 12 14 12.4477 14 13V31C14 31.5523 14.4477 32 15 32H27.3333H33C33.5523 32 34 31.5523 34 31V25.3333V13C34 12.4477 33.5523 12 33 12Z\", fill: \"#F2F3F5\" }), /* @__PURE__ */ React.createElement(\"path\", { d: \"M35.9759 35.3987L34.0592 40.3089L30.9961 29.464L41.1443 34.3638L35.9759 35.3987Z\", fill: \"white\", stroke: \"#A9AEB8\", strokeWidth: 1.5, strokeLinecap: \"round\", strokeLinejoin: \"round\" }));\nexport default SvgNoComponentSelectedIcon;\n","import { css } from \"@emotion/react\"\n\nexport const unselectedTipWrapperStyle = css`\n  width: 100%;\n  height: 319px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const unselectedTipIconStyle = css`\n  font-size: 30px;\n`\n\nexport const unselectedTipTextStyle = css`\n  margin-top: 4px;\n`\n","import { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { Empty } from \"@illa-design/react\"\nimport NoComponentSelected from \"@/assets/no-component-selected-icon.svg?react\"\nimport {\n  unselectedTipIconStyle,\n  unselectedTipTextStyle,\n  unselectedTipWrapperStyle,\n} from \"./style\"\n\nexport const EmptySelected: FC = () => {\n  const { t } = useTranslation()\n  return (\n    <div css={unselectedTipWrapperStyle}>\n      <Empty\n        icon={\n          <div css={unselectedTipIconStyle}>\n            <NoComponentSelected />\n          </div>\n        }\n        description={\n          <>\n            <div css={unselectedTipTextStyle}>\n              {t(\"editor.inspect.unselected_tip1\")}\n            </div>\n            <div css={unselectedTipTextStyle}>\n              {t(\"editor.inspect.unselected_tip2\")}\n            </div>\n          </>\n        }\n      />\n    </div>\n  )\n}\n\nEmptySelected.displayName = \"EmptySelected\"\n","import { css } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/react\"\n\nexport const multiSelectedPanelWrapper = css`\n  padding: 0 16px;\n  width: 100%;\n  font-size: 14px;\n  height: calc(100% - 1px);\n  display: flex;\n  flex-direction: column;\n  padding-bottom: 8px;\n`\n\nexport const formHeaderStyle = css`\n  height: 48px;\n  display: flex;\n  align-items: center;\n  color: ${getColor(\"grayBlue\", \"02\")};\n  font-weight: 600;\n  flex: none;\n`\n\nexport const formContentStyle = css`\n  overflow: auto;\n  width: 100%;\n  margin-bottom: 16px;\n  border: 1px solid ${getColor(\"grayBlue\", \"08\")};\n  padding: 8px 16px;\n  border-radius: 8px;\n`\n\nexport const formContentItemStyle = css`\n  :not(:nth-of-type(1)) {\n    margin-top: 8px;\n  }\n  line-height: 22px;\n  color: ${getColor(\"grayBlue\", \"02\")};\n`\n","import { FC, useContext } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useSelector } from \"react-redux\"\nimport { Button } from \"@illa-design/react\"\nimport { getSelectedComponentDisplayNames } from \"@/redux/config/configSelector\"\nimport { ShortCutContext } from \"@/utils/shortcut/shortcutProvider\"\nimport {\n  formContentItemStyle,\n  formContentStyle,\n  formHeaderStyle,\n  multiSelectedPanelWrapper,\n} from \"./style\"\n\nconst MultiSelectedPanel: FC = () => {\n  const selectedComponents = useSelector(getSelectedComponentDisplayNames)\n  const { t } = useTranslation()\n  const shortcut = useContext(ShortCutContext)\n\n  const handleClickDeleteButton = () => {\n    shortcut.showDeleteDialog(selectedComponents, \"widget\", {\n      source: \"left_multi_delete\",\n    })\n  }\n\n  return (\n    <div css={multiSelectedPanelWrapper}>\n      <div css={formHeaderStyle}>\n        {t(\"editor.inspect.multi_selected_header\", {\n          number: selectedComponents.length,\n        })}\n      </div>\n      <div css={formContentStyle}>\n        {selectedComponents.map((displayName) => {\n          return (\n            <div key={displayName} css={formContentItemStyle}>\n              {displayName}\n            </div>\n          )\n        })}\n      </div>\n      <Button\n        fullWidth\n        size=\"medium\"\n        colorScheme=\"red\"\n        variant=\"light\"\n        onClick={handleClickDeleteButton}\n      >\n        {t(\"editor.component.delete\")}\n      </Button>\n    </div>\n  )\n}\n\nMultiSelectedPanel.displayName = \"MultiSelectedPanel\"\nexport default MultiSelectedPanel\n","import { FC, useCallback, useContext } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch } from \"react-redux\"\nimport { DropList, DropListItem } from \"@illa-design/react\"\nimport { componentsActions } from \"@/redux/currentApp/components/componentsSlice\"\nimport { ShortCutContext } from \"@/utils/shortcut/shortcutProvider\"\nimport { widgetBuilder } from \"@/widgetLibrary/widgetBuilder\"\nimport { PanelHeaderActionProps } from \"./interface\"\n\nexport const ActionMenu: FC<PanelHeaderActionProps> = (props) => {\n  const { widgetDisplayName, componentType } = props\n  const { t } = useTranslation()\n\n  const dispatch = useDispatch()\n\n  const shortcut = useContext(ShortCutContext)\n\n  const handleClickDropListItem = useCallback(() => {\n    const defaults = widgetBuilder(componentType)?.config?.defaults\n    if (!widgetDisplayName) return\n    let defaultProps: unknown = defaults\n    if (typeof defaults === \"function\") {\n      defaultProps = defaults()\n    }\n    if (typeof defaultProps !== \"object\") return\n\n    dispatch(\n      componentsActions.updateComponentPropsReducer({\n        displayName: widgetDisplayName,\n        updateSlice: (defaultProps as Record<string, unknown>) || {},\n      }),\n    )\n  }, [componentType, dispatch, widgetDisplayName])\n\n  return (\n    <DropList w=\"184px\">\n      <DropListItem\n        value=\"reset\"\n        key=\"reset\"\n        title={t(\"editor.inspect.header.action_menu.reset_state\")}\n        onClick={handleClickDropListItem}\n      />\n      <DropListItem\n        key=\"delete\"\n        value=\"delete\"\n        title={t(\"editor.inspect.header.action_menu.delete\")}\n        deleted\n        onClick={() => {\n          shortcut.showDeleteDialog([widgetDisplayName], \"widget\", {\n            source: \"left_delete\",\n          })\n        }}\n      />\n    </DropList>\n  )\n}\n\nActionMenu.displayName = \"ActionMenu\"\n","import { css } from \"@emotion/react\"\n\nexport const panelHeaderWrapperStyle = css`\n  display: flex;\n  width: 100%;\n  height: 48px;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 16px;\n`\n\nexport const panelHeaderIconWrapperStyle = css`\n  margin-left: 16px;\n  cursor: pointer;\n  gap: 8px;\n  display: flex;\n`\n","import IconHotSpot from \"@illa-public/icon-hot-spot\"\nimport { ILLA_MIXPANEL_EVENT_TYPE } from \"@illa-public/mixpanel-utils\"\nimport { getDocLink } from \"@illa-public/public-configs\"\nimport { FC, useCallback, useContext } from \"react\"\nimport { useDispatch } from \"react-redux\"\nimport { Link } from \"react-router-dom\"\nimport { DocsIcon, Dropdown, MoreIcon } from \"@illa-design/react\"\nimport { EditableText } from \"@/components/EditableText\"\nimport { SelectedPanelContext } from \"@/page/App/components/InspectPanel/context/selectedContext\"\nimport { componentsActions } from \"@/redux/currentApp/components/componentsSlice\"\nimport { trackInEditor } from \"@/utils/mixpanelHelper\"\nimport { ActionMenu } from \"../ActionMenu\"\nimport { panelHeaderIconWrapperStyle, panelHeaderWrapperStyle } from \"./style\"\n\nexport const PanelHeader: FC = () => {\n  const { widgetDisplayName, widgetType } = useContext(SelectedPanelContext)\n  const dispatch = useDispatch()\n  const docLink = getDocLink(\"widget\", widgetType)\n\n  const handleUpdateDisplayNameByBlur = useCallback(\n    (newDisplayName: string) => {\n      dispatch(\n        componentsActions.updateComponentDisplayNameReducer({\n          displayName: widgetDisplayName,\n          newDisplayName,\n        }),\n      )\n    },\n    [dispatch, widgetDisplayName],\n  )\n\n  const onMouseHoverRename = useCallback(() => {\n    trackInEditor(ILLA_MIXPANEL_EVENT_TYPE.HOVER, {\n      element: \"component_rename\",\n      parameter1: widgetType,\n    })\n  }, [widgetType])\n\n  const onMouseClickOnRename = useCallback(() => {\n    trackInEditor(ILLA_MIXPANEL_EVENT_TYPE.CLICK, {\n      element: \"component_rename\",\n      parameter1: widgetType,\n    })\n  }, [widgetType])\n\n  const onBlurOnRename = useCallback(\n    (value: string) => {\n      trackInEditor(ILLA_MIXPANEL_EVENT_TYPE.BLUR, {\n        element: \"component_rename\",\n        parameter1: widgetType,\n        parameter3: value.length,\n      })\n    },\n    [widgetType],\n  )\n\n  const onValidateOnRename = useCallback(\n    (result: \"suc\" | \"failed\") => {\n      trackInEditor(ILLA_MIXPANEL_EVENT_TYPE.VALIDATE, {\n        element: \"component_rename\",\n        parameter1: widgetType,\n        parameter3: result,\n      })\n    },\n    [widgetType],\n  )\n\n  return (\n    <div css={panelHeaderWrapperStyle}>\n      <EditableText\n        key={widgetDisplayName}\n        displayName={widgetDisplayName}\n        updateDisplayNameByBlur={handleUpdateDisplayNameByBlur}\n        onMouseEnter={onMouseHoverRename}\n        onClick={onMouseClickOnRename}\n        onBlur={onBlurOnRename}\n        onValidate={onValidateOnRename}\n      />\n      <div css={panelHeaderIconWrapperStyle}>\n        {docLink && (\n          <Link to={docLink} target=\"_blank\">\n            <IconHotSpot>\n              <DocsIcon />\n            </IconHotSpot>\n          </Link>\n        )}\n        <Dropdown\n          position=\"bottom-end\"\n          trigger=\"click\"\n          dropList={\n            <ActionMenu\n              widgetDisplayName={widgetDisplayName}\n              componentType={widgetType}\n            />\n          }\n          onVisibleChange={(visible) => {\n            if (visible) {\n              trackInEditor(ILLA_MIXPANEL_EVENT_TYPE.SHOW, {\n                element: \"component_management_left\",\n                parameter1: widgetType,\n              })\n            }\n          }}\n        >\n          <IconHotSpot>\n            <MoreIcon />\n          </IconHotSpot>\n        </Dropdown>\n      </div>\n    </div>\n  )\n}\n\nPanelHeader.displayName = \"PanelHeader\"\n","import { PanelConfig } from \"@/page/App/components/InspectPanel/interface\"\nimport { WidgetType, widgetBuilder } from \"@/widgetLibrary/widgetBuilder\"\n\nexport const panelBuilder = (type: WidgetType): PanelConfig[] | null => {\n  if (!type) return null\n  if (!widgetBuilder(type)) return null\n  return widgetBuilder(type).panelConfig\n}\n","import { get } from \"lodash-es\"\nimport { PanelFieldConfig } from \"@/page/App/components/InspectPanel/interface\"\n\nexport const canRenderField = (\n  item: PanelFieldConfig,\n  widgetProps: Record<string, any>,\n) => {\n  const { bindAttrName, shown } = item\n  if (!bindAttrName || !shown) return true\n  if (Array.isArray(bindAttrName)) {\n    const values = bindAttrName.map((bindAttrNameItem) =>\n      get(widgetProps, bindAttrNameItem),\n    )\n    return shown(...values)\n  }\n\n  return true\n}\n","import { css } from \"@emotion/react\"\n\nexport const ghostEmptyStyle = css`\n  padding-bottom: 8px;\n`\n","import { FC } from \"react\"\nimport { PanelBar } from \"@/components/PanelBar\"\nimport FieldFactory from \"../FieldFactory\"\nimport { RenderPanelBarProps } from \"./interface\"\nimport { ghostEmptyStyle } from \"./style\"\n\nconst RenderPanelBar: FC<RenderPanelBarProps> = (props) => {\n  const { config, displayName, widgetProps } = props\n  const { groupName, children } = config\n\n  return (\n    <PanelBar title={groupName}>\n      {children && children.length > 0 && (\n        <div css={ghostEmptyStyle}>\n          <FieldFactory\n            panelConfig={children}\n            displayName={displayName}\n            widgetProps={widgetProps}\n          />\n        </div>\n      )}\n    </PanelBar>\n  )\n}\n\nRenderPanelBar.displayName = \"RenderPanelBar\"\n\nexport default RenderPanelBar\n","import { FC } from \"react\"\nimport {\n  PanelConfig,\n  PanelFieldConfig,\n  PanelFieldGroupConfig,\n} from \"@/page/App/components/InspectPanel/interface\"\nimport { canRenderField } from \"@/page/App/components/InspectPanel/utils/fieldFactory\"\nimport RenderFieldAndLabel from \"../FieldAndLabel\"\nimport RenderPanelBar from \"../Panelbar\"\nimport { FieldFactoryProps } from \"./interface\"\n\nconst FieldFactory: FC<FieldFactoryProps> = (props) => {\n  const { panelConfig, displayName, widgetProps } = props\n\n  if (!displayName || !panelConfig || !panelConfig.length) return null\n  return (\n    <>\n      {panelConfig.map((item: PanelConfig) => {\n        const canRender = canRenderField(item as PanelFieldConfig, widgetProps)\n\n        if (!canRender) return null\n        const { id } = item as PanelFieldGroupConfig\n\n        const key = `${id}-${displayName}`\n\n        if ((item as PanelFieldGroupConfig).groupName) {\n          return (\n            <RenderPanelBar\n              key={key}\n              config={item as PanelFieldGroupConfig}\n              displayName={displayName}\n              widgetProps={widgetProps}\n            />\n          )\n        } else if ((item as PanelFieldConfig).setterType) {\n          return (\n            <RenderFieldAndLabel\n              key={key}\n              config={item as PanelFieldConfig}\n              displayName={displayName}\n              parentAttrName=\"\"\n            />\n          )\n        }\n\n        return null\n      })}\n    </>\n  )\n}\n\nFieldFactory.displayName = \"FieldFactory\"\n\nexport default FieldFactory\n","import { css } from \"@emotion/react\"\n\nexport const singleSelectedPanelWrapperStyle = css`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`\n\nexport const singleSelectedPanelSetterWrapperStyle = css`\n  height: 100%;\n  overflow-y: auto;\n`\n","import { FC, memo, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { Alert, Divider } from \"@illa-design/react\"\nimport { PanelHeader } from \"@/page/App/components/InspectPanel/components/Header\"\nimport { SelectedProvider } from \"@/page/App/components/InspectPanel/context/selectedContext\"\nimport { panelBuilder } from \"@/page/App/components/InspectPanel/utils/panelBuilder\"\nimport { getComponentNodeBySingleSelected } from \"@/redux/currentApp/components/componentsSelector\"\nimport { componentsActions } from \"@/redux/currentApp/components/componentsSlice\"\nimport { executionActions } from \"@/redux/currentApp/executionTree/executionSlice\"\nimport { isObject } from \"@/utils/typeHelper\"\nimport FieldFactory from \"../FieldFactory\"\nimport {\n  singleSelectedPanelSetterWrapperStyle,\n  singleSelectedPanelWrapperStyle,\n} from \"./style\"\n\nconst SingleSelectedPanel: FC = () => {\n  const dispatch = useDispatch()\n  const { t } = useTranslation()\n  const singleSelectedComponentNode = useSelector(\n    getComponentNodeBySingleSelected,\n  )\n\n  const widgetType = singleSelectedComponentNode?.type || \"\"\n\n  const widgetDisplayName = singleSelectedComponentNode?.displayName || \"\"\n\n  const widgetParentDisplayName = singleSelectedComponentNode?.parentNode || \"\"\n\n  const widgetProps = singleSelectedComponentNode?.props || {}\n\n  const handleUpdateDsl = useCallback(\n    (attrPath: string, value: unknown) => {\n      const updateSlice = { [attrPath]: value }\n      dispatch(\n        componentsActions.updateComponentPropsReducer({\n          displayName: widgetDisplayName,\n          updateSlice,\n        }),\n      )\n    },\n    [dispatch, widgetDisplayName],\n  )\n\n  const handleUpdateMultiAttrDSL = useCallback(\n    (updateSlice: Record<string, unknown>) => {\n      if (!isObject(updateSlice)) return\n      dispatch(\n        componentsActions.updateComponentPropsReducer({\n          displayName: widgetDisplayName,\n          updateSlice,\n        }),\n      )\n    },\n    [dispatch, widgetDisplayName],\n  )\n\n  const handleUpdateOtherMultiAttrDSL = useCallback(\n    (displayName: string, updateSlice: Record<string, any>) => {\n      if (!displayName || !isObject(updateSlice)) return\n      dispatch(\n        componentsActions.updateComponentPropsReducer({\n          displayName,\n          updateSlice,\n        }),\n      )\n    },\n    [dispatch],\n  )\n\n  const handleUpdateExecutionResult = useCallback(\n    (displayName: string, updateSlice: Record<string, unknown>) => {\n      if (!isObject(updateSlice)) return\n      dispatch(\n        executionActions.updateExecutionByDisplayNameReducer({\n          displayName,\n          value: updateSlice,\n        }),\n      )\n    },\n    [dispatch],\n  )\n\n  const builderPanelConfig = panelBuilder(widgetType)\n\n  return (\n    builderPanelConfig && (\n      <SelectedProvider\n        widgetType={widgetType}\n        widgetDisplayName={widgetDisplayName}\n        widgetParentDisplayName={widgetParentDisplayName}\n        widgetProps={widgetProps}\n        handleUpdateDsl={handleUpdateDsl}\n        handleUpdateMultiAttrDSL={handleUpdateMultiAttrDSL}\n        handleUpdateOtherMultiAttrDSL={handleUpdateOtherMultiAttrDSL}\n        handleUpdateExecutionResult={handleUpdateExecutionResult}\n        widgetOrAction=\"WIDGET\"\n      >\n        <div css={singleSelectedPanelWrapperStyle}>\n          <PanelHeader />\n          <Divider />\n          {widgetType === \"TABLE_WIDGET\" && (\n            <Alert\n              type=\"warning\"\n              title={t(\"editor.inspect.setter_tips.table_update_title\")}\n              content={t(\"editor.inspect.setter_tips.table_update_content\")}\n            />\n          )}\n          <div css={singleSelectedPanelSetterWrapperStyle}>\n            <FieldFactory\n              panelConfig={builderPanelConfig}\n              displayName={widgetDisplayName}\n              widgetProps={widgetProps}\n            />\n          </div>\n        </div>\n      </SelectedProvider>\n    )\n  )\n}\n\nSingleSelectedPanel.displayName = \"SingleSelectedPanel\"\nexport default memo(SingleSelectedPanel)\n","import { FC } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { getSelectedComponentDisplayNames } from \"@/redux/config/configSelector\"\nimport { EmptySelected } from \"./components/EmptySelected\"\nimport MultiSelectedPanel from \"./components/MultiSelectedPanel/multiSelectedPanel\"\nimport SingleSelectedPanel from \"./components/SingleSelectedPanel/singleSelectedPanel\"\n\nconst InspectPanel: FC = () => {\n  const selectedComponentsDisplayNames = useSelector(\n    getSelectedComponentDisplayNames,\n  )\n\n  return selectedComponentsDisplayNames.length === 0 ? (\n    <EmptySelected />\n  ) : selectedComponentsDisplayNames.length > 1 ? (\n    <MultiSelectedPanel />\n  ) : (\n    <SingleSelectedPanel />\n  )\n}\n\nInspectPanel.displayName = \"InspectPanel\"\nexport default InspectPanel\n"],"names":["SvgNoComponentSelectedIcon","props","React.createElement","unselectedTipWrapperStyle","css","unselectedTipIconStyle","unselectedTipTextStyle","EmptySelected","t","useTranslation","jsx","Empty","NoComponentSelected","jsxs","Fragment","multiSelectedPanelWrapper","formHeaderStyle","getColor","formContentStyle","formContentItemStyle","MultiSelectedPanel","selectedComponents","useSelector","getSelectedComponentDisplayNames","shortcut","useContext","ShortCutContext","handleClickDeleteButton","displayName","Button","ActionMenu","widgetDisplayName","componentType","dispatch","useDispatch","handleClickDropListItem","useCallback","defaults","_b","_a","widgetBuilder","defaultProps","componentsActions","DropList","DropListItem","panelHeaderWrapperStyle","panelHeaderIconWrapperStyle","PanelHeader","widgetType","SelectedPanelContext","docLink","getDocLink","handleUpdateDisplayNameByBlur","newDisplayName","onMouseHoverRename","trackInEditor","ILLA_MIXPANEL_EVENT_TYPE","onMouseClickOnRename","onBlurOnRename","value","onValidateOnRename","result","EditableText","Link","IconHotSpot","DocsIcon","Dropdown","visible","MoreIcon","panelBuilder","type","canRenderField","item","widgetProps","bindAttrName","shown","values","bindAttrNameItem","get","ghostEmptyStyle","RenderPanelBar","config","groupName","children","PanelBar","FieldFactory","panelConfig","id","key","RenderFieldAndLabel","singleSelectedPanelWrapperStyle","singleSelectedPanelSetterWrapperStyle","SingleSelectedPanel","singleSelectedComponentNode","getComponentNodeBySingleSelected","widgetParentDisplayName","handleUpdateDsl","attrPath","updateSlice","handleUpdateMultiAttrDSL","isObject","handleUpdateOtherMultiAttrDSL","handleUpdateExecutionResult","executionActions","builderPanelConfig","SelectedProvider","Divider","Alert","memo","InspectPanel","selectedComponentsDisplayNames"],"mappings":"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"}