{"version":3,"file":"index-968599f8.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/DataGridSetter/ColumnsSelectSetter/index.tsx"],"sourcesContent":["import { get } from \"lodash-es\"\nimport { FC, useMemo } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { SelectOptionObject } from \"@illa-design/react\"\nimport { dealRawData2ArrayData } from \"@/page/App/components/InspectPanel/PanelSetters/DataGridSetter/utils\"\nimport SearchSelectSetter from \"@/page/App/components/InspectPanel/PanelSetters/SelectSetter/searchSelect\"\nimport { getExecutionResult } from \"@/redux/currentApp/executionTree/executionSelector\"\nimport { RootState } from \"@/store\"\nimport { UNIQUE_ID_NAME } from \"@/widgetLibrary/DataGridWidget/constants\"\nimport { ColumnsSelectSetterProps } from \"./interface\"\n\nconst ColumnsSelectSetter: FC<ColumnsSelectSetterProps> = (props) => {\n  const {\n    widgetDisplayName,\n    attrName,\n    isSetterSingleRow,\n    widgetOrAction,\n    widgetType,\n    expectedType,\n    value,\n    handleUpdateMultiAttrDSL,\n    ...otherProps\n  } = props\n\n  const targetComponentProps = useSelector<RootState, Record<string, any>>(\n    (rootState) => {\n      const executionTree = getExecutionResult(rootState)\n      return get(executionTree, widgetDisplayName, {})\n    },\n  )\n\n  const options: SelectOptionObject[] = useMemo(() => {\n    const dataSourceMode = get(\n      targetComponentProps,\n      \"dataSourceMode\",\n      \"dynamic\",\n    )\n    const rawData = get(\n      targetComponentProps,\n      dataSourceMode === \"dynamic\" ? \"dataSourceJS\" : \"dataSource\",\n      undefined,\n    )\n\n    const arrayData: object[] = dealRawData2ArrayData(rawData)\n\n    const opt: SelectOptionObject[] = [\n      {\n        value: \"窶能",\n        label: \"窶能",\n      },\n    ]\n    if (arrayData.length > 0) {\n      Object.keys(arrayData[0]).map((key) => {\n        key !== UNIQUE_ID_NAME &&\n          opt.push({\n            value: key,\n            label: key,\n          })\n      })\n    }\n    return opt\n  }, [targetComponentProps])\n\n  return (\n    <SearchSelectSetter\n      {...otherProps}\n      isSetterSingleRow={isSetterSingleRow}\n      options={options}\n      attrName={attrName}\n      handleUpdateDsl={(attrName: string, newValue: any) => {\n        handleUpdateMultiAttrDSL?.({\n          [attrName]: newValue === \"窶能" ? undefined : newValue,\n        })\n      }}\n      value={value ?? \"窶能"}\n      expectedType={expectedType}\n      widgetDisplayName={widgetDisplayName}\n      widgetOrAction={widgetOrAction}\n      widgetType={widgetType}\n      allowClear={true}\n    />\n  )\n}\n\nColumnsSelectSetter.displayName = \"ColumnsSelectSetter\"\n\nexport default ColumnsSelectSetter\n"],"names":["ColumnsSelectSetter","props","widgetDisplayName","attrName","isSetterSingleRow","widgetOrAction","widgetType","expectedType","value","handleUpdateMultiAttrDSL","otherProps","targetComponentProps","useSelector","rootState","executionTree","getExecutionResult","get","options","useMemo","dataSourceMode","rawData","arrayData","dealRawData2ArrayData","opt","key","UNIQUE_ID_NAME","jsx","SearchSelectSetter","newValue"],"mappings":"mdAWM,MAAAA,EAAqDC,GAAU,CAC7D,KAAA,CACJ,kBAAAC,EACA,SAAAC,EACA,kBAAAC,EACA,eAAAC,EACA,WAAAC,EACA,aAAAC,EACA,MAAAC,EACA,yBAAAC,EACA,GAAGC,CACD,EAAAT,EAEEU,EAAuBC,EAC1BC,GAAc,CACP,MAAAC,EAAgBC,EAAmBF,CAAS,EAClD,OAAOG,EAAIF,EAAeZ,EAAmB,CAAE,CAAA,CACjD,CAAA,EAGIe,EAAgCC,EAAAA,QAAQ,IAAM,CAClD,MAAMC,EAAiBH,EACrBL,EACA,iBACA,SAAA,EAEIS,EAAUJ,EACdL,EACAQ,IAAmB,UAAY,eAAiB,aAChD,MAAA,EAGIE,EAAsBC,EAAsBF,CAAO,EAEnDG,EAA4B,CAChC,CACE,MAAO,IACP,MAAO,GACT,CAAA,EAEE,OAAAF,EAAU,OAAS,GACrB,OAAO,KAAKA,EAAU,CAAC,CAAC,EAAE,IAAKG,GAAQ,CAC7BA,IAAAC,GACNF,EAAI,KAAK,CACP,MAAOC,EACP,MAAOA,CAAA,CACR,CAAA,CACJ,EAEID,CAAA,EACN,CAACZ,CAAoB,CAAC,EAGvB,OAAAe,EAACC,EAAA,CACE,GAAGjB,EACJ,kBAAAN,EACA,QAAAa,EACA,SAAAd,EACA,gBAAiB,CAACA,EAAkByB,IAAkB,CACzBnB,GAAA,MAAAA,EAAA,CACzB,CAACN,CAAQ,EAAGyB,IAAa,IAAM,OAAYA,CAAA,EAE/C,EACA,MAAOpB,GAAS,IAChB,aAAAD,EACA,kBAAAL,EACA,eAAAG,EACA,WAAAC,EACA,WAAY,EAAA,CAAA,CAGlB,EAEAN,EAAoB,YAAc"}