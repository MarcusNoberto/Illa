{"version":3,"file":"index-f09bd3e5.js","sources":["../../../../packages/illa-public-component/ResourceGenerator/components/ConfigElements/S3ConfigElement/index.tsx"],"sourcesContent":["import { S3ResourceInitial } from \"@illa-public/public-configs\"\nimport { Resource, S3ACL, S3Resource } from \"@illa-public/public-types\"\nimport { TextLink } from \"@illa-public/text-link\"\nimport { isCloudVersion } from \"@illa-public/utils\"\nimport { FC, useContext } from \"react\"\nimport { useFormContext } from \"react-hook-form\"\nimport { Trans, useTranslation } from \"react-i18next\"\nimport { Divider, WarningCircleIcon, getColor } from \"@illa-design/react\"\nimport { ResourceGeneratorContext } from \"../../../provider\"\nimport { urlValidate, validateNotEmpty } from \"../../../utils\"\nimport { ControlledElement } from \"../../ControlledElement\"\nimport { BaseConfigElementProps } from \"../interface\"\nimport {\n  applyConfigItemLabelText,\n  configItemTip,\n  connectType,\n  connectTypeStyle,\n  container,\n  errorIconStyle,\n  errorMsgStyle,\n  labelContainer,\n  optionLabelStyle,\n} from \"../style\"\n\nconst S3ConfigElement: FC<BaseConfigElementProps> = (props) => {\n  const { resourceID } = props\n  const { t } = useTranslation()\n  const { control, formState, watch } = useFormContext()\n\n  const { getResourceByID } = useContext(ResourceGeneratorContext)\n  const findResource = getResourceByID(resourceID)\n\n  const SelectOptions = Object.keys(S3ACL).map((type) => ({\n    label: t(`editor.action.acl.option.${type}`),\n    value: S3ACL[type as keyof typeof S3ACL],\n  }))\n\n  let content: S3Resource\n  if (findResource === undefined) {\n    content = S3ResourceInitial\n  } else {\n    content = (findResource as Resource<S3Resource>).content\n  }\n\n  const baseURLOpen = watch(\"endpoint\", content.endpoint)\n  const aclDefaultValue = content.acl || t(\"editor.action.acl.option.blank\")\n\n  return (\n    <>\n      <div css={container}>\n        <ControlledElement\n          controlledType=\"input\"\n          isRequired\n          title={t(\"editor.action.resource.db.label.name\")}\n          control={control}\n          defaultValue={findResource?.resourceName ?? \"\"}\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          placeholders={[t(\"editor.action.resource.db.placeholder.name\")]}\n          name=\"resourceName\"\n          tips={t(\"editor.action.resource.restapi.tip.name\")}\n        />\n        <Divider\n          direction=\"horizontal\"\n          ml=\"24px\"\n          mr=\"24px\"\n          mt=\"8px\"\n          mb=\"8px\"\n          w=\"unset\"\n        />\n        <div css={optionLabelStyle}>\n          {t(\"editor.action.resource.db.title.general_option\")}\n        </div>\n        <ControlledElement\n          title={t(\"editor.action.resource.s3.label.bucket_name\")}\n          defaultValue={content.bucketName}\n          control={control}\n          name=\"bucketName\"\n          controlledType=\"input\"\n        />\n        <ControlledElement\n          title={t(\"editor.action.form.label.acl\")}\n          defaultValue={aclDefaultValue}\n          name=\"acl\"\n          controlledType=\"select\"\n          control={control}\n          options={SelectOptions}\n          tips={\n            <Trans\n              i18nKey=\"editor.action.form.tips.acl\"\n              t={t}\n              components={[\n                <TextLink\n                  key=\"editor.action.form.tips.acl\"\n                  onClick={() => {\n                    window.open(\n                      \"https://docs.aws.amazon.com/AmazonS3/latest/userguide/cors.html\",\n                      \"_blank\",\n                    )\n                  }}\n                />,\n              ]}\n            />\n          }\n        />\n        <ControlledElement\n          title={t(\"editor.action.resource.s3.label.region\")}\n          defaultValue={content.region}\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          controlledType=\"input\"\n          control={control}\n          isRequired\n          name=\"region\"\n          placeholders={[t(\"editor.action.resource.s3.placeholder.region\")]}\n        />\n        <ControlledElement\n          title={t(\"editor.action.resource.s3.label.custome_s3_endpoint\")}\n          control={control}\n          defaultValue={content.endpoint}\n          name=\"endpoint\"\n          controlledType=\"switch\"\n          contentLabel={t(\n            \"editor.action.resource.s3.label.use_custome_s3_endpoint\",\n          )}\n          tips={t(\"editor.action.resource.s3.tip.custome_s3_endpoint_tip\")}\n        />\n        {baseURLOpen && (\n          <ControlledElement\n            title={t(\"editor.action.resource.s3.label.base_url\")}\n            isRequired\n            defaultValue={content.baseURL}\n            control={control}\n            rules={[\n              {\n                required: t(\"editor.action.resource.error.invalid_url\"),\n                validate: urlValidate,\n              },\n            ]}\n            controlledType=\"input\"\n            placeholders={[t(\"editor.action.resource.s3.placeholder.base_url\")]}\n            name=\"baseURL\"\n            tips={\n              formState.errors.baseURL && (\n                <div css={errorMsgStyle}>\n                  <WarningCircleIcon css={errorIconStyle} />\n                  <>{formState.errors.baseURL.message}</>\n                </div>\n              )\n            }\n          />\n        )}\n        <ControlledElement\n          title={t(\"editor.action.resource.s3.label.access_key\")}\n          isRequired\n          defaultValue={content.accessKeyID}\n          control={control}\n          rules={[\n            {\n              validate: validateNotEmpty,\n            },\n          ]}\n          name=\"accessKeyID\"\n          controlledType=\"input\"\n          tips={\n            isCloudVersion &&\n            t(\"editor.action.resource.db.tip.username_password\")\n          }\n        />\n        <ControlledElement\n          title={t(\"editor.action.resource.s3.label.secret_access_key\")}\n          isRequired\n          defaultValue={content.secretAccessKey}\n          control={control}\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n          name=\"secretAccessKey\"\n          controlledType=\"password\"\n        />\n        {isCloudVersion && (\n          <>\n            <div css={configItemTip}>\n              {t(\"editor.action.resource.db.tip.username_password\")}\n            </div>\n            <div css={connectType}>\n              <div css={labelContainer}>\n                <span\n                  css={applyConfigItemLabelText(getColor(\"grayBlue\", \"02\"))}\n                >\n                  {t(\"editor.action.resource.db.label.connect_type\")}\n                </span>\n              </div>\n              <span css={connectTypeStyle}>\n                {t(\"editor.action.resource.db.tip.connect_type\")}\n              </span>\n            </div>\n          </>\n        )}\n      </div>\n    </>\n  )\n}\n\nS3ConfigElement.displayName = \"S3ConfigElement\"\nexport default S3ConfigElement\n"],"names":["S3ConfigElement","props","resourceID","t","useTranslation","control","formState","watch","useFormContext","getResourceByID","useContext","ResourceGeneratorContext","findResource","SelectOptions","S3ACL","type","content","S3ResourceInitial","baseURLOpen","aclDefaultValue","jsx","Fragment","jsxs","container","ControlledElement","validateNotEmpty","Divider","optionLabelStyle","Trans","TextLink","urlValidate","errorMsgStyle","WarningCircleIcon","errorIconStyle","isCloudVersion"],"mappings":"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"}