{"version":3,"file":"index-b5efce08.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/DataGridSetter/ColumnTypeSelectSetter/index.tsx"],"sourcesContent":["import { get } from \"lodash-es\"\nimport { FC } from \"react\"\nimport SearchSelectSetter from \"@/page/App/components/InspectPanel/PanelSetters/SelectSetter/searchSelect\"\nimport { ColumnTypeSelectSetterProps } from \"./interface\"\n\nconst ColumnTypeSelectSetter: FC<ColumnTypeSelectSetterProps> = (props) => {\n  const {\n    widgetDisplayName,\n    componentNode,\n    attrName,\n    parentAttrName,\n    isSetterSingleRow,\n    widgetOrAction,\n    widgetType,\n    expectedType,\n    value,\n    options,\n    handleUpdateMultiAttrDSL,\n    ...otherProps\n  } = props\n\n  return (\n    <SearchSelectSetter\n      {...otherProps}\n      isSetterSingleRow={isSetterSingleRow}\n      options={options}\n      attrName={attrName}\n      handleUpdateDsl={(attrName: string, newValue: any) => {\n        const match = attrName.match(/\\[([0-9]+)\\]/)\n        if (match && parentAttrName) {\n          const currentColumn = get(componentNode?.props, parentAttrName)\n          const columns = get(componentNode?.props, \"columns\")\n          const newColumns = [...columns]\n          newColumns[parseInt(match[1])] = {\n            field: currentColumn.field,\n            headerName: currentColumn.headerName,\n            width: currentColumn.width,\n            isCalc: currentColumn.isCalc,\n            description: currentColumn.description,\n            sortable: currentColumn.sortable,\n            pinnable: currentColumn.pinnable,\n            filterable: currentColumn.filterable,\n            hideable: currentColumn.hideable,\n            aggregable: currentColumn.aggregable,\n            groupable: currentColumn.groupable,\n            resizable: currentColumn.resizable,\n            columnType: newValue,\n            disableReorder: currentColumn.disableReorder,\n            headerAlign: currentColumn.headerAlign,\n          }\n          handleUpdateMultiAttrDSL?.({\n            columns: newColumns,\n          })\n        }\n      }}\n      value={value}\n      expectedType={expectedType}\n      widgetDisplayName={widgetDisplayName}\n      widgetOrAction={widgetOrAction}\n      widgetType={widgetType}\n      allowClear={true}\n    />\n  )\n}\n\nColumnTypeSelectSetter.displayName = \"ColumnTypeSelectSetter\"\n\nexport default ColumnTypeSelectSetter\n"],"names":["ColumnTypeSelectSetter","props","widgetDisplayName","componentNode","attrName","parentAttrName","isSetterSingleRow","widgetOrAction","widgetType","expectedType","value","options","handleUpdateMultiAttrDSL","otherProps","jsx","SearchSelectSetter","newValue","match","currentColumn","get","newColumns"],"mappings":"maAKM,MAAAA,EAA2DC,GAAU,CACnE,KAAA,CACJ,kBAAAC,EACA,cAAAC,EACA,SAAAC,EACA,eAAAC,EACA,kBAAAC,EACA,eAAAC,EACA,WAAAC,EACA,aAAAC,EACA,MAAAC,EACA,QAAAC,EACA,yBAAAC,EACA,GAAGC,CACD,EAAAZ,EAGF,OAAAa,EAACC,EAAA,CACE,GAAGF,EACJ,kBAAAP,EACA,QAAAK,EACA,SAAAP,EACA,gBAAiB,CAACA,EAAkBY,IAAkB,CAC9C,MAAAC,EAAQb,EAAS,MAAM,cAAc,EAC3C,GAAIa,GAASZ,EAAgB,CAC3B,MAAMa,EAAgBC,EAAIhB,GAAA,YAAAA,EAAe,MAAOE,CAAc,EAExDe,EAAa,CAAC,GADJD,EAAIhB,GAAA,YAAAA,EAAe,MAAO,SAAS,CACrB,EAC9BiB,EAAW,SAASH,EAAM,CAAC,CAAC,CAAC,EAAI,CAC/B,MAAOC,EAAc,MACrB,WAAYA,EAAc,WAC1B,MAAOA,EAAc,MACrB,OAAQA,EAAc,OACtB,YAAaA,EAAc,YAC3B,SAAUA,EAAc,SACxB,SAAUA,EAAc,SACxB,WAAYA,EAAc,WAC1B,SAAUA,EAAc,SACxB,WAAYA,EAAc,WAC1B,UAAWA,EAAc,UACzB,UAAWA,EAAc,UACzB,WAAYF,EACZ,eAAgBE,EAAc,eAC9B,YAAaA,EAAc,WAAA,EAEFN,GAAA,MAAAA,EAAA,CACzB,QAASQ,CAAA,EAEb,CACF,EACA,MAAAV,EACA,aAAAD,EACA,kBAAAP,EACA,eAAAK,EACA,WAAAC,EACA,WAAY,EAAA,CAAA,CAGlB,EAEAR,EAAuB,YAAc"}