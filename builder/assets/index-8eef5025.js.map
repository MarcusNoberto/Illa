{"version":3,"file":"index-8eef5025.js","sources":["../../../../packages/illa-public-component/LayoutAutoChange/index.tsx","../../src/page/AI/AIAgentRun/AIAgentRunMobile/style.ts","../../src/page/AI/AIAgentRun/AIAgentRunMobile/index.tsx","../../src/page/AI/AIAgentRun/AIAgentRunPC/style.ts","../../src/page/AI/AIAgentRun/AIAgentRunPC/index.tsx","../../src/page/AI/AIAgentRun/index.tsx"],"sourcesContent":["import { isMobileByWindowSize } from \"@illa-public/utils\"\nimport { FC, ReactNode } from \"react\"\nimport { useWindowSize } from \"react-use\"\n\ninterface LayoutAutoChangeProps {\n  desktopPage: ReactNode\n  mobilePage?: ReactNode\n}\n\nexport const LayoutAutoChange: FC<LayoutAutoChangeProps> = (props) => {\n  const { desktopPage, mobilePage } = props\n  const { width } = useWindowSize()\n  const isMobile = isMobileByWindowSize(width)\n  return <>{isMobile ? mobilePage : desktopPage}</>\n}\n","import { css } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/react\"\n\nexport const aiAgentContainerStyle = css`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n`\n\nexport const buttonContainerStyle = css`\n  padding: 24px;\n  border-top: 1px solid ${getColor(\"grayBlue\", \"08\")};\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`\n\nexport const readOnlyTextStyle = css`\n  color: ${getColor(\"grayBlue\", \"02\")};\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 22px;\n`\n\nexport const labelLogoStyle = css`\n  font-size: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 16px;\n  height: 16px;\n\n  & svg {\n    height: 100%;\n    width: 100%;\n  }\n`\n\nexport const labelStyle = css`\n  display: flex;\n  width: 100%;\n  gap: 4px;\n  flex-direction: row;\n  align-items: center;\n`\n\nexport const headerInfoStyle = css`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding-top: 12px;\n  padding-left: 20px;\n  padding-right: 20px;\n`\n\nexport const headerContainerStyle = css`\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.08);\n`\n\nexport const previewChatContainer = css`\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n`\n\nexport const agentIconStyle = css`\n  width: 40px;\n  margin-right: 12px;\n  height: 40px;\n  border-radius: 8px;\n`\nexport const shareContainerStyle = css`\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin-left: 6px;\n  width: 40px;\n  height: 40px;\n  flex-shrink: 0;\n`\n\nexport const menuContainerStyle = css`\n  display: flex;\n  padding-right: 16px;\n  padding-top: 12px;\n  align-items: center;\n  padding-bottom: 12px;\n  flex-direction: row;\n`\n\nexport const agentContentContainerStyle = css`\n  display: flex;\n  flex-direction: column;\n  overflow-x: hidden;\n  flex-grow: 1;\n  flex-shrink: 1;\n`\n\nexport const agentMarketContainerStyle = css`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-top: 4px;\n`\n\nexport const agentTeamNameStyle = css`\n  color: ${getColor(\"grayBlue\", \"02\")};\n  font-size: 12px;\n  font-style: normal;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  flex-shrink: 1;\n  font-weight: 400;\n  line-height: 15px;\n`\n\nexport const agentNameStyle = css`\n  font-size: 14px;\n  text-overflow: ellipsis;\n  overflow-x: hidden;\n  white-space: nowrap;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 17px;\n`\n\nexport const agentMarketResultStyle = css`\n  color: ${getColor(\"grayBlue\", \"03\")};\n  font-size: 12px;\n  margin-left: 8px;\n  white-space: nowrap;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 16px;\n  overflow: hidden;\n  flex-shrink: 0;\n  text-overflow: ellipsis;\n`\n\nexport const agentControlContainerStyle = css`\n  display: flex;\n  overflow-y: auto;\n  flex-direction: column;\n  flex-grow: 1;\n  flex-shrink: 1;\n  padding-bottom: 40px;\n`\n\nexport const configContainerStyle = css`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  overflow: hidden;\n`\n\nexport const tabsContainerStyle = css`\n  display: flex;\n  justify-content: center;\n  margin-top: 12px;\n  flex-direction: row;\n`\n\nexport const dividerStyle = css`\n  width: 65px;\n  flex-shrink: 1;\n`\n\nexport const tabContainerStyle = css`\n  display: inline-flex;\n  padding-top: 5px;\n  flex-direction: column;\n`\n\nexport const tabStyle = css`\n  color: ${getColor(\"grayBlue\", \"02\")};\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 22px;\n  text-transform: capitalize;\n`\n\nexport const lineStyle = css`\n  width: 100%;\n  margin-top: 3px;\n  height: 2px;\n  background: ${getColor(\"grayBlue\", \"02\")};\n`\n","import { Avatar } from \"@illa-public/avatar\"\nimport { CodeEditor } from \"@illa-public/code-editor\"\nimport { ShareAgentMobile } from \"@illa-public/invite-modal\"\nimport {\n  MarketAIAgent,\n  getAIAgentMarketplaceInfo,\n  getLLM,\n  isPremiumModel,\n} from \"@illa-public/market-agent\"\nimport {\n  ILLA_MIXPANEL_BUILDER_PAGE_NAME,\n  ILLA_MIXPANEL_EVENT_TYPE,\n  MixpanelTrackProvider,\n} from \"@illa-public/mixpanel-utils\"\nimport {\n  AI_AGENT_TYPE,\n  Agent,\n  MemberInfo,\n  USER_ROLE,\n  USER_STATUS,\n} from \"@illa-public/public-types\"\nimport { RecordEditor } from \"@illa-public/record-editor\"\nimport { useUpgradeModal } from \"@illa-public/upgrade-modal\"\nimport {\n  getCurrentTeamInfo,\n  getCurrentUser,\n  getPlanUtils,\n  teamActions,\n} from \"@illa-public/user-data\"\nimport {\n  ACTION_MANAGE,\n  ATTRIBUTE_GROUP,\n  canManage,\n  canManageInvite,\n  canUseUpgradeFeature,\n  openShareAgentModal,\n} from \"@illa-public/user-role-utils\"\nimport {\n  formatNumForAgent,\n  getAgentPublicLink,\n  getAuthToken,\n  getILLABuilderURL,\n  getILLACloudURL,\n} from \"@illa-public/utils\"\nimport { motion } from \"framer-motion\"\nimport { FC, useEffect, useState } from \"react\"\nimport { Helmet } from \"react-helmet-async\"\nimport { Controller, useForm, useFormState } from \"react-hook-form\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useAsyncValue, useParams, useSearchParams } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport {\n  Button,\n  DependencyIcon,\n  ForkIcon,\n  LoadingIcon,\n  PlayFillIcon,\n  PreviousIcon,\n  RadioGroup,\n  ResetIcon,\n  StarFillIcon,\n  StarOutlineIcon,\n  getColor,\n  useMessage,\n} from \"@illa-design/react\"\nimport { TextSignal } from \"@/api/ws/textSignal\"\nimport AIAgentBlock from \"@/page/AI/components/AIAgentBlock\"\nimport { PreviewChat } from \"@/page/AI/components/PreviewChat\"\nimport { ChatSendRequestPayload } from \"@/page/AI/components/PreviewChat/interface\"\nimport { useAgentConnect } from \"@/page/AI/components/ws/useAgentConnect\"\nimport { CollaboratorsInfo } from \"@/redux/currentApp/collaborators/collaboratorsState\"\nimport { forkAIAgentToTeam, starAIAgent, unstarAIAgent } from \"@/services/agent\"\nimport { copyToClipboard } from \"@/utils/copyToClipboard\"\nimport { track } from \"@/utils/mixpanelHelper\"\nimport { ChatContext } from \"../../components/ChatContext\"\nimport {\n  agentContentContainerStyle,\n  agentControlContainerStyle,\n  agentIconStyle,\n  agentMarketContainerStyle,\n  agentMarketResultStyle,\n  agentNameStyle,\n  agentTeamNameStyle,\n  aiAgentContainerStyle,\n  buttonContainerStyle,\n  configContainerStyle,\n  dividerStyle,\n  headerContainerStyle,\n  headerInfoStyle,\n  labelLogoStyle,\n  labelStyle,\n  lineStyle,\n  menuContainerStyle,\n  previewChatContainer,\n  readOnlyTextStyle,\n  shareContainerStyle,\n  tabContainerStyle,\n  tabStyle,\n  tabsContainerStyle,\n} from \"./style\"\n\nexport const AIAgentRunMobile: FC = () => {\n  const { agent, marketplace } = useAsyncValue() as {\n    agent: Agent\n    marketplace: MarketAIAgent | undefined\n  }\n\n  const [currentMarketplaceInfo, setCurrentMarketplaceInfo] = useState<\n    MarketAIAgent | undefined\n  >(marketplace)\n\n  const { control, handleSubmit, getValues, reset } = useForm<Agent>({\n    mode: \"onSubmit\",\n    defaultValues: agent,\n  })\n\n  const currentTeamInfo = useSelector(getCurrentTeamInfo)!!\n\n  const { isDirty, isValid } = useFormState({\n    control,\n  })\n\n  const message = useMessage()\n  const upgradeModal = useUpgradeModal()\n\n  // page state\n  const [isRunning, setIsRunning] = useState(false)\n  const [isConnecting, setIsConnecting] = useState(false)\n  const [shareDialogVisible, setShareDialogVisible] = useState(false)\n  const [starState, setStarState] = useState(\n    currentMarketplaceInfo?.marketplace?.isStarredByCurrentUser ?? false,\n  )\n  const [forkLoading, setForkLoading] = useState(false)\n  // data state\n  const [inRoomUsers, setInRoomUsers] = useState<CollaboratorsInfo[]>([])\n  const [isReceiving, setIsReceiving] = useState(false)\n  const currentUserInfo = useSelector(getCurrentUser)\n  const [starNum, setStarNum] = useState(\n    currentMarketplaceInfo?.marketplace.numStars ?? 0,\n  )\n\n  const { ownerTeamIdentifier, agentID } = useParams()\n  const [searchParams] = useSearchParams()\n\n  const { t } = useTranslation()\n\n  const [currentSelectTab, setCurrentSelectTab] = useState<\"config\" | \"run\">(\n    \"config\",\n  )\n\n  // premium dialog\n  const canUseBillingFeature = canUseUpgradeFeature(\n    currentTeamInfo?.myRole,\n    getPlanUtils(currentTeamInfo),\n    currentTeamInfo?.totalTeamLicense?.teamLicensePurchased,\n    currentTeamInfo?.totalTeamLicense?.teamLicenseAllPaid,\n  )\n\n  const canShowInviteButton =\n    canUseBillingFeature || getValues(\"publishedToMarketplace\")\n\n  const dispatch = useDispatch()\n\n  const { sendMessage, generationMessage, chatMessages, reconnect, connect } =\n    useAgentConnect({\n      onSendClean: () => {\n        sendMessage(\n          {} as ChatSendRequestPayload,\n          TextSignal.CLEAN,\n          getValues(\"agentType\"),\n          \"clean\",\n          false,\n        )\n      },\n      onStartRunning: () => {},\n      onConnecting: (isConnecting) => {\n        setIsConnecting(isConnecting)\n      },\n      onReceiving: (isReceiving) => {\n        setIsReceiving(isReceiving)\n      },\n      onRunning: (isRunning: boolean) => {\n        setIsRunning(isRunning)\n      },\n      onSendPrompt(): void {\n        sendMessage(\n          {\n            threadID: v4(),\n            prompt: getValues(\"prompt\"),\n            variables: getValues(\"variables\"),\n            modelConfig: getValues(\"modelConfig\"),\n            model: getValues(\"model\"),\n            actionID: getValues(\"aiAgentID\"),\n            agentType: getValues(\"agentType\"),\n          } as ChatSendRequestPayload,\n          TextSignal.RUN,\n          getValues(\"agentType\"),\n          \"chat\",\n          false,\n        )\n      },\n      onUpdateRoomUsers(roomUsers: CollaboratorsInfo[]): void {\n        setInRoomUsers(roomUsers)\n      },\n    })\n\n  const dialog = (\n    <Controller\n      control={control}\n      name=\"publishedToMarketplace\"\n      render={({ field }) => (\n        <MixpanelTrackProvider\n          basicTrack={track}\n          pageName={ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN}\n        >\n          {shareDialogVisible && (\n            <ShareAgentMobile\n              canUseBillingFeature={canUseBillingFeature}\n              itemID={agent.aiAgentID}\n              title={t(\n                \"user_management.modal.social_media.default_text.agent\",\n                {\n                  agentName: agent.name,\n                },\n              )}\n              redirectURL={`${getILLABuilderURL(\n                window.customDomain,\n              )}/${ownerTeamIdentifier}/ai-agent/${\n                agent.aiAgentID\n              }/run?myTeamIdentifier=${searchParams.get(\"myTeamIdentifier\")}`}\n              onClose={() => {\n                setShareDialogVisible(false)\n              }}\n              canInvite={canManageInvite(\n                currentTeamInfo.myRole,\n                currentTeamInfo.permission.allowEditorManageTeamMember,\n                currentTeamInfo.permission.allowViewerManageTeamMember,\n              )}\n              defaultInviteUserRole={USER_ROLE.VIEWER}\n              teamID={currentTeamInfo.id}\n              currentUserRole={currentTeamInfo.myRole}\n              defaultBalance={currentTeamInfo.currentTeamLicense.balance}\n              defaultAllowInviteLink={\n                currentTeamInfo.permission.inviteLinkEnabled\n              }\n              onInviteLinkStateChange={(enableInviteLink) => {\n                dispatch(\n                  teamActions.updateTeamMemberPermissionReducer({\n                    teamID: currentTeamInfo.id,\n                    newPermission: {\n                      ...currentTeamInfo.permission,\n                      inviteLinkEnabled: enableInviteLink,\n                    },\n                  }),\n                )\n              }}\n              agentID={agent.aiAgentID}\n              defaultAgentContributed={field.value}\n              onAgentContributed={async (isAgentContributed) => {\n                if (isAgentContributed) {\n                  const resp = await getAIAgentMarketplaceInfo(agent.aiAgentID)\n                  setCurrentMarketplaceInfo(resp.data)\n                  const newUrl = new URL(\n                    getAgentPublicLink(resp.data.aiAgent.aiAgentID),\n                  )\n                  newUrl.searchParams.set(\"token\", getAuthToken())\n                  window.open(newUrl, \"_blank\")\n                } else {\n                  setCurrentMarketplaceInfo(undefined)\n                }\n                field.onChange(isAgentContributed)\n              }}\n              onCopyInviteLink={(link: string) => {\n                track(\n                  ILLA_MIXPANEL_EVENT_TYPE.CLICK,\n                  ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n                  {\n                    element: \"share_modal_copy_team\",\n                    parameter5: agent.aiAgentID,\n                  },\n                )\n                copyToClipboard(\n                  t(\"user_management.modal.custom_copy_text_agent_invite\", {\n                    userName: currentUserInfo.nickname,\n                    teamName: currentTeamInfo.name,\n                    inviteLink: link,\n                  }),\n                )\n              }}\n              onCopyAgentMarketLink={(link: string) => {\n                track(\n                  ILLA_MIXPANEL_EVENT_TYPE.CLICK,\n                  ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n                  {\n                    element: \"share_modal_link\",\n                    parameter5: agent.aiAgentID,\n                  },\n                )\n                copyToClipboard(\n                  t(\"user_management.modal.contribute.default_text.agent\", {\n                    agentName: agent.name,\n                    agentLink: link,\n                  }),\n                )\n              }}\n              userRoleForThisAgent={\n                currentTeamInfo.id === agent.teamID\n                  ? currentTeamInfo.myRole\n                  : USER_ROLE.GUEST\n              }\n              ownerTeamID={agent.teamID}\n              onBalanceChange={(balance) => {\n                dispatch(\n                  teamActions.updateTeamMemberSubscribeReducer({\n                    teamID: currentTeamInfo.id,\n                    subscribeInfo: {\n                      ...currentTeamInfo.currentTeamLicense,\n                      balance: balance,\n                    },\n                  }),\n                )\n              }}\n              teamPlan={getPlanUtils(currentTeamInfo)}\n              onShare={(platform) => {\n                track(\n                  ILLA_MIXPANEL_EVENT_TYPE.CLICK,\n                  ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n                  {\n                    element: \"share_modal_social_media\",\n                    parameter4: platform,\n                    parameter5: agent.aiAgentID,\n                  },\n                )\n              }}\n              onInvitedChange={(userList) => {\n                const memberListInfo: MemberInfo[] = userList.map((user) => {\n                  return {\n                    ...user,\n                    userID: \"\",\n                    nickname: \"\",\n                    avatar: \"\",\n                    userStatus: USER_STATUS.PENDING,\n                    permission: {},\n                    createdAt: \"\",\n                    updatedAt: \"\",\n                  }\n                })\n                dispatch(teamActions.updateInvitedUserReducer(memberListInfo))\n              }}\n            />\n          )}\n        </MixpanelTrackProvider>\n      )}\n    />\n  )\n\n  const configTab = (\n    <div css={configContainerStyle}>\n      <div css={agentControlContainerStyle}>\n        <Controller\n          name=\"agentType\"\n          control={control}\n          shouldUnregister={false}\n          render={({ field }) => (\n            <AIAgentBlock\n              title={t(\"editor.ai-agent.label.mode\")}\n              tips={t(\"editor.ai-agent.tips.mode\")}\n            >\n              <RadioGroup\n                value={field.value}\n                colorScheme={getColor(\"grayBlue\", \"02\")}\n                type=\"button\"\n                w=\"100%\"\n                disp=\"flex\"\n                forceEqualWidth={true}\n                options={[\n                  {\n                    value: AI_AGENT_TYPE.CHAT,\n                    label: t(\"editor.ai-agent.option.mode.chat\"),\n                  },\n                  {\n                    value: AI_AGENT_TYPE.TEXT_GENERATION,\n                    label: t(\"editor.ai-agent.option.mode.text\"),\n                  },\n                ]}\n                onChange={(value) => {\n                  if (isReceiving || isConnecting) {\n                    message.info({\n                      content: t(\"editor.ai-agent.message.generating\"),\n                    })\n                    return\n                  }\n                  track(\n                    ILLA_MIXPANEL_EVENT_TYPE.CLICK,\n                    ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n                    {\n                      element: \"mode_radio_button\",\n                      parameter1: value,\n                      parameter5: agent.aiAgentID,\n                    },\n                  )\n                  field.onChange(value)\n                }}\n              />\n            </AIAgentBlock>\n          )}\n        />\n        <Controller\n          name=\"prompt\"\n          control={control}\n          shouldUnregister={false}\n          render={({ field: promptField }) => (\n            <Controller\n              name=\"variables\"\n              control={control}\n              render={({ field: variables }) => (\n                <AIAgentBlock title={\"Prompt\"}>\n                  <CodeEditor\n                    {...promptField}\n                    editable={false}\n                    completionOptions={variables.value}\n                  />\n                </AIAgentBlock>\n              )}\n            />\n          )}\n        />\n        <Controller\n          name=\"variables\"\n          control={control}\n          rules={{\n            validate: (value) =>\n              value.every((param) => param.key !== \"\" && param.value !== \"\") ||\n              (value.length === 1 &&\n                value[0].key === \"\" &&\n                value[0].value === \"\"),\n          }}\n          shouldUnregister={false}\n          render={({ field }) =>\n            field.value.length > 0 ? (\n              <AIAgentBlock title={t(\"editor.ai-agent.label.variable\")}>\n                <RecordEditor\n                  fillOnly\n                  records={field.value}\n                  onChangeKey={(index, key) => {\n                    const newVariables = [...field.value]\n                    newVariables[index].key = key\n                    field.onChange(newVariables)\n                  }}\n                  onChangeValue={(index, _, value) => {\n                    const newVariables = [...field.value]\n                    newVariables[index].value = value\n                    field.onChange(newVariables)\n                  }}\n                  onAdd={() => {}}\n                  onDelete={() => {}}\n                  label={\"\"}\n                />\n              </AIAgentBlock>\n            ) : (\n              <></>\n            )\n          }\n        />\n        <Controller\n          name=\"model\"\n          control={control}\n          render={({ field }) => (\n            <AIAgentBlock title={t(\"editor.ai-agent.label.model\")}>\n              <div css={labelStyle}>\n                <span css={labelLogoStyle}>{getLLM(field.value)?.logo}</span>\n                <span css={readOnlyTextStyle}>{getLLM(field.value)?.name}</span>\n              </div>\n            </AIAgentBlock>\n          )}\n        />\n      </div>\n      <form\n        onSubmit={handleSubmit(async (data) => {\n          if (isPremiumModel(data.model) && !canUseBillingFeature) {\n            upgradeModal({\n              modalType: \"agent\",\n              from: \"agent_run_gpt4\",\n            })\n            return\n          }\n          reset(data)\n          setCurrentSelectTab(\"run\")\n          track(\n            ILLA_MIXPANEL_EVENT_TYPE.CLICK,\n            ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n            {\n              element: isRunning ? \"restart\" : \"start\",\n              parameter1: data.agentType === 1 ? \"chat\" : \"text\",\n              parameter5: agent.aiAgentID,\n            },\n          )\n          isRunning\n            ? await reconnect(data.aiAgentID, data.agentType)\n            : await connect(data.aiAgentID, data.agentType)\n        })}\n      >\n        <div css={buttonContainerStyle}>\n          <Button\n            flex=\"1\"\n            disabled={!isValid}\n            size=\"large\"\n            loading={isConnecting}\n            ml=\"8px\"\n            colorScheme={getColor(\"grayBlue\", \"02\")}\n            leftIcon={isRunning ? <ResetIcon /> : <PlayFillIcon />}\n          >\n            {!isRunning\n              ? t(\"editor.ai-agent.start\")\n              : t(\"editor.ai-agent.restart\")}\n          </Button>\n        </div>\n      </form>\n    </div>\n  )\n\n  const previewChatTab = (\n    <Controller\n      name=\"agentType\"\n      control={control}\n      shouldUnregister={false}\n      render={({ field }) => (\n        <div css={previewChatContainer}>\n          <PreviewChat\n            editState=\"RUN\"\n            showEditPanel={false}\n            showShareDialog={false}\n            showContributeDialog={false}\n            isConnecting={isConnecting}\n            isRunning={isRunning}\n            hasCreated={true}\n            isMobile={true}\n            agentType={field.value}\n            model={getValues(\"model\")}\n            chatMessages={chatMessages}\n            generationMessage={generationMessage}\n            isReceiving={isReceiving}\n            blockInput={!isRunning || isDirty}\n            onSendMessage={(message, agentType: AI_AGENT_TYPE) => {\n              track(\n                ILLA_MIXPANEL_EVENT_TYPE.CLICK,\n                ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n                {\n                  element: \"send\",\n                  parameter5: agent.aiAgentID,\n                },\n              )\n              sendMessage(\n                {\n                  threadID: message.threadID,\n                  prompt: message.message,\n                  actionID: getValues(\"aiAgentID\"),\n                  variables: [],\n                  modelConfig: getValues(\"modelConfig\"),\n                  model: getValues(\"model\"),\n                  agentType: getValues(\"agentType\"),\n                } as ChatSendRequestPayload,\n                TextSignal.RUN,\n                agentType,\n                \"chat\",\n                true,\n                message,\n              )\n            }}\n            onCancelReceiving={() => {\n              sendMessage(\n                {} as ChatSendRequestPayload,\n                TextSignal.STOP_ALL,\n                field.value,\n                \"stop_all\",\n                false,\n              )\n              setIsReceiving(false)\n            }}\n          />\n        </div>\n      )}\n    />\n  )\n\n  useEffect(() => {\n    canShowInviteButton &&\n      track(\n        ILLA_MIXPANEL_EVENT_TYPE.SHOW,\n        ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n        {\n          element: \"invite_entry\",\n        },\n      )\n  }, [canShowInviteButton])\n\n  return (\n    <>\n      <Helmet>\n        <title>{agent.name}</title>\n      </Helmet>\n      <ChatContext.Provider value={{ inRoomUsers }}>\n        <div css={aiAgentContainerStyle}>\n          <div css={headerContainerStyle}>\n            <Controller\n              name=\"publishedToMarketplace\"\n              control={control}\n              render={({ field }) => {\n                return (\n                  <div css={menuContainerStyle}>\n                    <div\n                      css={shareContainerStyle}\n                      onClick={() => {\n                        const cloudUrl = getILLACloudURL(window.customDomain)\n                        if (document.referrer.includes(cloudUrl)) {\n                          return (location.href = `${cloudUrl}/workspace/${ownerTeamIdentifier}/ai-agents`)\n                        }\n                        if (\n                          document.referrer.includes(\n                            import.meta.env.ILLA_MARKET_URL,\n                          ) &&\n                          agentID\n                        ) {\n                          return (location.href = `${\n                            import.meta.env.ILLA_MARKET_URL\n                          }/ai-agent/${agentID}/detail`)\n                        }\n                        return (location.href = cloudUrl)\n                      }}\n                    >\n                      <PreviousIcon fs=\"24px\" />\n                    </div>\n                    <div\n                      style={{\n                        flexGrow: 1,\n                      }}\n                    />\n                    {field.value &&\n                      canManage(\n                        currentTeamInfo.myRole,\n                        ATTRIBUTE_GROUP.AI_AGENT,\n                        getPlanUtils(currentTeamInfo),\n                        ACTION_MANAGE.FORK_AI_AGENT,\n                      ) && (\n                        <div\n                          css={shareContainerStyle}\n                          onClick={async () => {\n                            track(\n                              ILLA_MIXPANEL_EVENT_TYPE.CLICK,\n                              ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n                              {\n                                element: \"fork\",\n                                parameter5: agent.aiAgentID,\n                              },\n                            )\n                            setForkLoading(true)\n                            try {\n                              await forkAIAgentToTeam(agent.aiAgentID)\n                              message.success({\n                                content: t(\"dashboard.message.mobile-fork-suc\"),\n                              })\n                            } catch (e) {\n                              message.error({\n                                content: t(\"dashboard.message.fork-failed\"),\n                              })\n                            } finally {\n                              setForkLoading(false)\n                            }\n                          }}\n                        >\n                          {forkLoading ? (\n                            <LoadingIcon spin={true} fs=\"24px\" />\n                          ) : (\n                            <ForkIcon fs=\"24px\" />\n                          )}\n                        </div>\n                      )}\n                    {field.value && (\n                      <div\n                        css={shareContainerStyle}\n                        onClick={async () => {\n                          track(\n                            ILLA_MIXPANEL_EVENT_TYPE.CLICK,\n                            ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n                            {\n                              element: \"star\",\n                              parameter5: agent.aiAgentID,\n                            },\n                          )\n                          const currentState = starState\n                          setStarState(!starState)\n                          try {\n                            if (starState) {\n                              await unstarAIAgent(agent.aiAgentID)\n                              if (starNum > 0) {\n                                setStarNum(starNum - 1)\n                              }\n                            } else {\n                              await starAIAgent(agent.aiAgentID)\n                              setStarNum(starNum + 1)\n                            }\n                          } catch (e) {\n                            setStarState(currentState)\n                            message.error({\n                              content: t(\"dashboard.message.star-failed\"),\n                            })\n                          }\n                        }}\n                      >\n                        {starState ? (\n                          <StarFillIcon c=\"#FFBB38\" fs=\"24px\" />\n                        ) : (\n                          <StarOutlineIcon fs=\"24px\" />\n                        )}\n                      </div>\n                    )}\n                    {(canUseBillingFeature || field.value) && (\n                      <div\n                        css={shareContainerStyle}\n                        onClick={() => {\n                          track(\n                            ILLA_MIXPANEL_EVENT_TYPE.CLICK,\n                            ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n                            {\n                              element: \"invite_entry\",\n                              parameter5: agent.aiAgentID,\n                            },\n                          )\n                          if (\n                            !openShareAgentModal(\n                              currentTeamInfo,\n                              currentTeamInfo.id === agent.teamID\n                                ? currentTeamInfo.myRole\n                                : USER_ROLE.GUEST,\n                              field.value,\n                            )\n                          ) {\n                            upgradeModal({\n                              modalType: \"upgrade\",\n                              from: \"agent_run_share\",\n                            })\n                            return\n                          }\n                          setShareDialogVisible(true)\n                          track(\n                            ILLA_MIXPANEL_EVENT_TYPE.SHOW,\n                            ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n                            {\n                              element: \"share_modal\",\n                              parameter5: agent.aiAgentID,\n                            },\n                          )\n                        }}\n                      >\n                        <DependencyIcon fs=\"24px\" />\n                      </div>\n                    )}\n                  </div>\n                )\n              }}\n            />\n            <div css={headerInfoStyle}>\n              <Controller\n                name=\"icon\"\n                control={control}\n                render={({ field }) => (\n                  <Avatar css={agentIconStyle} avatarUrl={field.value} />\n                )}\n              />\n              <div css={agentContentContainerStyle}>\n                <Controller\n                  name=\"name\"\n                  control={control}\n                  render={({ field }) => (\n                    <div css={agentNameStyle}>{field.value}</div>\n                  )}\n                />\n                <div css={agentMarketContainerStyle}>\n                  <div css={agentTeamNameStyle}>{agent.teamName}</div>\n                  {agent.publishedToMarketplace && (\n                    <div css={agentMarketResultStyle}>\n                      {starNum > 0 && (\n                        <span>\n                          {t(\"marketplace.star\")}\n                          {formatNumForAgent(starNum)}\n                        </span>\n                      )}\n                      {starNum > 0 &&\n                        (currentMarketplaceInfo?.marketplace.numForks ?? 0) >\n                          0 && <span>&nbsp;·&nbsp;</span>}\n\n                      {(currentMarketplaceInfo?.marketplace.numForks ?? 0) >\n                        0 && (\n                        <span>\n                          {t(\"marketplace.fork\")}\n                          {formatNumForAgent(\n                            currentMarketplaceInfo?.marketplace.numForks ?? 0,\n                          )}\n                        </span>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            <Controller\n              name=\"agentType\"\n              control={control}\n              render={({ field }) => (\n                <div css={tabsContainerStyle}>\n                  <div\n                    css={tabContainerStyle}\n                    onClick={() => {\n                      setCurrentSelectTab(\"config\")\n                    }}\n                  >\n                    <div css={tabStyle}>{t(\"editor.ai-agent.tab.prompt\")}</div>\n                    {currentSelectTab === \"config\" && (\n                      <motion.div css={lineStyle} layoutId=\"underline\" />\n                    )}\n                  </div>\n                  <div css={dividerStyle} />\n                  <div\n                    css={tabContainerStyle}\n                    onClick={() => {\n                      if (!isRunning || isDirty) {\n                        message.info({\n                          content: t(\"editor.ai-agent.message.click-start\"),\n                        })\n                        return\n                      }\n                      setCurrentSelectTab(\"run\")\n                    }}\n                  >\n                    <div css={tabStyle}>\n                      {field.value === AI_AGENT_TYPE.CHAT\n                        ? t(\"editor.ai-agent.tab.chat\")\n                        : t(\"editor.ai-agent.tab.text\")}\n                    </div>\n                    {currentSelectTab === \"run\" && (\n                      <motion.div css={lineStyle} layoutId=\"underline\" />\n                    )}\n                  </div>\n                </div>\n              )}\n            />\n          </div>\n          {currentSelectTab === \"run\" && previewChatTab}\n          {currentSelectTab === \"config\" && configTab}\n          {dialog}\n        </div>\n      </ChatContext.Provider>\n    </>\n  )\n}\n\nexport default AIAgentRunMobile\n\nAIAgentRunMobile.displayName = \"AIAgentRunMobile\"\n","import { css } from \"@emotion/react\"\nimport { applyMobileStyle } from \"@illa-public/utils\"\nimport { getColor } from \"@illa-design/react\"\n\nexport const aiAgentContainerStyle = css`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: 100%;\n`\n\nexport const leftPanelContainerStyle = css`\n  height: 100%;\n  width: 528px;\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  box-shadow: 4px 0 16px 0 rgba(0, 0, 0, 0.06);\n  flex: none;\n  ${applyMobileStyle(css`\n    display: none;\n  `)}\n`\n\nexport const rightPanelContainerStyle = css`\n  height: 100%;\n  display: flex;\n  overflow-y: auto;\n  flex-grow: 1;\n  flex-direction: column;\n`\n\nexport const agentTopContainerStyle = css`\n  display: flex;\n  flex-direction: column;\n  padding: 24px;\n  border-bottom: 1px solid ${getColor(\"grayBlue\", \"08\")};\n`\n\nexport const backMenuStyle = css`\n  display: flex;\n  cursor: pointer;\n  flex-direction: row;\n  justify-content: space-between;\n  margin-bottom: 32px;\n  flex-grow: 1;\n`\n\nexport const backTextStyle = css`\n  display: inline-block;\n  color: ${getColor(\"grayBlue\", \"02\")};\n  font-size: 14px;\n  margin-left: 8px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 24px;\n`\n\nexport const closeIconStyle = css`\n  color: ${getColor(\"grayBlue\", \"02\")};\n  display: flex;\n  width: 24px;\n  height: 24px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  flex-shrink: 0;\n`\n\nexport const agentTitleContainerStyle = css`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`\n\nexport const labelLogoStyle = css`\n  font-size: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 16px;\n  height: 16px;\n\n  & svg {\n    height: 100%;\n    width: 100%;\n  }\n`\n\nexport const labelStyle = css`\n  display: flex;\n  width: 100%;\n  gap: 8px;\n  flex-direction: row;\n  align-items: center;\n`\n\nexport const readOnlyTextStyle = css`\n  color: ${getColor(\"grayBlue\", \"02\")};\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 22px;\n`\n\nexport const agentNicknameStyle = css`\n  color: ${getColor(\"grayBlue\", \"02\")};\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 600;\n  overflow-x: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  flex-grow: 1;\n  flex-shrink: 1;\n  margin-left: 16px;\n  line-height: 24px;\n`\n\nexport const agentAvatarStyle = css`\n  width: 48px;\n  height: 48px;\n  border-radius: 8px;\n`\n\nexport const agentDescStyle = css`\n  color: ${getColor(\"grayBlue\", \"02\")};\n  font-size: 14px;\n  font-style: normal;\n  white-space: pre-wrap;\n  word-break: break-word;\n  font-weight: 400;\n  margin-top: 24px;\n  line-height: 22px;\n`\n\nexport const agentTeamInfoContainerStyle = css`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-top: 8px;\n`\n\nexport const agentTeamAvatarStyle = css`\n  width: 24px;\n  height: 24px;\n`\n\nexport const agentMenuContainerStyle = css`\n  display: inline-flex;\n  flex-direction: row;\n  margin-top: 24px;\n`\n\nexport const buttonContainerStyle = css`\n  padding: 24px;\n  border-top: 1px solid ${getColor(\"grayBlue\", \"08\")};\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`\n\nexport const agentTeamNameStyle = css`\n  color: ${getColor(\"grayBlue\", \"02\")};\n  margin-left: 8px;\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 20px;\n`\n\nexport const agentControlContainerStyle = css`\n  display: flex;\n  overflow-y: auto;\n  flex-direction: column;\n  flex-grow: 1;\n  flex-shrink: 1;\n  padding-bottom: 40px;\n`\n","import { Avatar } from \"@illa-public/avatar\"\nimport { CodeEditor } from \"@illa-public/code-editor\"\nimport IconHotSpot from \"@illa-public/icon-hot-spot\"\nimport { ShareAgentPC } from \"@illa-public/invite-modal\"\nimport {\n  MarketAIAgent,\n  getAIAgentMarketplaceInfo,\n  getLLM,\n  isPremiumModel,\n} from \"@illa-public/market-agent\"\nimport {\n  ILLA_MIXPANEL_BUILDER_PAGE_NAME,\n  ILLA_MIXPANEL_EVENT_TYPE,\n  MixpanelTrackProvider,\n} from \"@illa-public/mixpanel-utils\"\nimport {\n  AI_AGENT_TYPE,\n  Agent,\n  MemberInfo,\n  USER_ROLE,\n  USER_STATUS,\n} from \"@illa-public/public-types\"\nimport { RecordEditor } from \"@illa-public/record-editor\"\nimport { useUpgradeModal } from \"@illa-public/upgrade-modal\"\nimport {\n  getCurrentTeamInfo,\n  getCurrentUser,\n  getPlanUtils,\n  teamActions,\n} from \"@illa-public/user-data\"\nimport {\n  ACTION_MANAGE,\n  ATTRIBUTE_GROUP,\n  canManage,\n  canManageInvite,\n  canUseUpgradeFeature,\n  openShareAgentModal,\n  showShareAgentModal,\n  showShareAgentModalOnlyForShare,\n} from \"@illa-public/user-role-utils\"\nimport {\n  formatNumForAgent,\n  getAgentPublicLink,\n  getAuthToken,\n  getILLABuilderURL,\n  getILLACloudURL,\n} from \"@illa-public/utils\"\nimport { AnimatePresence, motion } from \"framer-motion\"\nimport { FC, useEffect, useRef, useState } from \"react\"\nimport { Helmet } from \"react-helmet-async\"\nimport { Controller, useForm, useFormState } from \"react-hook-form\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {\n  useAsyncValue,\n  useNavigate,\n  useParams,\n  useSearchParams,\n} from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport {\n  Button,\n  CloseIcon,\n  DependencyIcon,\n  ForkIcon,\n  PlayFillIcon,\n  PreviousIcon,\n  RadioGroup,\n  ResetIcon,\n  StarFillIcon,\n  StarOutlineIcon,\n  getColor,\n  useMessage,\n} from \"@illa-design/react\"\nimport { createAction } from \"@/api/actions\"\nimport { TextSignal } from \"@/api/ws/textSignal\"\nimport GridFillIcon from \"@/assets/agent/gridFill.svg?react\"\nimport { FullPageLoading } from \"@/components/FullPageLoading\"\nimport { buildActionInfo, buildAppWithAgentSchema } from \"@/config/AppWithAgent\"\nimport AIAgentBlock from \"@/page/AI/components/AIAgentBlock\"\nimport { PreviewChat } from \"@/page/AI/components/PreviewChat\"\nimport { ChatSendRequestPayload } from \"@/page/AI/components/PreviewChat/interface\"\nimport { useAgentConnect } from \"@/page/AI/components/ws/useAgentConnect\"\nimport { CollaboratorsInfo } from \"@/redux/currentApp/collaborators/collaboratorsState\"\nimport { forkAIAgentToTeam, starAIAgent, unstarAIAgent } from \"@/services/agent\"\nimport { fetchCreateApp } from \"@/services/apps\"\nimport { copyToClipboard } from \"@/utils/copyToClipboard\"\nimport { track } from \"@/utils/mixpanelHelper\"\nimport { ChatContext } from \"../../components/ChatContext\"\nimport {\n  agentAvatarStyle,\n  agentControlContainerStyle,\n  agentDescStyle,\n  agentMenuContainerStyle,\n  agentNicknameStyle,\n  agentTeamAvatarStyle,\n  agentTeamInfoContainerStyle,\n  agentTeamNameStyle,\n  agentTitleContainerStyle,\n  agentTopContainerStyle,\n  aiAgentContainerStyle,\n  backMenuStyle,\n  backTextStyle,\n  buttonContainerStyle,\n  closeIconStyle,\n  labelLogoStyle,\n  labelStyle,\n  leftPanelContainerStyle,\n  readOnlyTextStyle,\n  rightPanelContainerStyle,\n} from \"./style\"\n\nexport const AIAgentRunPC: FC = () => {\n  const { agent, marketplace } = useAsyncValue() as {\n    agent: Agent\n    marketplace: MarketAIAgent | undefined\n  }\n\n  const navigate = useNavigate()\n\n  const [currentMarketplaceInfo, setCurrentMarketplaceInfo] = useState<\n    MarketAIAgent | undefined\n  >(marketplace)\n\n  const { control, handleSubmit, getValues, reset } = useForm<Agent>({\n    mode: \"onSubmit\",\n    defaultValues: agent,\n  })\n  const formRef = useRef<HTMLFormElement>(null)\n\n  const { isDirty, isValid } = useFormState({\n    control,\n  })\n\n  const currentTeamInfo = useSelector(getCurrentTeamInfo)!!\n  const currentUserInfo = useSelector(getCurrentUser)\n\n  const message = useMessage()\n\n  // page state\n  const [isRunning, setIsRunning] = useState(false)\n  const [isConnecting, setIsConnecting] = useState(false)\n  const [shareDialogVisible, setShareDialogVisible] = useState(false)\n  const [starLoading, setStarLoading] = useState(false)\n  const [forkLoading, setForkLoading] = useState(false)\n  const [starState, setStarState] = useState(\n    currentMarketplaceInfo?.marketplace?.isStarredByCurrentUser ?? false,\n  )\n\n  // data state\n  const [inRoomUsers, setInRoomUsers] = useState<CollaboratorsInfo[]>([])\n  const [isReceiving, setIsReceiving] = useState(false)\n  const [starNum, setStarNum] = useState(\n    currentMarketplaceInfo?.marketplace.numStars ?? 0,\n  )\n  const upgradeModal = useUpgradeModal()\n\n  const { ownerTeamIdentifier, agentID } = useParams()\n  const [searchParams] = useSearchParams()\n\n  // premium dialog\n  const canUseBillingFeature = canUseUpgradeFeature(\n    currentTeamInfo?.myRole,\n    getPlanUtils(currentTeamInfo),\n    currentTeamInfo?.totalTeamLicense?.teamLicensePurchased,\n    currentTeamInfo?.totalTeamLicense?.teamLicenseAllPaid,\n  )\n\n  // ui state\n  const [isFullPageLoading, setIsFullPageLoading] = useState(false)\n  const canShowInviteButton = showShareAgentModal(\n    currentTeamInfo,\n    agent.teamID === currentTeamInfo.id\n      ? currentTeamInfo.myRole\n      : USER_ROLE.GUEST,\n    getValues(\"publishedToMarketplace\"),\n  )\n\n  const [showEditPanel, setShowEditPanel] = useState(true)\n\n  const { t } = useTranslation()\n\n  const dispatch = useDispatch()\n\n  const handleCloseEditPanel = () => {\n    setShowEditPanel(false)\n  }\n\n  const handleClickBack = () => {\n    const cloud_url = getILLACloudURL(window.customDomain)\n    if (document.referrer.includes(cloud_url)) {\n      return (location.href = `${cloud_url}/workspace/${ownerTeamIdentifier}/ai-agents`)\n    }\n    if (\n      document.referrer.includes(import.meta.env.ILLA_MARKET_URL) &&\n      agentID\n    ) {\n      return (location.href = `${\n        import.meta.env.ILLA_MARKET_URL\n      }/ai-agent/${agentID}/detail`)\n    }\n    return (location.href = cloud_url)\n  }\n\n  const handleSubmitClick = handleSubmit(async (data) => {\n    if (isPremiumModel(data.model) && !canUseBillingFeature) {\n      upgradeModal({\n        modalType: \"agent\",\n        from: \"agent_run_gpt4\",\n      })\n      return\n    }\n    reset(data)\n    track(\n      ILLA_MIXPANEL_EVENT_TYPE.CLICK,\n      ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n      {\n        element: isRunning ? \"restart\" : \"start\",\n        parameter1: data.agentType === 1 ? \"chat\" : \"text\",\n        parameter5: agent.aiAgentID,\n      },\n    )\n    isRunning\n      ? await reconnect(data.aiAgentID, data.agentType)\n      : await connect(data.aiAgentID, data.agentType)\n  })\n\n  const dialog = (\n    <Controller\n      control={control}\n      name=\"publishedToMarketplace\"\n      render={({ field }) => (\n        <MixpanelTrackProvider\n          basicTrack={track}\n          pageName={ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN}\n        >\n          {shareDialogVisible && (\n            <ShareAgentPC\n              itemID={agent.aiAgentID}\n              onInvitedChange={(userList) => {\n                const memberListInfo: MemberInfo[] = userList.map((user) => {\n                  return {\n                    ...user,\n                    userID: \"\",\n                    nickname: \"\",\n                    avatar: \"\",\n                    userStatus: USER_STATUS.PENDING,\n                    permission: {},\n                    createdAt: \"\",\n                    updatedAt: \"\",\n                  }\n                })\n                dispatch(teamActions.updateInvitedUserReducer(memberListInfo))\n              }}\n              canUseBillingFeature={canUseUpgradeFeature(\n                currentTeamInfo.myRole,\n                getPlanUtils(currentTeamInfo),\n                currentTeamInfo.totalTeamLicense.teamLicensePurchased,\n                currentTeamInfo.totalTeamLicense.teamLicenseAllPaid,\n              )}\n              title={t(\n                \"user_management.modal.social_media.default_text.agent\",\n                {\n                  agentName: agent.name,\n                },\n              )}\n              redirectURL={`${getILLABuilderURL(\n                window.customDomain,\n              )}/${ownerTeamIdentifier}/ai-agent/${\n                agent.aiAgentID\n              }/run?myTeamIdentifier=${searchParams.get(\"myTeamIdentifier\")}`}\n              onClose={() => {\n                setShareDialogVisible(false)\n              }}\n              canInvite={canManageInvite(\n                currentTeamInfo.myRole,\n                currentTeamInfo.permission.allowEditorManageTeamMember,\n                currentTeamInfo.permission.allowViewerManageTeamMember,\n              )}\n              defaultInviteUserRole={USER_ROLE.VIEWER}\n              teamID={currentTeamInfo.id}\n              currentUserRole={currentTeamInfo.myRole}\n              defaultBalance={currentTeamInfo.currentTeamLicense.balance}\n              defaultAllowInviteLink={\n                currentTeamInfo.permission.inviteLinkEnabled\n              }\n              onInviteLinkStateChange={(enableInviteLink) => {\n                dispatch(\n                  teamActions.updateTeamMemberPermissionReducer({\n                    teamID: currentTeamInfo.id,\n                    newPermission: {\n                      ...currentTeamInfo.permission,\n                      inviteLinkEnabled: enableInviteLink,\n                    },\n                  }),\n                )\n              }}\n              agentID={agent.aiAgentID}\n              defaultAgentContributed={field.value}\n              onAgentContributed={async (isAgentContributed) => {\n                if (isAgentContributed) {\n                  const resp = await getAIAgentMarketplaceInfo(agent.aiAgentID)\n                  setCurrentMarketplaceInfo(resp.data)\n                  const newUrl = new URL(\n                    getAgentPublicLink(resp.data.aiAgent.aiAgentID),\n                  )\n                  newUrl.searchParams.set(\"token\", getAuthToken())\n                  window.open(newUrl, \"_blank\")\n                } else {\n                  setCurrentMarketplaceInfo(undefined)\n                }\n                field.onChange(isAgentContributed)\n              }}\n              onCopyInviteLink={(link: string) => {\n                track(\n                  ILLA_MIXPANEL_EVENT_TYPE.CLICK,\n                  ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n                  {\n                    element: \"share_modal_copy_team\",\n                    parameter5: agent.aiAgentID,\n                  },\n                )\n                copyToClipboard(\n                  t(\"user_management.modal.custom_copy_text_agent_invite\", {\n                    userName: currentUserInfo.nickname,\n                    teamName: currentTeamInfo.name,\n                    inviteLink: link,\n                  }),\n                )\n              }}\n              onCopyAgentMarketLink={(link: string) => {\n                track(\n                  ILLA_MIXPANEL_EVENT_TYPE.CLICK,\n                  ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n                  {\n                    element: \"share_modal_link\",\n                    parameter5: agent.aiAgentID,\n                  },\n                )\n                copyToClipboard(\n                  t(\"user_management.modal.contribute.default_text.agent\", {\n                    agentName: agent.name,\n                    agentLink: link,\n                  }),\n                )\n              }}\n              userRoleForThisAgent={\n                currentTeamInfo.id === agent.teamID\n                  ? currentTeamInfo.myRole\n                  : USER_ROLE.GUEST\n              }\n              ownerTeamID={agent.teamID}\n              onBalanceChange={(balance) => {\n                dispatch(\n                  teamActions.updateTeamMemberSubscribeReducer({\n                    teamID: currentTeamInfo.id,\n                    subscribeInfo: {\n                      ...currentTeamInfo.currentTeamLicense,\n                      balance: balance,\n                    },\n                  }),\n                )\n              }}\n              teamPlan={getPlanUtils(currentTeamInfo)}\n              onShare={(platform) => {\n                track(\n                  ILLA_MIXPANEL_EVENT_TYPE.CLICK,\n                  ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n                  {\n                    element: \"share_modal_social_media\",\n                    parameter4: platform,\n                    parameter5: agent.aiAgentID,\n                  },\n                )\n              }}\n            />\n          )}\n        </MixpanelTrackProvider>\n      )}\n    />\n  )\n\n  const { sendMessage, generationMessage, chatMessages, reconnect, connect } =\n    useAgentConnect({\n      onSendClean: () => {\n        sendMessage(\n          {} as ChatSendRequestPayload,\n          TextSignal.CLEAN,\n          getValues(\"agentType\"),\n          \"clean\",\n          false,\n        )\n      },\n      onStartRunning: () => {},\n      onConnecting: (isConnecting) => {\n        setIsConnecting(isConnecting)\n      },\n      onReceiving: (isReceiving) => {\n        setIsReceiving(isReceiving)\n      },\n      onRunning: (isRunning: boolean) => {\n        setIsRunning(isRunning)\n      },\n      onSendPrompt(): void {\n        sendMessage(\n          {\n            threadID: v4(),\n            prompt: getValues(\"prompt\"),\n            variables: getValues(\"variables\"),\n            modelConfig: getValues(\"modelConfig\"),\n            model: getValues(\"model\"),\n            actionID: getValues(\"aiAgentID\"),\n            agentType: getValues(\"agentType\"),\n          } as ChatSendRequestPayload,\n          TextSignal.RUN,\n          getValues(\"agentType\"),\n          \"chat\",\n          false,\n        )\n      },\n      onUpdateRoomUsers(roomUsers: CollaboratorsInfo[]): void {\n        setInRoomUsers(roomUsers)\n      },\n    })\n\n  useEffect(() => {\n    canShowInviteButton &&\n      track(\n        ILLA_MIXPANEL_EVENT_TYPE.SHOW,\n        ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n        {\n          element: \"invite_entry\",\n        },\n      )\n  }, [canShowInviteButton])\n  const menu = (\n    <Controller\n      control={control}\n      name=\"publishedToMarketplace\"\n      render={({ field }) => (\n        <div css={agentMenuContainerStyle}>\n          {canShowInviteButton && (\n            <Button\n              colorScheme=\"grayBlue\"\n              leftIcon={<DependencyIcon />}\n              onClick={() => {\n                track(\n                  ILLA_MIXPANEL_EVENT_TYPE.CLICK,\n                  ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n                  {\n                    element: \"invite_entry\",\n                    parameter5: agent.aiAgentID,\n                  },\n                )\n                if (\n                  !openShareAgentModal(\n                    currentTeamInfo,\n                    currentTeamInfo.id === agent.teamID\n                      ? currentTeamInfo.myRole\n                      : USER_ROLE.GUEST,\n                    field.value,\n                  )\n                ) {\n                  upgradeModal({\n                    modalType: \"upgrade\",\n                    from: \"agent_run_share\",\n                  })\n                  return\n                }\n                setShareDialogVisible(true)\n                track(\n                  ILLA_MIXPANEL_EVENT_TYPE.SHOW,\n                  ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n                  {\n                    element: \"share_modal\",\n                    parameter5: agent.aiAgentID,\n                  },\n                )\n              }}\n            >\n              {t(\"share\")}\n            </Button>\n          )}\n          {field.value && (\n            <Button\n              ml=\"8px\"\n              colorScheme=\"grayBlue\"\n              onClick={async () => {\n                setStarLoading(true)\n                track(\n                  ILLA_MIXPANEL_EVENT_TYPE.CLICK,\n                  ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n                  {\n                    element: \"star\",\n                    parameter5: agent.aiAgentID,\n                  },\n                )\n                try {\n                  if (starState) {\n                    await unstarAIAgent(agent.aiAgentID)\n                    if (starNum > 0) {\n                      setStarNum(starNum - 1)\n                    }\n                  } else {\n                    await starAIAgent(agent.aiAgentID)\n                    setStarNum(starNum + 1)\n                  }\n                  setStarState(!starState)\n                } catch (e) {\n                  message.error({\n                    content: t(\"dashboard.message.star-failed\"),\n                  })\n                } finally {\n                  setStarLoading(false)\n                }\n              }}\n              loading={starLoading}\n              leftIcon={\n                starState ? <StarFillIcon c=\"#FFBB38\" /> : <StarOutlineIcon />\n              }\n            >\n              <span>{t(\"marketplace.star\")}</span>\n              {starNum > 0 && <span> {formatNumForAgent(starNum)}</span>}\n            </Button>\n          )}\n          {canManage(\n            currentTeamInfo.myRole,\n            ATTRIBUTE_GROUP.AI_AGENT,\n            getPlanUtils(currentTeamInfo),\n            ACTION_MANAGE.FORK_AI_AGENT,\n          ) &&\n            field.value && (\n              <Button\n                ml=\"8px\"\n                colorScheme=\"grayBlue\"\n                loading={forkLoading}\n                leftIcon={<ForkIcon />}\n                onClick={async () => {\n                  track(\n                    ILLA_MIXPANEL_EVENT_TYPE.CLICK,\n                    ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n                    {\n                      element: \"fork\",\n                      parameter5: agent.aiAgentID,\n                    },\n                  )\n                  setForkLoading(true)\n                  try {\n                    const newAgent = await forkAIAgentToTeam(agent.aiAgentID)\n                    navigate(\n                      `/${currentTeamInfo.identifier}/ai-agent/${newAgent.data.aiAgentID}`,\n                    )\n                  } catch (e) {\n                    message.error({\n                      content: t(\"dashboard.message.fork-failed\"),\n                    })\n                  } finally {\n                    setForkLoading(false)\n                  }\n                }}\n              >\n                <span>{t(\"marketplace.fork\")}</span>\n                {(currentMarketplaceInfo?.marketplace.numForks ?? 0) > 0 && (\n                  <span>\n                    {\" \"}\n                    {formatNumForAgent(\n                      currentMarketplaceInfo?.marketplace.numForks ?? 0,\n                    )}\n                  </span>\n                )}\n              </Button>\n            )}\n          {canManage(\n            currentTeamInfo.myRole,\n            ATTRIBUTE_GROUP.APP,\n            getPlanUtils(currentTeamInfo),\n            ACTION_MANAGE.CREATE_APP,\n          ) && (\n            <Button\n              ml=\"8px\"\n              colorScheme=\"grayBlue\"\n              loading={forkLoading}\n              leftIcon={<GridFillIcon />}\n              onClick={async () => {\n                try {\n                  setIsFullPageLoading(true)\n                  const finalAgent =\n                    agent.teamID === currentTeamInfo.id\n                      ? agent\n                      : (await forkAIAgentToTeam(agent.aiAgentID)).data\n\n                  const variableKeys = finalAgent.variables.map((v) => v.key)\n                  const { appInfo, variableKeyMapInputNodeDisplayName } =\n                    buildAppWithAgentSchema(variableKeys)\n                  const appInfoResp = await fetchCreateApp({\n                    appName: \"Untitled app\",\n                    initScheme: appInfo,\n                  })\n                  const agentActionInfo = buildActionInfo(\n                    agent,\n                    variableKeyMapInputNodeDisplayName,\n                  )\n                  await createAction(appInfoResp.data.appId, agentActionInfo)\n                  window.open(\n                    `${getILLABuilderURL(window.customDomain)}/${\n                      currentTeamInfo.identifier\n                    }/app/${appInfoResp.data.appId}`,\n                    \"_blank\",\n                  )\n                } catch {\n                  message.error({\n                    content: t(\"create_fail\"),\n                  })\n                } finally {\n                  setIsFullPageLoading(false)\n                }\n              }}\n            >\n              <span>{t(\"marketplace.agent.create_app\")}</span>\n            </Button>\n          )}\n        </div>\n      )}\n    />\n  )\n\n  return (\n    <>\n      <Helmet>\n        <title>{agent.name}</title>\n      </Helmet>\n      <ChatContext.Provider value={{ inRoomUsers }}>\n        <div css={aiAgentContainerStyle}>\n          <AnimatePresence mode=\"wait\" initial={false}>\n            {showEditPanel && (\n              <motion.div\n                css={leftPanelContainerStyle}\n                initial={{\n                  opacity: 0,\n                  x: \"-100%\",\n                  position: \"absolute\",\n                }}\n                animate={{\n                  opacity: 1,\n                  x: 0,\n                  position: \"relative\",\n                  transition: { duration: 0.3 },\n                }}\n                exit={{\n                  opacity: 0,\n                  x: \"-100%\",\n                  position: \"absolute\",\n                }}\n              >\n                <div css={agentTopContainerStyle}>\n                  <div css={backMenuStyle}>\n                    <div onClick={handleClickBack}>\n                      <PreviousIcon fs=\"16px\" />\n                      <div css={backTextStyle}>{t(\"back\")}</div>\n                    </div>\n                    <IconHotSpot\n                      onClick={handleCloseEditPanel}\n                      css={closeIconStyle}\n                    >\n                      <CloseIcon size=\"12px\" />\n                    </IconHotSpot>\n                  </div>\n                  <div css={agentTitleContainerStyle}>\n                    <Controller\n                      control={control}\n                      name=\"icon\"\n                      render={({ field }) => (\n                        <Avatar\n                          css={agentAvatarStyle}\n                          avatarUrl={field.value}\n                        />\n                      )}\n                    />\n                    <Controller\n                      control={control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <div css={agentNicknameStyle}>{field.value}</div>\n                      )}\n                    />\n                  </div>\n                  <Controller\n                    control={control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <div css={agentDescStyle}>{field.value}</div>\n                    )}\n                  />\n                  <div css={agentTeamInfoContainerStyle}>\n                    <Controller\n                      control={control}\n                      name=\"teamIcon\"\n                      render={({ field }) => (\n                        <Avatar\n                          css={agentTeamAvatarStyle}\n                          avatarUrl={field.value}\n                        />\n                      )}\n                    />\n                    <Controller\n                      control={control}\n                      name=\"teamName\"\n                      render={({ field }) => (\n                        <div css={agentTeamNameStyle}>{field.value}</div>\n                      )}\n                    />\n                  </div>\n                  {menu}\n                </div>\n                <div css={agentControlContainerStyle}>\n                  <Controller\n                    name=\"agentType\"\n                    control={control}\n                    shouldUnregister={false}\n                    render={({ field }) => (\n                      <AIAgentBlock\n                        title={t(\"editor.ai-agent.label.mode\")}\n                        tips={t(\"editor.ai-agent.tips.mode\")}\n                      >\n                        <RadioGroup\n                          value={field.value}\n                          colorScheme={getColor(\"grayBlue\", \"02\")}\n                          w=\"100%\"\n                          type=\"button\"\n                          forceEqualWidth={true}\n                          options={[\n                            {\n                              value: AI_AGENT_TYPE.CHAT,\n                              label: t(\"editor.ai-agent.option.mode.chat\"),\n                            },\n                            {\n                              value: AI_AGENT_TYPE.TEXT_GENERATION,\n                              label: t(\"editor.ai-agent.option.mode.text\"),\n                            },\n                          ]}\n                          onChange={(value) => {\n                            if (isReceiving || isConnecting) {\n                              message.info({\n                                content: t(\n                                  \"editor.ai-agent.message.generating\",\n                                ),\n                              })\n                              return\n                            }\n                            track(\n                              ILLA_MIXPANEL_EVENT_TYPE.CLICK,\n                              ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n                              {\n                                element: \"mode_radio_button\",\n                                parameter1: value,\n                                parameter5: agent.aiAgentID,\n                              },\n                            )\n                            field.onChange(value)\n                          }}\n                        />\n                      </AIAgentBlock>\n                    )}\n                  />\n                  <Controller\n                    name=\"prompt\"\n                    control={control}\n                    shouldUnregister={false}\n                    render={({ field: promptField }) => (\n                      <Controller\n                        name=\"variables\"\n                        control={control}\n                        render={({ field: variables }) => (\n                          <AIAgentBlock title={\"Prompt\"}>\n                            <CodeEditor\n                              {...promptField}\n                              editable={false}\n                              completionOptions={variables.value}\n                            />\n                          </AIAgentBlock>\n                        )}\n                      />\n                    )}\n                  />\n                  <Controller\n                    name=\"variables\"\n                    control={control}\n                    rules={{\n                      validate: (value) =>\n                        value.every(\n                          (param) => param.key !== \"\" && param.value !== \"\",\n                        ) ||\n                        (value.length === 1 &&\n                          value[0].key === \"\" &&\n                          value[0].value === \"\"),\n                    }}\n                    shouldUnregister={false}\n                    render={({ field }) =>\n                      field.value.length > 0 ? (\n                        <AIAgentBlock\n                          title={t(\"editor.ai-agent.label.variable\")}\n                        >\n                          <RecordEditor\n                            fillOnly\n                            records={field.value}\n                            onChangeKey={(index, key) => {\n                              const newVariables = [...field.value]\n                              newVariables[index].key = key\n                              field.onChange(newVariables)\n                            }}\n                            onChangeValue={(index, _, value) => {\n                              const newVariables = [...field.value]\n                              newVariables[index].value = value\n                              field.onChange(newVariables)\n                            }}\n                            onAdd={() => {}}\n                            onDelete={() => {}}\n                            label={\"\"}\n                          />\n                        </AIAgentBlock>\n                      ) : (\n                        <></>\n                      )\n                    }\n                  />\n                  <Controller\n                    name=\"model\"\n                    control={control}\n                    render={({ field }) => (\n                      <AIAgentBlock title={t(\"editor.ai-agent.label.model\")}>\n                        <div css={labelStyle}>\n                          <span css={labelLogoStyle}>\n                            {getLLM(field.value)?.logo}\n                          </span>\n                          <span css={readOnlyTextStyle}>\n                            {getLLM(field.value)?.name}\n                          </span>\n                        </div>\n                      </AIAgentBlock>\n                    )}\n                  />\n                </div>\n                <form ref={formRef} onSubmit={handleSubmitClick}>\n                  <div css={buttonContainerStyle}>\n                    <Button\n                      size=\"large\"\n                      flex=\"1\"\n                      disabled={!isValid}\n                      loading={isConnecting}\n                      ml=\"8px\"\n                      colorScheme={getColor(\"grayBlue\", \"02\")}\n                      leftIcon={isRunning ? <ResetIcon /> : <PlayFillIcon />}\n                    >\n                      {!isRunning\n                        ? t(\"editor.ai-agent.start\")\n                        : t(\"editor.ai-agent.restart\")}\n                    </Button>\n                  </div>\n                </form>\n              </motion.div>\n            )}\n          </AnimatePresence>\n          <Controller\n            name=\"agentType\"\n            control={control}\n            shouldUnregister={false}\n            render={({ field }) => (\n              <Controller\n                control={control}\n                name=\"publishedToMarketplace\"\n                render={({ field: contributedField }) => (\n                  <div css={rightPanelContainerStyle}>\n                    <PreviewChat\n                      showShareDialog={showShareAgentModalOnlyForShare(\n                        currentTeamInfo,\n                      )}\n                      showContributeDialog={showShareAgentModal(\n                        currentTeamInfo,\n                        agent.teamID === currentTeamInfo.id\n                          ? currentTeamInfo.myRole\n                          : USER_ROLE.GUEST,\n                        contributedField.value,\n                      )}\n                      showEditPanel={showEditPanel}\n                      setShowEditPanel={setShowEditPanel}\n                      isRunning={isRunning}\n                      isConnecting={isConnecting}\n                      hasCreated={true}\n                      isMobile={false}\n                      editState=\"RUN\"\n                      agentType={field.value}\n                      model={getValues(\"model\")}\n                      chatMessages={chatMessages}\n                      generationMessage={generationMessage}\n                      isReceiving={isReceiving}\n                      blockInput={!isRunning || isDirty}\n                      onSendMessage={(message, agentType: AI_AGENT_TYPE) => {\n                        track(\n                          ILLA_MIXPANEL_EVENT_TYPE.CLICK,\n                          ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n                          {\n                            element: \"send\",\n                            parameter5: agent.aiAgentID,\n                          },\n                        )\n                        sendMessage(\n                          {\n                            threadID: message.threadID,\n                            prompt: message.message,\n                            variables: [],\n                            modelConfig: getValues(\"modelConfig\"),\n                            model: getValues(\"model\"),\n                            agentType: getValues(\"agentType\"),\n                            actionID: getValues(\"aiAgentID\"),\n                          } as ChatSendRequestPayload,\n                          TextSignal.RUN,\n                          agentType,\n                          \"chat\",\n                          true,\n                          message,\n                        )\n                      }}\n                      onCancelReceiving={() => {\n                        sendMessage(\n                          {} as ChatSendRequestPayload,\n                          TextSignal.STOP_ALL,\n                          field.value,\n                          \"stop_all\",\n                          false,\n                        )\n                        setIsReceiving(false)\n                      }}\n                      onClickStartRunning={handleSubmitClick}\n                    />\n                  </div>\n                )}\n              />\n            )}\n          />\n        </div>\n        {dialog}\n        {isFullPageLoading && <FullPageLoading hasMask />}\n      </ChatContext.Provider>\n    </>\n  )\n}\n\nexport default AIAgentRunPC\n\nAIAgentRunPC.displayName = \"AIAgentRunPC\"\n","import { LayoutAutoChange } from \"@illa-public/layout-auto-change\"\nimport {\n  ILLA_MIXPANEL_BUILDER_PAGE_NAME,\n  ILLA_MIXPANEL_EVENT_TYPE,\n} from \"@illa-public/mixpanel-utils\"\nimport { FC, useEffect } from \"react\"\nimport {\n  Await,\n  redirect,\n  useBeforeUnload,\n  useLoaderData,\n} from \"react-router-dom\"\nimport AIAgentRunMobile from \"@/page/AI/AIAgentRun/AIAgentRunMobile\"\nimport AIAgentRunPC from \"@/page/AI/AIAgentRun/AIAgentRunPC\"\nimport {\n  track,\n  trackPageDurationEnd,\n  trackPageDurationStart,\n} from \"@/utils/mixpanelHelper\"\n\nexport const AIAgentRun: FC = () => {\n  const data = useLoaderData() as {\n    data: Promise<any>\n  }\n\n  useEffect(() => {\n    track(\n      ILLA_MIXPANEL_EVENT_TYPE.VISIT,\n      ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN,\n    )\n    trackPageDurationStart()\n    return () => {\n      trackPageDurationEnd(ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN)\n    }\n  }, [])\n\n  useBeforeUnload(() => {\n    trackPageDurationEnd(ILLA_MIXPANEL_BUILDER_PAGE_NAME.AI_AGENT_RUN)\n  })\n\n  return (\n    <Await resolve={data.data} errorElement={<>{redirect(\"404\")}</>}>\n      <LayoutAutoChange\n        desktopPage={<AIAgentRunPC />}\n        mobilePage={<AIAgentRunMobile />}\n      />\n    </Await>\n  )\n}\n\nAIAgentRun.displayName = \"AIAgentRun\"\nexport default AIAgentRun\n"],"names":["LayoutAutoChange","props","desktopPage","mobilePage","width","useWindowSize","isMobile","isMobileByWindowSize","jsx","Fragment","aiAgentContainerStyle","css","buttonContainerStyle","getColor","readOnlyTextStyle","labelLogoStyle","labelStyle","headerInfoStyle","headerContainerStyle","previewChatContainer","agentIconStyle","shareContainerStyle","menuContainerStyle","agentContentContainerStyle","agentMarketContainerStyle","agentTeamNameStyle","agentNameStyle","agentMarketResultStyle","agentControlContainerStyle","configContainerStyle","tabsContainerStyle","dividerStyle","tabContainerStyle","tabStyle","lineStyle","AIAgentRunMobile","agent","marketplace","useAsyncValue","currentMarketplaceInfo","setCurrentMarketplaceInfo","useState","control","handleSubmit","getValues","reset","useForm","currentTeamInfo","useSelector","getCurrentTeamInfo","isDirty","isValid","useFormState","message","useMessage","upgradeModal","useUpgradeModal","isRunning","setIsRunning","isConnecting","setIsConnecting","shareDialogVisible","setShareDialogVisible","starState","setStarState","_a","forkLoading","setForkLoading","inRoomUsers","setInRoomUsers","isReceiving","setIsReceiving","currentUserInfo","getCurrentUser","starNum","setStarNum","ownerTeamIdentifier","agentID","useParams","searchParams","useSearchParams","t","useTranslation","currentSelectTab","setCurrentSelectTab","canUseBillingFeature","canUseUpgradeFeature","getPlanUtils","_b","_c","canShowInviteButton","dispatch","useDispatch","sendMessage","generationMessage","chatMessages","reconnect","connect","useAgentConnect","TextSignal","v4","roomUsers","dialog","Controller","field","MixpanelTrackProvider","track","ILLA_MIXPANEL_BUILDER_PAGE_NAME","ShareAgentMobile","getILLABuilderURL","canManageInvite","USER_ROLE","enableInviteLink","teamActions","isAgentContributed","resp","getAIAgentMarketplaceInfo","newUrl","getAgentPublicLink","getAuthToken","link","ILLA_MIXPANEL_EVENT_TYPE","copyToClipboard","balance","platform","userList","memberListInfo","user","USER_STATUS","configTab","jsxs","AIAgentBlock","RadioGroup","AI_AGENT_TYPE","value","promptField","variables","CodeEditor","param","RecordEditor","index","key","newVariables","_","data","isPremiumModel","Button","ResetIcon","PlayFillIcon","previewChatTab","PreviewChat","agentType","useEffect","Helmet","ChatContext","cloudUrl","getILLACloudURL","PreviousIcon","canManage","ATTRIBUTE_GROUP","ACTION_MANAGE","forkAIAgentToTeam","LoadingIcon","ForkIcon","currentState","unstarAIAgent","starAIAgent","StarFillIcon","StarOutlineIcon","openShareAgentModal","DependencyIcon","Avatar","formatNumForAgent","motion","leftPanelContainerStyle","applyMobileStyle","rightPanelContainerStyle","agentTopContainerStyle","backMenuStyle","backTextStyle","closeIconStyle","agentTitleContainerStyle","agentNicknameStyle","agentAvatarStyle","agentDescStyle","agentTeamInfoContainerStyle","agentTeamAvatarStyle","agentMenuContainerStyle","AIAgentRunPC","navigate","useNavigate","formRef","useRef","starLoading","setStarLoading","isFullPageLoading","setIsFullPageLoading","showShareAgentModal","showEditPanel","setShowEditPanel","handleCloseEditPanel","handleClickBack","cloud_url","handleSubmitClick","ShareAgentPC","menu","newAgent","GridFillIcon","variableKeys","v","appInfo","variableKeyMapInputNodeDisplayName","buildAppWithAgentSchema","appInfoResp","fetchCreateApp","agentActionInfo","buildActionInfo","createAction","AnimatePresence","IconHotSpot","CloseIcon","contributedField","showShareAgentModalOnlyForShare","FullPageLoading","AIAgentRun","useLoaderData","trackPageDurationStart","trackPageDurationEnd","useBeforeUnload","Await","redirect"],"mappings":"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"}