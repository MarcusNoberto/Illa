{"version":3,"file":"editableText-3c97105e.js","sources":["../../src/widgetLibrary/PublicSector/containerStyle.ts","../../src/widgetLibrary/EditableWidget/style.tsx","../../src/widgetLibrary/EditableWidget/utils.ts","../../src/widgetLibrary/EditableWidget/editableText.tsx"],"sourcesContent":["import { css } from \"@emotion/react\"\n\nexport const containerStyle = css`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: end;\n`\n","import { css } from \"@emotion/react\"\nimport { globalColor, illaPrefix } from \"@illa-design/react\"\n\nexport function applyTextCss(isPlaceHolder = false) {\n  return css`\n    width: 100%;\n    height: 32px;\n    max-height: 32px;\n    padding: 0;\n    display: inline-flex;\n    font-size: 14px;\n    align-items: center;\n    box-sizing: border-box;\n    max-lines: 1;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    border-radius: 8px;\n    color: ${!isPlaceHolder\n      ? globalColor(`--${illaPrefix}-grayBlue-04`)\n      : globalColor(`--${illaPrefix}-grayBlue-02`)};\n    &:hover {\n      background-color: ${globalColor(`--${illaPrefix}-grayBlue-09`)};\n      cursor: pointer;\n      padding-left: 16px;\n      svg {\n        opacity: 1;\n      }\n    }\n    transition: all 200ms;\n    svg {\n      width: 14px;\n      height: 14px;\n      margin-left: 8px;\n      opacity: 0;\n      color: ${globalColor(`--${illaPrefix}-grayBlue-05`)};\n      transition: all 200ms;\n    }\n  `\n}\n","import {\n  getValidateVFromString,\n  handleValidateCheck,\n} from \"../PublicSector/InvalidMessage/utils\"\nimport { EditableTextWidgetProps } from \"./interface\"\n\nexport const getValidateMessageFunc = (\n  value: string | undefined,\n  options: {\n    hideValidationMessage?: EditableTextWidgetProps[\"hideValidationMessage\"]\n    pattern?: EditableTextWidgetProps[\"pattern\"]\n    regex?: EditableTextWidgetProps[\"regex\"]\n    minLength?: EditableTextWidgetProps[\"minLength\"]\n    maxLength?: EditableTextWidgetProps[\"maxLength\"]\n    required?: EditableTextWidgetProps[\"required\"]\n    customRule?: EditableTextWidgetProps[\"customRule\"]\n  } = {},\n) => {\n  const {\n    hideValidationMessage,\n    pattern,\n    regex,\n    maxLength,\n    minLength,\n    required,\n    customRule,\n  } = options\n  if (!hideValidationMessage) {\n    const message = handleValidateCheck({\n      value: getValidateVFromString(value),\n      pattern,\n      regex,\n      minLength,\n      maxLength,\n      required,\n      customRule,\n    })\n    const showMessage = message && message.length > 0\n    return showMessage ? message : \"\"\n  }\n  return \"\"\n}\n","import { debounce } from \"lodash-es\"\nimport { FC, useCallback, useEffect, useRef, useState } from \"react\"\nimport { Input, PenIcon } from \"@illa-design/react\"\nimport { AutoHeightContainer } from \"@/widgetLibrary/PublicSector/AutoHeightContainer\"\nimport { InvalidMessage } from \"@/widgetLibrary/PublicSector/InvalidMessage\"\nimport { Label } from \"@/widgetLibrary/PublicSector/Label\"\nimport { TooltipWrapper } from \"@/widgetLibrary/PublicSector/TooltipWrapper\"\nimport {\n  applyLabelAndComponentWrapperStyle,\n  applyValidateMessageWrapperStyle,\n} from \"@/widgetLibrary/PublicSector/TransformWidgetWrapper/style\"\nimport { containerStyle } from \"@/widgetLibrary/PublicSector/containerStyle\"\nimport { EditableTextWidgetProps, WrappedEditableTextProps } from \"./interface\"\nimport { applyTextCss } from \"./style\"\nimport { getValidateMessageFunc } from \"./utils\"\n\nexport const WrappedEditableText: FC<WrappedEditableTextProps> = (props) => {\n  const {\n    value,\n    placeholder,\n    disabled,\n    readOnly,\n    prefixIcon,\n    prefixText,\n    suffixIcon,\n    suffixText,\n    showCharacterCount,\n    colorScheme,\n    maxLength,\n    minLength,\n    allowClear,\n    className,\n    handleOnChange,\n  } = props\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const [focus, setFocus] = useState(false)\n\n  const handleClickOnSpan = () => {\n    setFocus(true)\n    setTimeout(() => {\n      inputRef.current?.focus()\n    }, 100)\n  }\n\n  return (\n    <div css={containerStyle} className={className}>\n      {focus ? (\n        <Input\n          w=\"100%\"\n          autoFocus\n          onChange={handleOnChange}\n          showWordLimit={showCharacterCount}\n          onBlur={() => {\n            setFocus(false)\n          }}\n          value={value}\n          addAfter={suffixText}\n          addBefore={prefixText}\n          suffix={suffixIcon}\n          prefix={prefixIcon}\n          inputRef={inputRef}\n          readOnly={readOnly}\n          allowClear={allowClear}\n          placeholder={placeholder}\n          disabled={disabled}\n          colorScheme={colorScheme}\n          maxLength={maxLength}\n          minLength={minLength}\n          onClear={() => handleOnChange(\"\")}\n        />\n      ) : (\n        <span\n          css={applyTextCss(!!(value && value?.length > 0))}\n          onClick={handleClickOnSpan}\n        >\n          {value && value?.length > 0 ? value : placeholder}\n          <PenIcon />\n        </span>\n      )}\n    </div>\n  )\n}\nWrappedEditableText.displayName = \"WrappedEditableText\"\n\nexport const EditableTextWidget: FC<EditableTextWidgetProps> = (props) => {\n  const {\n    displayName,\n    value,\n    minLength,\n    maxLength,\n    updateComponentRuntimeProps,\n    deleteComponentRuntimeProps,\n    handleUpdateDsl,\n    labelPosition,\n    labelFull,\n    label,\n    labelAlign,\n    labelWidth = 33,\n    labelCaption,\n    labelWidthUnit,\n    required,\n    labelHidden,\n    tooltipText,\n    pattern,\n    regex,\n    customRule,\n    hideValidationMessage,\n    updateComponentHeight,\n    validateMessage,\n    defaultValue,\n    triggerEventHandler,\n    handleUpdateMultiExecutionResult,\n  } = props\n\n  const [editableTextValue, setEditableTextValue] = useState(defaultValue)\n\n  const handleValidate = useCallback(\n    (value?: any) => {\n      const message = getValidateMessageFunc(value, {\n        hideValidationMessage: hideValidationMessage,\n        pattern: pattern,\n        regex: regex,\n        minLength: minLength,\n        maxLength: maxLength,\n        required: required,\n        customRule: customRule,\n      })\n      handleUpdateDsl({\n        validateMessage: message,\n      })\n      return message\n    },\n    [\n      customRule,\n      handleUpdateDsl,\n      hideValidationMessage,\n      maxLength,\n      minLength,\n      pattern,\n      regex,\n      required,\n    ],\n  )\n\n  useEffect(() => {\n    setEditableTextValue(defaultValue)\n    handleUpdateMultiExecutionResult([\n      {\n        displayName,\n        value: {\n          value: defaultValue || \"\",\n        },\n      },\n    ])\n  }, [defaultValue, displayName, handleUpdateMultiExecutionResult])\n\n  useEffect(() => {\n    updateComponentRuntimeProps({\n      setValue: (value: string) => {\n        handleUpdateDsl({ value })\n      },\n      clearValue: () => {\n        handleUpdateDsl({ value: undefined })\n      },\n      validate: () => {\n        return handleValidate(value)\n      },\n    })\n    return () => {\n      deleteComponentRuntimeProps()\n    }\n  }, [\n    updateComponentRuntimeProps,\n    handleUpdateDsl,\n    deleteComponentRuntimeProps,\n    handleValidate,\n    value,\n  ])\n\n  const debounceOnChange = useRef(\n    debounce(\n      (\n        value: string,\n        triggerEventHandler: EditableTextWidgetProps[\"triggerEventHandler\"],\n        options?: {\n          hideValidationMessage?: EditableTextWidgetProps[\"hideValidationMessage\"]\n          pattern?: EditableTextWidgetProps[\"pattern\"]\n          regex?: EditableTextWidgetProps[\"regex\"]\n          minLength?: EditableTextWidgetProps[\"minLength\"]\n          maxLength?: EditableTextWidgetProps[\"maxLength\"]\n          required?: EditableTextWidgetProps[\"required\"]\n          customRule?: EditableTextWidgetProps[\"customRule\"]\n        },\n      ) => {\n        new Promise((resolve) => {\n          const message = getValidateMessageFunc(value, options)\n          handleUpdateMultiExecutionResult([\n            {\n              displayName,\n              value: {\n                value: value || \"\",\n                validateMessage: message,\n              },\n            },\n          ])\n          resolve(true)\n        }).then(() => {\n          triggerEventHandler(\"change\")\n        })\n      },\n      180,\n    ),\n  )\n\n  const handleOnChange = useCallback(\n    (value: string) => {\n      setEditableTextValue(value)\n      debounceOnChange.current(value, triggerEventHandler, {\n        hideValidationMessage: hideValidationMessage,\n        pattern: pattern,\n        regex: regex,\n        minLength: minLength,\n        maxLength: maxLength,\n        required: required,\n        customRule: customRule,\n      })\n    },\n    [\n      customRule,\n      hideValidationMessage,\n      maxLength,\n      minLength,\n      pattern,\n      regex,\n      required,\n      triggerEventHandler,\n    ],\n  )\n\n  const handleOnBlur = useCallback(() => {\n    triggerEventHandler(\"blur\")\n  }, [triggerEventHandler])\n\n  const handleOnFocus = useCallback(() => {\n    triggerEventHandler(\"focus\")\n  }, [triggerEventHandler])\n\n  return (\n    <AutoHeightContainer updateComponentHeight={updateComponentHeight}>\n      <TooltipWrapper tooltipText={tooltipText} tooltipDisabled={!tooltipText}>\n        <div css={applyLabelAndComponentWrapperStyle(labelPosition)}>\n          <Label\n            labelFull={labelFull}\n            label={label}\n            labelAlign={labelAlign}\n            labelWidth={labelWidth}\n            labelCaption={labelCaption}\n            labelWidthUnit={labelWidthUnit}\n            labelPosition={labelPosition}\n            required={required}\n            labelHidden={labelHidden}\n            hasTooltip={!!tooltipText}\n          />\n          <WrappedEditableText\n            {...props}\n            value={editableTextValue}\n            handleOnChange={handleOnChange}\n            handleOnBlur={handleOnBlur}\n            handleOnFocus={handleOnFocus}\n          />\n        </div>\n      </TooltipWrapper>\n      {!hideValidationMessage && (\n        <div\n          css={applyValidateMessageWrapperStyle(\n            labelWidth,\n            labelPosition,\n            labelHidden || !label,\n          )}\n        >\n          <InvalidMessage validateMessage={validateMessage} />\n        </div>\n      )}\n    </AutoHeightContainer>\n  )\n}\nEditableTextWidget.displayName = \"EditableTextWidget\"\nexport default EditableTextWidget\n"],"names":["containerStyle","css","applyTextCss","isPlaceHolder","globalColor","illaPrefix","getValidateMessageFunc","value","options","hideValidationMessage","pattern","regex","maxLength","minLength","required","customRule","message","handleValidateCheck","getValidateVFromString","WrappedEditableText","props","placeholder","disabled","readOnly","prefixIcon","prefixText","suffixIcon","suffixText","showCharacterCount","colorScheme","allowClear","className","handleOnChange","inputRef","useRef","focus","setFocus","useState","handleClickOnSpan","_a","jsx","Input","jsxs","PenIcon","EditableTextWidget","displayName","updateComponentRuntimeProps","deleteComponentRuntimeProps","handleUpdateDsl","labelPosition","labelFull","label","labelAlign","labelWidth","labelCaption","labelWidthUnit","labelHidden","tooltipText","updateComponentHeight","validateMessage","defaultValue","triggerEventHandler","handleUpdateMultiExecutionResult","editableTextValue","setEditableTextValue","handleValidate","useCallback","useEffect","debounceOnChange","debounce","resolve","handleOnBlur","handleOnFocus","AutoHeightContainer","TooltipWrapper","applyLabelAndComponentWrapperStyle","Label","applyValidateMessageWrapperStyle","InvalidMessage"],"mappings":"ugBAEO,MAAMA,GAAiBC;AAAA;AAAA;AAAA;AAAA;AAAA,ECCd,SAAAC,GAAaC,EAAgB,GAAO,CAC3C,OAAAF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAcKE,EAENC,EAAY,KAAKC,CAAU,cAAc,EADzCD,EAAY,KAAKC,CAAU,cAAc,CACC;AAAA;AAAA,0BAExBD,EAAY,KAAKC,CAAU,cAAc,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAarDD,EAAY,KAAKC,CAAU,cAAc,CAAC;AAAA;AAAA;AAAA,GAIzD,CCjCO,MAAMC,EAAyB,CACpCC,EACAC,EAQI,KACD,CACG,KAAA,CACJ,sBAAAC,EACA,QAAAC,EACA,MAAAC,EACA,UAAAC,EACA,UAAAC,EACA,SAAAC,EACA,WAAAC,CACE,EAAAP,EACJ,GAAI,CAACC,EAAuB,CAC1B,MAAMO,EAAUC,EAAoB,CAClC,MAAOC,EAAuBX,CAAK,EACnC,QAAAG,EACA,MAAAC,EACA,UAAAE,EACA,UAAAD,EACA,SAAAE,EACA,WAAAC,CAAA,CACD,EAED,OADoBC,GAAWA,EAAQ,OAAS,EAC3BA,EAAU,EACjC,CACO,MAAA,EACT,ECzBaG,EAAqDC,GAAU,CACpE,KAAA,CACJ,MAAAb,EACA,YAAAc,EACA,SAAAC,EACA,SAAAC,EACA,WAAAC,EACA,WAAAC,EACA,WAAAC,EACA,WAAAC,EACA,mBAAAC,EACA,YAAAC,EACA,UAAAjB,EACA,UAAAC,EACA,WAAAiB,EACA,UAAAC,EACA,eAAAC,CACE,EAAAZ,EAEEa,EAAWC,SAAyB,IAAI,EACxC,CAACC,EAAOC,CAAQ,EAAIC,WAAS,EAAK,EAElCC,EAAoB,IAAM,CAC9BF,EAAS,EAAI,EACb,WAAW,IAAM,QACfG,EAAAN,EAAS,UAAT,MAAAM,EAAkB,SACjB,GAAG,CAAA,EAGR,OACGC,EAAA,MAAA,CAAI,IAAKxC,GAAgB,UAAA+B,EACvB,SACCI,EAAAK,EAACC,EAAA,CACC,EAAE,OACF,UAAS,GACT,SAAUT,EACV,cAAeJ,EACf,OAAQ,IAAM,CACZQ,EAAS,EAAK,CAChB,EACA,MAAA7B,EACA,SAAUoB,EACV,UAAWF,EACX,OAAQC,EACR,OAAQF,EACR,SAAAS,EACA,SAAAV,EACA,WAAAO,EACA,YAAAT,EACA,SAAAC,EACA,YAAAO,EACA,UAAAjB,EACA,UAAAC,EACA,QAAS,IAAMmB,EAAe,EAAE,CAAA,CAAA,EAGlCU,EAAC,OAAA,CACC,IAAKxC,GAAa,CAAC,EAAEK,IAASA,GAAA,YAAAA,EAAO,QAAS,EAAE,EAChD,QAAS+B,EAER,SAAA,CAAS/B,IAAAA,GAAA,YAAAA,EAAO,QAAS,EAAIA,EAAQc,IACrCsB,EAAQ,EAAA,CAAA,CAAA,CAGf,CAAA,CAAA,CAEJ,EACAxB,EAAoB,YAAc,sBAErB,MAAAyB,GAAmDxB,GAAU,CAClE,KAAA,CACJ,YAAAyB,EACA,MAAAtC,EACA,UAAAM,EACA,UAAAD,EACA,4BAAAkC,EACA,4BAAAC,EACA,gBAAAC,EACA,cAAAC,EACA,UAAAC,EACA,MAAAC,EACA,WAAAC,EACA,WAAAC,EAAa,GACb,aAAAC,EACA,eAAAC,EACA,SAAAzC,EACA,YAAA0C,EACA,YAAAC,EACA,QAAA/C,EACA,MAAAC,EACA,WAAAI,EACA,sBAAAN,EACA,sBAAAiD,EACA,gBAAAC,EACA,aAAAC,EACA,oBAAAC,EACA,iCAAAC,CACE,EAAA1C,EAEE,CAAC2C,EAAmBC,CAAoB,EAAI3B,WAASuB,CAAY,EAEjEK,EAAiBC,EAAA,YACpB3D,GAAgB,CACT,MAAAS,EAAUV,EAAuBC,EAAO,CAC5C,sBAAAE,EACA,QAAAC,EACA,MAAAC,EACA,UAAAE,EACA,UAAAD,EACA,SAAAE,EACA,WAAAC,CAAA,CACD,EACe,OAAAiC,EAAA,CACd,gBAAiBhC,CAAA,CAClB,EACMA,CACT,EACA,CACED,EACAiC,EACAvC,EACAG,EACAC,EACAH,EACAC,EACAG,CACF,CAAA,EAGFqD,EAAAA,UAAU,IAAM,CACdH,EAAqBJ,CAAY,EACAE,EAAA,CAC/B,CACE,YAAAjB,EACA,MAAO,CACL,MAAOe,GAAgB,EACzB,CACF,CAAA,CACD,CACA,EAAA,CAACA,EAAcf,EAAaiB,CAAgC,CAAC,EAEhEK,EAAAA,UAAU,KACoBrB,EAAA,CAC1B,SAAWvC,GAAkB,CACXyC,EAAA,CAAE,MAAAzC,CAAAA,CAAO,CAC3B,EACA,WAAY,IAAM,CACAyC,EAAA,CAAE,MAAO,MAAW,CAAA,CACtC,EACA,SAAU,IACDiB,EAAe1D,CAAK,CAC7B,CACD,EACM,IAAM,CACiBwC,GAAA,GAE7B,CACDD,EACAE,EACAD,EACAkB,EACA1D,CAAA,CACD,EAED,MAAM6D,EAAmBlC,EAAA,OACvBmC,GACE,CACE9D,EACAsD,EACArD,IASG,CACC,IAAA,QAAS8D,GAAY,CACjB,MAAAtD,EAAUV,EAAuBC,EAAOC,CAAO,EACpBsD,EAAA,CAC/B,CACE,YAAAjB,EACA,MAAO,CACL,MAAOtC,GAAS,GAChB,gBAAiBS,CACnB,CACF,CAAA,CACD,EACDsD,EAAQ,EAAI,CAAA,CACb,EAAE,KAAK,IAAM,CACZT,EAAoB,QAAQ,CAAA,CAC7B,CACH,EACA,GACF,CAAA,EAGI7B,EAAiBkC,EAAA,YACpB3D,GAAkB,CACjByD,EAAqBzD,CAAK,EACT6D,EAAA,QAAQ7D,EAAOsD,EAAqB,CACnD,sBAAApD,EACA,QAAAC,EACA,MAAAC,EACA,UAAAE,EACA,UAAAD,EACA,SAAAE,EACA,WAAAC,CAAA,CACD,CACH,EACA,CACEA,EACAN,EACAG,EACAC,EACAH,EACAC,EACAG,EACA+C,CACF,CAAA,EAGIU,EAAeL,EAAAA,YAAY,IAAM,CACrCL,EAAoB,MAAM,CAAA,EACzB,CAACA,CAAmB,CAAC,EAElBW,EAAgBN,EAAAA,YAAY,IAAM,CACtCL,EAAoB,OAAO,CAAA,EAC1B,CAACA,CAAmB,CAAC,EAGtB,OAAAnB,EAAC+B,GAAoB,sBAAAf,EACnB,SAAA,CAAClB,EAAAkC,GAAA,CAAe,YAAAjB,EAA0B,gBAAiB,CAACA,EAC1D,WAAC,MAAI,CAAA,IAAKkB,GAAmC1B,CAAa,EACxD,SAAA,CAAAT,EAACoC,EAAA,CACC,UAAA1B,EACA,MAAAC,EACA,WAAAC,EACA,WAAAC,EACA,aAAAC,EACA,eAAAC,EACA,cAAAN,EACA,SAAAnC,EACA,YAAA0C,EACA,WAAY,CAAC,CAACC,CAAA,CAChB,EACAjB,EAACrB,EAAA,CACE,GAAGC,EACJ,MAAO2C,EACP,eAAA/B,EACA,aAAAuC,EACA,cAAAC,CAAA,CACF,CAAA,CAAA,CACF,CACF,CAAA,EACC,CAAC/D,GACA+B,EAAC,MAAA,CACC,IAAKqC,GACHxB,EACAJ,EACAO,GAAe,CAACL,CAClB,EAEA,SAAAX,EAACsC,GAAe,gBAAAnB,CAAkC,CAAA,CAAA,CACpD,CAEJ,CAAA,CAAA,CAEJ,EACAf,GAAmB,YAAc"}