{"version":3,"mappings":"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","names":["applyBaseIconWrapperStyle","isSetterSingleRow","width","css","fixedWidthStyle","iconSelectorIconStyle","iconSelectorContainerStyle","globalColor","illaPrefix","iconContentStyle","clearIconStyle","iconPickerContainerStyle","iconPickerHeaderContainerStyle","iconPickerHeaderTextStyle","iconPickerSearchStyle","iconPickerBodyStyle","iconPickerLeftPanelStyle","leftPanelItemStyle","rightPanelStyle","rightTopPanelStyle","getSelectedStyle","selected","getNameSelectedStyle","rightTopItemStyle","rightBottomStyle","rightBottomItemStyle","headerCloseIconStyle","fallbackContainerStyle","setterContainerStyle","basicStyle","singleRowStyle","defaultItem","iconsList","ALL_ICONS","a","b","firstItem","others","realIconsNameLists","nameInfo","names","IconTypes","IconTriggerComponent","props","handleCurrentIconClick","handleCloseModal","iconType","setIconType","useState","iconOrigin","setIconOrigin","searchInput","setSearchInput","RightBottomPanel","lazy","__vitePreload","handleOnChange","value","handleIconOriginChange","origin","handleIconTypeChange","type","handleCloseIconClick","useCallback","Header","useMemo","jsxs","jsx","CloseIcon","LeftPanel","info","name","id","RightTopPanel","Fallback","Loading","RightBottom","Suspense","RightPanel","IconPickerBody","IconSearchBar","Search","t","BaseIconSetter","attrName","handleUpdateDsl","showData","displayData","setDisplayData","useEffect","handleClearClick","event","ErrorCircleIcon","getColor","IconSelector","widgetType","labelName","labelDesc","labelSize","rightPanelData","setRightPanelData","AllData","modalVisible","setModalVisible","getIcon","trackInEditor","ILLA_MIXPANEL_EVENT_TYPE","visible","PanelLabel","Trigger"],"sources":["../../src/page/App/components/InspectPanel/PanelSetters/IconSetter/style.ts","../../src/page/App/components/InspectPanel/PanelSetters/IconSetter/IconTriggerComponent.tsx","../../src/page/App/components/InspectPanel/PanelSetters/IconSetter/baseIconSetter.tsx","../../src/page/App/components/InspectPanel/PanelSetters/IconSetter/IconSelector.tsx"],"sourcesContent":["import { SerializedStyles, css } from \"@emotion/react\"\nimport { globalColor, illaPrefix } from \"@illa-design/react\"\nimport { fixedWidthStyle } from \"@/page/App/components/InspectPanel/PanelSetters/style\"\n\nexport const applyBaseIconWrapperStyle = (\n  isSetterSingleRow: boolean = false,\n): SerializedStyles => {\n  const width = isSetterSingleRow\n    ? css`\n        width: 100%;\n      `\n    : fixedWidthStyle\n  return css`\n    ${width};\n    height: 100%;\n  `\n}\n\nexport const iconSelectorIconStyle = css`\n  width: 24px;\n  height: 24px;\n  padding: 4px;\n  & > svg {\n    width: 16px;\n    height: 16px;\n  }\n`\n\nexport const iconSelectorContainerStyle = css`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  border: 1px solid ${globalColor(`--${illaPrefix}-grayBlue-08`)};\n  padding: 3px 12px;\n  border-radius: 8px;\n  cursor: pointer;\n  gap: 8px;\n  display: flex;\n  overflow: hidden;\n  align-items: center;\n  :hover > div:last-child {\n    display: flex;\n  }\n`\n\nexport const iconContentStyle = css`\n  height: 100%;\n  display: flex;\n  font-size: 12px;\n  line-height: 22px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n`\n\nexport const clearIconStyle = css`\n  width: 16px;\n  height: 16px;\n  display: none;\n  cursor: pointer;\n  position: absolute;\n  right: 12px;\n  top: 8px;\n  justify-content: center;\n  align-items: center;\n  & > svg {\n    width: 12px;\n    height: 12px;\n  }\n`\n\nexport const iconPickerContainerStyle = css`\n  min-width: 545px;\n  height: 546px;\n  display: flex;\n  flex-direction: column;\n`\n\nexport const iconPickerHeaderContainerStyle = css`\n  width: 100%;\n  height: 56px;\n  padding: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`\nexport const iconPickerHeaderTextStyle = css`\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n`\n\nexport const iconPickerSearchStyle = css`\n  width: 100%;\n  height: 48px;\n  padding: 0 16px 16px 16px;\n  box-shadow: inset 0px -1px 0px ${globalColor(`--${illaPrefix}-grayBlue-08`)};\n`\n\nexport const iconPickerBodyStyle = css`\n  width: 100%;\n  flex: 1;\n  display: flex;\n  overflow: scroll;\n`\n\nexport const iconPickerLeftPanelStyle = css`\n  flex: 1;\n  max-height: 100%;\n  height: 100%;\n  overflow: scroll;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  padding: 8px 0px;\n  border-bottom-left-radius: 8px;\n  flex: none;\n`\n\nexport const leftPanelItemStyle = css`\n  width: 100%;\n  min-height: 40px;\n  cursor: pointer;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  padding: 9px 16px;\n  font-size: 14px;\n  line-height: 22px;\n  font-weight: 500;\n  color: ${globalColor(`--${illaPrefix}-grayBlue-02`)};\n  background: ${globalColor(`--${illaPrefix}-white-01`)};\n`\n\nexport const rightPanelStyle = css`\n  width: 440px;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  border-left: 1px solid ${globalColor(`--${illaPrefix}-grayBlue-08`)};\n`\n\nexport const rightTopPanelStyle = css`\n  width: 100%;\n  height: 40px;\n  background: ${globalColor(`--${illaPrefix}-white-01`)};\n  padding: 8px 0 0;\n  display: flex;\n  align-items: center;\n`\n\nexport const getSelectedStyle = (selected: boolean) => {\n  if (selected) {\n    return css`\n      box-shadow: inset 0px -2px 0px ${globalColor(`--${illaPrefix}-grayBlue-02`)};\n    `\n  } else {\n    return css``\n  }\n}\n\nexport const getNameSelectedStyle = (selected: boolean) => {\n  if (selected) {\n    return css`\n      background: ${globalColor(`--${illaPrefix}-grayBlue-09`)};\n    `\n  } else {\n    return css``\n  }\n}\n\nexport const rightTopItemStyle = css`\n  width: auto;\n  height: 32px;\n  background: ${globalColor(`--${illaPrefix}-white-01`)};\n  padding: 0 16px;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  justify-content: center;\n`\n\nexport const rightBottomStyle = css`\n  width: 100%;\n  flex-grow: 1;\n  min-width: 400px;\n  overflow: scroll;\n  padding: 0px 8px 8px;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-content: flex-start;\n`\n\nexport const rightBottomItemStyle = css`\n  width: 48px;\n  cursor: pointer;\n  height: 48px;\n  display: inline-block;\n  padding: 12px;\n  & > svg {\n    width: 24px;\n    height: 24px;\n  }\n`\n\nexport const headerCloseIconStyle = css`\n  cursor: pointer;\n`\n\nexport const fallbackContainerStyle = css`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  padding: 0px 8px 8px;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const setterContainerStyle = (isSetterSingleRow: boolean = false) => {\n  const basicStyle = css`\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n  `\n  const singleRowStyle = css`\n    flex-direction: column;\n    gap: 8px;\n  `\n  return css`\n    display: flex;\n    padding: 8px 0;\n    ${isSetterSingleRow ? singleRowStyle : basicStyle};\n    width: 100%;\n  `\n}\n","import { t } from \"i18next\"\nimport { FC, Suspense, lazy, useCallback, useMemo, useState } from \"react\"\nimport { IconManifest } from \"react-icons\"\nimport { CloseIcon, Loading, Search } from \"@illa-design/react\"\nimport {\n  IconShowType,\n  IconTriggerComponentProps,\n} from \"@/page/App/components/InspectPanel/PanelSetters/IconSetter/interface\"\nimport {\n  fallbackContainerStyle,\n  getNameSelectedStyle,\n  getSelectedStyle,\n  headerCloseIconStyle,\n  iconPickerBodyStyle,\n  iconPickerContainerStyle,\n  iconPickerHeaderContainerStyle,\n  iconPickerHeaderTextStyle,\n  iconPickerLeftPanelStyle,\n  iconPickerSearchStyle,\n  leftPanelItemStyle,\n  rightPanelStyle,\n  rightTopItemStyle,\n  rightTopPanelStyle,\n} from \"@/page/App/components/InspectPanel/PanelSetters/IconSetter/style\"\nimport { ALL_ICONS } from \"@/widgetLibrary/IconWidget/utils\"\n\nconst defaultItem: IconManifest = {\n  id: \"default\",\n  name: \"All\",\n  projectUrl: \"\",\n  license: \"MIT\",\n  licenseUrl: \"https://opensource.org/licenses/MIT\",\n}\n\nconst iconsList = ALL_ICONS.sort((a, b) => (a.name > b.name ? 1 : -1))\nconst [firstItem, ...others] = iconsList\nconst realIconsNameLists = [defaultItem, ...others, firstItem]\nrealIconsNameLists.forEach((nameInfo) => {\n  if (nameInfo.name.length > 16) {\n    const names = nameInfo.name.split(\" \")\n    nameInfo.name = names.slice(0, names.length - 1).join(\" \")\n  }\n})\nconst IconTypes = [\"All\", \"Filled\", \"Outline\"]\n\nexport const IconTriggerComponent: FC<IconTriggerComponentProps> = (props) => {\n  const { handleCurrentIconClick, handleCloseModal } = props\n\n  const [iconType, setIconType] = useState<IconShowType>(\"All\")\n  const [iconOrigin, setIconOrigin] = useState<string>(\"default\")\n  const [searchInput, setSearchInput] = useState<string>(\"\")\n\n  const RightBottomPanel = lazy(() => import(\"./IconPickerList\"))\n\n  const handleOnChange = (value: string) => {\n    setSearchInput(value)\n  }\n\n  const handleIconOriginChange = (origin: string) => {\n    setIconOrigin(origin)\n  }\n\n  const handleIconTypeChange = (type: string) => {\n    setIconType(type as IconShowType)\n  }\n\n  const handleCloseIconClick = useCallback(\n    () => handleCloseModal(false),\n    [handleCloseModal],\n  )\n\n  const Header = useMemo(\n    () => (\n      <div css={iconPickerHeaderContainerStyle}>\n        <div css={iconPickerHeaderTextStyle}>Icon picker</div>\n        <CloseIcon css={headerCloseIconStyle} onClick={handleCloseIconClick} />\n      </div>\n    ),\n    [handleCloseIconClick],\n  )\n\n  const LeftPanel = useMemo(\n    () => (\n      <div css={iconPickerLeftPanelStyle}>\n        {realIconsNameLists.map((info) => {\n          const { name, id } = info\n          return (\n            <div\n              css={[\n                leftPanelItemStyle,\n                getNameSelectedStyle(iconOrigin === id),\n              ]}\n              key={id}\n              onClick={() => handleIconOriginChange(id)}\n            >\n              {name}\n            </div>\n          )\n        })}\n      </div>\n    ),\n    [iconOrigin],\n  )\n\n  const RightTopPanel = useMemo(() => {\n    return (\n      <div css={rightTopPanelStyle}>\n        {IconTypes.map((type) => (\n          <div\n            css={[rightTopItemStyle, getSelectedStyle(iconType === type)]}\n            key={type}\n            onClick={() => handleIconTypeChange(type)}\n          >\n            {type}\n          </div>\n        ))}\n      </div>\n    )\n  }, [iconType])\n\n  const Fallback = () => {\n    return (\n      <div css={fallbackContainerStyle}>\n        <Loading />\n      </div>\n    )\n  }\n\n  const RightBottom = useMemo(() => {\n    return (\n      <Suspense fallback={<Fallback />}>\n        <RightBottomPanel\n          iconOrigin={iconOrigin}\n          iconType={iconType}\n          searchInput={searchInput}\n          handleCurrentIconClick={handleCurrentIconClick}\n        />\n      </Suspense>\n    )\n  }, [\n    RightBottomPanel,\n    handleCurrentIconClick,\n    iconOrigin,\n    iconType,\n    searchInput,\n  ])\n\n  const RightPanel = useMemo(() => {\n    return (\n      <div css={rightPanelStyle}>\n        {RightTopPanel}\n        {RightBottom}\n      </div>\n    )\n  }, [RightBottom, RightTopPanel])\n\n  const IconPickerBody = useMemo(() => {\n    return (\n      <div css={iconPickerBodyStyle}>\n        {LeftPanel}\n        {RightPanel}\n      </div>\n    )\n  }, [LeftPanel, RightPanel])\n\n  const IconSearchBar = useMemo(\n    () => (\n      <div css={iconPickerSearchStyle}>\n        <Search\n          value={searchInput}\n          colorScheme=\"techPurple\"\n          variant=\"fill\"\n          placeholder={t(\"editor.widget_picker.search_placeholder\")}\n          onChange={handleOnChange}\n        />\n      </div>\n    ),\n    [searchInput],\n  )\n\n  return (\n    <div css={iconPickerContainerStyle}>\n      {Header}\n      {IconSearchBar}\n      {IconPickerBody}\n    </div>\n  )\n}\n\nIconTriggerComponent.displayName = \"IconTriggerComponent\"\n","import { FC, MouseEventHandler, useCallback, useEffect, useState } from \"react\"\nimport { ErrorCircleIcon, getColor } from \"@illa-design/react\"\nimport {\n  applyBaseIconWrapperStyle,\n  clearIconStyle,\n  iconContentStyle,\n  iconSelectorContainerStyle,\n  iconSelectorIconStyle,\n} from \"@/page/App/components/InspectPanel/PanelSetters/IconSetter/style\"\nimport { BaseIconSetterProps, IconDataType } from \"./interface\"\n\nexport const BaseIconSetter: FC<BaseIconSetterProps> = (props) => {\n  const { attrName, isSetterSingleRow, handleUpdateDsl, showData } = props\n\n  const [displayData, setDisplayData] = useState<IconDataType | undefined>(\n    undefined,\n  )\n\n  useEffect(() => {\n    handleUpdateDsl(attrName, showData?.name)\n    setDisplayData(showData)\n  }, [attrName, handleUpdateDsl, showData])\n\n  const handleClearClick: MouseEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      event.stopPropagation()\n      setDisplayData(undefined)\n      handleUpdateDsl(attrName, undefined)\n    },\n    [attrName, handleUpdateDsl],\n  )\n\n  return (\n    <div css={applyBaseIconWrapperStyle(isSetterSingleRow)}>\n      <div css={iconSelectorContainerStyle}>\n        <div css={iconSelectorIconStyle}>\n          {displayData?.getIcon && displayData?.getIcon({})}\n        </div>\n        <span css={iconContentStyle}>{displayData?.name ?? \"\"}</span>\n        <div css={clearIconStyle} onClick={handleClearClick}>\n          <ErrorCircleIcon color={getColor(\"grayBlue\", \"05\")} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nBaseIconSetter.displayName = \"BaseIconSetter\"\n","import { ILLA_MIXPANEL_EVENT_TYPE } from \"@illa-public/mixpanel-utils\"\nimport { FC, useCallback, useState } from \"react\"\nimport { Trigger } from \"@illa-design/react\"\nimport { IconTriggerComponent } from \"@/page/App/components/InspectPanel/PanelSetters/IconSetter/IconTriggerComponent\"\nimport { BaseIconSetter } from \"@/page/App/components/InspectPanel/PanelSetters/IconSetter/baseIconSetter\"\nimport {\n  IconDataType,\n  IconSelectorProps,\n} from \"@/page/App/components/InspectPanel/PanelSetters/IconSetter/interface\"\nimport { PanelLabel } from \"@/page/App/components/InspectPanel/components/Label\"\nimport { trackInEditor } from \"@/utils/mixpanelHelper\"\nimport { AllData } from \"@/widgetLibrary/IconWidget/utils\"\nimport { setterContainerStyle } from \"./style\"\n\nconst IconSelector: FC<IconSelectorProps> = (props) => {\n  const {\n    value,\n    widgetType,\n    attrName,\n    labelName,\n    labelDesc,\n    labelSize,\n    isSetterSingleRow,\n  } = props\n  const [rightPanelData, setRightPanelData] = useState<IconDataType>({\n    name: value,\n    getIcon: AllData[value],\n  })\n  const [modalVisible, setModalVisible] = useState(false)\n\n  const handleCurrentIconClick = useCallback(\n    ({ getIcon, name }: IconDataType) => {\n      trackInEditor(ILLA_MIXPANEL_EVENT_TYPE.CHANGE, {\n        element: \"component_inspect_select\",\n        parameter1: widgetType,\n        parameter2: attrName,\n        parameter3: name,\n      })\n      setRightPanelData({ getIcon, name })\n      setModalVisible(false)\n    },\n    [attrName, widgetType],\n  )\n\n  const handleCloseModal = useCallback(\n    (visible: boolean) => {\n      if (visible) {\n        trackInEditor(ILLA_MIXPANEL_EVENT_TYPE.CLICK, {\n          element: \"component_inspect_select\",\n          parameter1: widgetType,\n          parameter2: attrName,\n        })\n      }\n      setModalVisible(visible)\n    },\n    [attrName, widgetType],\n  )\n\n  return (\n    <div css={setterContainerStyle(isSetterSingleRow)}>\n      {labelName && (\n        <span>\n          <PanelLabel\n            labelName={labelName}\n            labelDesc={labelDesc}\n            labelSize={labelSize}\n          />\n        </span>\n      )}\n      <Trigger\n        withoutPadding\n        colorScheme=\"white\"\n        popupVisible={modalVisible}\n        content={\n          <IconTriggerComponent\n            handleCurrentIconClick={handleCurrentIconClick}\n            handleCloseModal={handleCloseModal}\n          />\n        }\n        trigger=\"click\"\n        showArrow={false}\n        position=\"left-start\"\n        clickOutsideToClose\n        onVisibleChange={handleCloseModal}\n      >\n        <div>\n          <BaseIconSetter {...props} showData={rightPanelData} />\n        </div>\n      </Trigger>\n    </div>\n  )\n}\n\nIconSelector.displayName = \"IconSelector\"\nexport default IconSelector\n"],"file":"assets/IconSelector-5a7dbcf7.js"}