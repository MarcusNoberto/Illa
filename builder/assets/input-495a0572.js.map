{"version":3,"file":"input-495a0572.js","sources":["../../src/widgetLibrary/InputWidget/utils.ts","../../src/widgetLibrary/InputWidget/input.tsx"],"sourcesContent":["import {\n  getValidateVFromString,\n  handleValidateCheck,\n} from \"../PublicSector/InvalidMessage/utils\"\nimport { InputWidgetProps } from \"./interface\"\n\nexport const getValidateMessageFunc = (\n  value: string | undefined,\n  options: {\n    hideValidationMessage?: InputWidgetProps[\"hideValidationMessage\"]\n    pattern?: InputWidgetProps[\"pattern\"]\n    regex?: InputWidgetProps[\"regex\"]\n    minLength?: InputWidgetProps[\"minLength\"]\n    maxLength?: InputWidgetProps[\"maxLength\"]\n    required?: InputWidgetProps[\"required\"]\n    customRule?: InputWidgetProps[\"customRule\"]\n  } = {},\n) => {\n  const {\n    hideValidationMessage,\n    pattern,\n    regex,\n    maxLength,\n    minLength,\n    required,\n    customRule,\n  } = options\n  if (!hideValidationMessage) {\n    const message = handleValidateCheck({\n      value: getValidateVFromString(value),\n      pattern,\n      regex,\n      minLength,\n      maxLength,\n      required,\n      customRule,\n    })\n    const showMessage = message && message.length > 0\n    return showMessage ? message : \"\"\n  }\n  return \"\"\n}\n","import { debounce } from \"lodash-es\"\nimport { FC, forwardRef, useCallback, useEffect, useRef, useState } from \"react\"\nimport { Input, Password, Search } from \"@illa-design/react\"\nimport { AutoHeightContainer } from \"@/widgetLibrary/PublicSector/AutoHeightContainer\"\nimport { InvalidMessage } from \"@/widgetLibrary/PublicSector/InvalidMessage\"\nimport { Label } from \"@/widgetLibrary/PublicSector/Label\"\nimport { TooltipWrapper } from \"@/widgetLibrary/PublicSector/TooltipWrapper\"\nimport {\n  applyLabelAndComponentWrapperStyle,\n  applyValidateMessageWrapperStyle,\n} from \"@/widgetLibrary/PublicSector/TransformWidgetWrapper/style\"\nimport { InputWidgetProps, WrappedInputProps } from \"./interface\"\nimport { getValidateMessageFunc } from \"./utils\"\n\nexport const WrappedInput = forwardRef<HTMLInputElement, WrappedInputProps>(\n  (props, ref) => {\n    const {\n      type = \"input\",\n      showVisibleButton = true,\n      value,\n      placeholder,\n      disabled,\n      readOnly,\n      prefixText,\n      suffixText,\n      showCharacterCount,\n      colorScheme,\n      handleOnChange,\n      handleOnFocus,\n      handleOnBlur,\n      allowClear,\n      maxLength,\n      minLength,\n      clearValue,\n    } = props\n\n    return (\n      <>\n        {type === \"input\" && (\n          <Input\n            w=\"100%\"\n            inputRef={ref}\n            value={value}\n            placeholder={placeholder}\n            disabled={disabled}\n            readOnly={readOnly}\n            addBefore={prefixText}\n            addAfter={suffixText}\n            onFocus={handleOnFocus}\n            onBlur={handleOnBlur}\n            onChange={handleOnChange}\n            showWordLimit={showCharacterCount}\n            colorScheme={colorScheme}\n            allowClear={allowClear}\n            onClear={clearValue}\n            maxLength={maxLength}\n            minLength={minLength}\n          />\n        )}\n        {type === \"password\" && (\n          <Password\n            w=\"100%\"\n            inputRef={ref}\n            value={value}\n            autoComplete=\"new-password\"\n            visibilityToggle={showVisibleButton}\n            placeholder={placeholder}\n            disabled={disabled}\n            readOnly={readOnly}\n            addBefore={prefixText}\n            addAfter={suffixText}\n            onFocus={handleOnFocus}\n            onBlur={handleOnBlur}\n            onChange={handleOnChange}\n            showWordLimit={showCharacterCount}\n            colorScheme={colorScheme}\n            allowClear={allowClear}\n            onClear={clearValue}\n            maxLength={maxLength}\n            minLength={minLength}\n          />\n        )}\n        {type === \"search\" && (\n          <Search\n            w=\"100%\"\n            inputRef={ref}\n            value={value}\n            placeholder={placeholder}\n            disabled={disabled}\n            readOnly={readOnly}\n            addBefore={prefixText}\n            addAfter={suffixText}\n            onFocus={handleOnFocus}\n            onBlur={handleOnBlur}\n            onChange={handleOnChange}\n            showWordLimit={showCharacterCount}\n            colorScheme={colorScheme}\n            allowClear={allowClear}\n            onClear={clearValue}\n            maxLength={maxLength}\n            minLength={minLength}\n          />\n        )}\n      </>\n    )\n  },\n)\nWrappedInput.displayName = \"WrappedInput\"\n\nexport const InputWidget: FC<InputWidgetProps> = (props) => {\n  const {\n    displayName,\n    value,\n    handleUpdateDsl,\n    minLength,\n    maxLength,\n    labelPosition,\n    labelFull,\n    label,\n    labelAlign,\n    labelWidth = 33,\n    labelCaption,\n    labelWidthUnit,\n    required,\n    labelHidden,\n    tooltipText,\n    pattern,\n    regex,\n    customRule,\n    hideValidationMessage,\n    defaultValue,\n    updateComponentHeight,\n    validateMessage,\n    triggerEventHandler,\n    updateComponentRuntimeProps,\n    deleteComponentRuntimeProps,\n    handleUpdateMultiExecutionResult,\n  } = props\n\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const [inputValue, setInputValue] = useState<string>(\n    value || defaultValue || \"\",\n  )\n\n  useEffect(() => {\n    setInputValue(defaultValue)\n\n    handleUpdateMultiExecutionResult([\n      {\n        displayName,\n        value: {\n          value: defaultValue || \"\",\n        },\n      },\n    ])\n  }, [defaultValue, displayName, handleUpdateMultiExecutionResult])\n\n  const handleValidate = useCallback(\n    (value?: string) => {\n      const message = getValidateMessageFunc(value, {\n        hideValidationMessage: hideValidationMessage,\n        pattern: pattern,\n        regex: regex,\n        minLength: minLength,\n        maxLength: maxLength,\n        required: required,\n        customRule: customRule,\n      })\n      handleUpdateDsl({\n        validateMessage: message,\n      })\n      return message\n    },\n    [\n      customRule,\n      handleUpdateDsl,\n      hideValidationMessage,\n      maxLength,\n      minLength,\n      pattern,\n      regex,\n      required,\n    ],\n  )\n\n  const debounceOnChange = useRef(\n    debounce(\n      (\n        value: string,\n        triggerEventHandler: InputWidgetProps[\"triggerEventHandler\"],\n        options?: {\n          hideValidationMessage?: InputWidgetProps[\"hideValidationMessage\"]\n          pattern?: InputWidgetProps[\"pattern\"]\n          regex?: InputWidgetProps[\"regex\"]\n          minLength?: InputWidgetProps[\"minLength\"]\n          maxLength?: InputWidgetProps[\"maxLength\"]\n          required?: InputWidgetProps[\"required\"]\n          customRule?: InputWidgetProps[\"customRule\"]\n        },\n      ) => {\n        new Promise((resolve) => {\n          const message = getValidateMessageFunc(value, options)\n          handleUpdateMultiExecutionResult([\n            {\n              displayName,\n              value: {\n                value: value || \"\",\n                validateMessage: message,\n              },\n            },\n          ])\n          resolve(true)\n        }).then(() => {\n          triggerEventHandler(\"change\")\n        })\n      },\n      180,\n    ),\n  )\n\n  const handleOnChange = useCallback(\n    (value: string) => {\n      setInputValue(value)\n      debounceOnChange.current(value, triggerEventHandler, {\n        hideValidationMessage: hideValidationMessage,\n        pattern: pattern,\n        regex: regex,\n        minLength: minLength,\n        maxLength: maxLength,\n        required: required,\n        customRule: customRule,\n      })\n    },\n    [\n      customRule,\n      hideValidationMessage,\n      maxLength,\n      minLength,\n      pattern,\n      regex,\n      required,\n      triggerEventHandler,\n    ],\n  )\n\n  const clearValue = useCallback(() => {\n    handleOnChange(\"\")\n  }, [handleOnChange])\n\n  useEffect(() => {\n    updateComponentRuntimeProps({\n      focus: () => {\n        inputRef.current?.focus()\n      },\n      setValue: (value: boolean | string | number | void) => {\n        if (typeof value === \"string\") {\n          handleOnChange(value)\n        }\n      },\n      clearValue: () => {\n        clearValue()\n      },\n      validate: () => {\n        return handleValidate(value)\n      },\n      clearValidation: () => {\n        handleUpdateDsl({\n          validateMessage: \"\",\n        })\n      },\n    })\n\n    return () => {\n      deleteComponentRuntimeProps()\n    }\n  }, [\n    clearValue,\n    deleteComponentRuntimeProps,\n    handleOnChange,\n    handleUpdateDsl,\n    handleValidate,\n    updateComponentRuntimeProps,\n    value,\n  ])\n\n  const handleOnFocus = useCallback(() => {\n    triggerEventHandler(\"focus\")\n  }, [triggerEventHandler])\n\n  const handleOnBlur = useCallback(() => {\n    triggerEventHandler(\"blur\")\n  }, [triggerEventHandler])\n\n  return (\n    <AutoHeightContainer updateComponentHeight={updateComponentHeight}>\n      <TooltipWrapper tooltipText={tooltipText} tooltipDisabled={!tooltipText}>\n        <div css={applyLabelAndComponentWrapperStyle(labelPosition)}>\n          <Label\n            labelFull={labelFull}\n            label={label}\n            labelAlign={labelAlign}\n            labelWidth={labelWidth}\n            labelCaption={labelCaption}\n            labelWidthUnit={labelWidthUnit}\n            labelPosition={labelPosition}\n            required={required}\n            labelHidden={labelHidden}\n            hasTooltip={!!tooltipText}\n          />\n          <WrappedInput\n            {...props}\n            value={inputValue}\n            ref={inputRef}\n            handleOnChange={handleOnChange}\n            handleOnFocus={handleOnFocus}\n            handleOnBlur={handleOnBlur}\n            clearValue={clearValue}\n          />\n        </div>\n      </TooltipWrapper>\n\n      {!hideValidationMessage && (\n        <div\n          css={applyValidateMessageWrapperStyle(\n            labelWidth,\n            labelPosition,\n            labelHidden || !label,\n          )}\n        >\n          <InvalidMessage validateMessage={validateMessage} />\n        </div>\n      )}\n    </AutoHeightContainer>\n  )\n}\n\nInputWidget.displayName = \"InputWidget\"\nexport default InputWidget\n"],"names":["getValidateMessageFunc","value","options","hideValidationMessage","pattern","regex","maxLength","minLength","required","customRule","message","handleValidateCheck","getValidateVFromString","WrappedInput","forwardRef","props","ref","type","showVisibleButton","placeholder","disabled","readOnly","prefixText","suffixText","showCharacterCount","colorScheme","handleOnChange","handleOnFocus","handleOnBlur","allowClear","clearValue","jsxs","Fragment","jsx","Input","Password","Search","InputWidget","displayName","handleUpdateDsl","labelPosition","labelFull","label","labelAlign","labelWidth","labelCaption","labelWidthUnit","labelHidden","tooltipText","defaultValue","updateComponentHeight","validateMessage","triggerEventHandler","updateComponentRuntimeProps","deleteComponentRuntimeProps","handleUpdateMultiExecutionResult","inputRef","useRef","inputValue","setInputValue","useState","useEffect","handleValidate","useCallback","debounceOnChange","debounce","resolve","_a","AutoHeightContainer","TooltipWrapper","applyLabelAndComponentWrapperStyle","Label","applyValidateMessageWrapperStyle","InvalidMessage"],"mappings":"6fAMO,MAAMA,EAAyB,CACpCC,EACAC,EAQI,KACD,CACG,KAAA,CACJ,sBAAAC,EACA,QAAAC,EACA,MAAAC,EACA,UAAAC,EACA,UAAAC,EACA,SAAAC,EACA,WAAAC,CACE,EAAAP,EACJ,GAAI,CAACC,EAAuB,CAC1B,MAAMO,EAAUC,EAAoB,CAClC,MAAOC,EAAuBX,CAAK,EACnC,QAAAG,EACA,MAAAC,EACA,UAAAE,EACA,UAAAD,EACA,SAAAE,EACA,WAAAC,CAAA,CACD,EAED,OADoBC,GAAWA,EAAQ,OAAS,EAC3BA,EAAU,EACjC,CACO,MAAA,EACT,EC3BaG,EAAeC,EAAA,WAC1B,CAACC,EAAOC,IAAQ,CACR,KAAA,CACJ,KAAAC,EAAO,QACP,kBAAAC,EAAoB,GACpB,MAAAjB,EACA,YAAAkB,EACA,SAAAC,EACA,SAAAC,EACA,WAAAC,EACA,WAAAC,EACA,mBAAAC,EACA,YAAAC,EACA,eAAAC,EACA,cAAAC,EACA,aAAAC,EACA,WAAAC,EACA,UAAAvB,EACA,UAAAC,EACA,WAAAuB,CACE,EAAAf,EAEJ,OAEKgB,EAAAC,EAAA,CAAA,SAAA,CAAAf,IAAS,SACRgB,EAACC,EAAA,CACC,EAAE,OACF,SAAUlB,EACV,MAAAf,EACA,YAAAkB,EACA,SAAAC,EACA,SAAAC,EACA,UAAWC,EACX,SAAUC,EACV,QAASI,EACT,OAAQC,EACR,SAAUF,EACV,cAAeF,EACf,YAAAC,EACA,WAAAI,EACA,QAASC,EACT,UAAAxB,EACA,UAAAC,CAAA,CACF,EAEDU,IAAS,YACRgB,EAACE,EAAA,CACC,EAAE,OACF,SAAUnB,EACV,MAAAf,EACA,aAAa,eACb,iBAAkBiB,EAClB,YAAAC,EACA,SAAAC,EACA,SAAAC,EACA,UAAWC,EACX,SAAUC,EACV,QAASI,EACT,OAAQC,EACR,SAAUF,EACV,cAAeF,EACf,YAAAC,EACA,WAAAI,EACA,QAASC,EACT,UAAAxB,EACA,UAAAC,CAAA,CACF,EAEDU,IAAS,UACRgB,EAACG,EAAA,CACC,EAAE,OACF,SAAUpB,EACV,MAAAf,EACA,YAAAkB,EACA,SAAAC,EACA,SAAAC,EACA,UAAWC,EACX,SAAUC,EACV,QAASI,EACT,OAAQC,EACR,SAAUF,EACV,cAAeF,EACf,YAAAC,EACA,WAAAI,EACA,QAASC,EACT,UAAAxB,EACA,UAAAC,CAAA,CACF,CAEJ,CAAA,CAAA,CAEJ,CACF,EACAM,EAAa,YAAc,eAEd,MAAAwB,GAAqCtB,GAAU,CACpD,KAAA,CACJ,YAAAuB,EACA,MAAArC,EACA,gBAAAsC,EACA,UAAAhC,EACA,UAAAD,EACA,cAAAkC,EACA,UAAAC,EACA,MAAAC,EACA,WAAAC,EACA,WAAAC,EAAa,GACb,aAAAC,EACA,eAAAC,EACA,SAAAtC,EACA,YAAAuC,EACA,YAAAC,EACA,QAAA5C,EACA,MAAAC,EACA,WAAAI,EACA,sBAAAN,EACA,aAAA8C,EACA,sBAAAC,EACA,gBAAAC,EACA,oBAAAC,EACA,4BAAAC,EACA,4BAAAC,EACA,iCAAAC,CACE,EAAAxC,EAEEyC,EAAWC,SAAyB,IAAI,EAExC,CAACC,EAAYC,CAAa,EAAIC,EAAA,SAClC3D,GAASgD,GAAgB,EAAA,EAG3BY,EAAAA,UAAU,IAAM,CACdF,EAAcV,CAAY,EAEOM,EAAA,CAC/B,CACE,YAAAjB,EACA,MAAO,CACL,MAAOW,GAAgB,EACzB,CACF,CAAA,CACD,CACA,EAAA,CAACA,EAAcX,EAAaiB,CAAgC,CAAC,EAEhE,MAAMO,EAAiBC,EAAA,YACpB9D,GAAmB,CACZ,MAAAS,EAAUV,EAAuBC,EAAO,CAC5C,sBAAAE,EACA,QAAAC,EACA,MAAAC,EACA,UAAAE,EACA,UAAAD,EACA,SAAAE,EACA,WAAAC,CAAA,CACD,EACe,OAAA8B,EAAA,CACd,gBAAiB7B,CAAA,CAClB,EACMA,CACT,EACA,CACED,EACA8B,EACApC,EACAG,EACAC,EACAH,EACAC,EACAG,CACF,CAAA,EAGIwD,EAAmBP,EAAA,OACvBQ,GACE,CACEhE,EACAmD,EACAlD,IASG,CACC,IAAA,QAASgE,GAAY,CACjB,MAAAxD,EAAUV,EAAuBC,EAAOC,CAAO,EACpBqD,EAAA,CAC/B,CACE,YAAAjB,EACA,MAAO,CACL,MAAOrC,GAAS,GAChB,gBAAiBS,CACnB,CACF,CAAA,CACD,EACDwD,EAAQ,EAAI,CAAA,CACb,EAAE,KAAK,IAAM,CACZd,EAAoB,QAAQ,CAAA,CAC7B,CACH,EACA,GACF,CAAA,EAGI1B,EAAiBqC,EAAA,YACpB9D,GAAkB,CACjB0D,EAAc1D,CAAK,EACF+D,EAAA,QAAQ/D,EAAOmD,EAAqB,CACnD,sBAAAjD,EACA,QAAAC,EACA,MAAAC,EACA,UAAAE,EACA,UAAAD,EACA,SAAAE,EACA,WAAAC,CAAA,CACD,CACH,EACA,CACEA,EACAN,EACAG,EACAC,EACAH,EACAC,EACAG,EACA4C,CACF,CAAA,EAGItB,EAAaiC,EAAAA,YAAY,IAAM,CACnCrC,EAAe,EAAE,CAAA,EAChB,CAACA,CAAc,CAAC,EAEnBmC,EAAAA,UAAU,KACoBR,EAAA,CAC1B,MAAO,IAAM,QACXc,EAAAX,EAAS,UAAT,MAAAW,EAAkB,OACpB,EACA,SAAWlE,GAA4C,CACjD,OAAOA,GAAU,UACnByB,EAAezB,CAAK,CAExB,EACA,WAAY,IAAM,CACL6B,GACb,EACA,SAAU,IACDgC,EAAe7D,CAAK,EAE7B,gBAAiB,IAAM,CACLsC,EAAA,CACd,gBAAiB,EAAA,CAClB,CACH,CAAA,CACD,EAEM,IAAM,CACiBe,GAAA,GAE7B,CACDxB,EACAwB,EACA5B,EACAa,EACAuB,EACAT,EACApD,CAAA,CACD,EAEK,MAAA0B,EAAgBoC,EAAAA,YAAY,IAAM,CACtCX,EAAoB,OAAO,CAAA,EAC1B,CAACA,CAAmB,CAAC,EAElBxB,EAAemC,EAAAA,YAAY,IAAM,CACrCX,EAAoB,MAAM,CAAA,EACzB,CAACA,CAAmB,CAAC,EAGtB,OAAArB,EAACqC,GAAoB,sBAAAlB,EACnB,SAAA,CAACjB,EAAAoC,GAAA,CAAe,YAAArB,EAA0B,gBAAiB,CAACA,EAC1D,WAAC,MAAI,CAAA,IAAKsB,GAAmC9B,CAAa,EACxD,SAAA,CAAAP,EAACsC,GAAA,CACC,UAAA9B,EACA,MAAAC,EACA,WAAAC,EACA,WAAAC,EACA,aAAAC,EACA,eAAAC,EACA,cAAAN,EACA,SAAAhC,EACA,YAAAuC,EACA,WAAY,CAAC,CAACC,CAAA,CAChB,EACAf,EAACpB,EAAA,CACE,GAAGE,EACJ,MAAO2C,EACP,IAAKF,EACL,eAAA9B,EACA,cAAAC,EACA,aAAAC,EACA,WAAAE,CAAA,CACF,CAAA,CAAA,CACF,CACF,CAAA,EAEC,CAAC3B,GACA8B,EAAC,MAAA,CACC,IAAKuC,GACH5B,EACAJ,EACAO,GAAe,CAACL,CAClB,EAEA,SAAAT,EAACwC,GAAe,gBAAAtB,CAAkC,CAAA,CAAA,CACpD,CAEJ,CAAA,CAAA,CAEJ,EAEAd,GAAY,YAAc"}