{"version":3,"file":"eventBodyViewSelect-fb4fbd76.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/SelectSetter/eventBodyViewSelect.tsx"],"sourcesContent":["import { convertPathToString } from \"@illa-public/dynamic-string\"\nimport { get, toPath } from \"lodash-es\"\nimport { FC, useMemo } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport {\n  getComponentMap,\n  searchComponentFromMap,\n} from \"@/redux/currentApp/components/componentsSelector\"\nimport { BaseSelectSetterProps } from \"./interface\"\nimport SearchSelectSetter from \"./searchSelect\"\n\nconst EventTargetViewSelect: FC<BaseSelectSetterProps> = (props) => {\n  const { attrName, value, componentNode, widgetOrAction, panelConfig } = props\n\n  let parentAttrNameArray = toPath(attrName)\n  parentAttrNameArray.splice(-1, 1)\n\n  const parentAttr =\n    widgetOrAction === \"WIDGET\"\n      ? get(componentNode, `props.${convertPathToString(parentAttrNameArray)}`)\n      : get(panelConfig, convertPathToString(parentAttrNameArray))\n\n  const pagePath = get(parentAttr, \"pagePath\")\n  const componentsMap = useSelector(getComponentMap)\n  const pageComponent = searchComponentFromMap(componentsMap, pagePath)\n\n  const finalOptions = useMemo(() => {\n    if (!pageComponent) return []\n    const options: { label: string; value: string }[] = []\n    const walkedConfig = new Map<string, Record<string, any>>()\n    pageComponent.childrenNode.forEach((node) => {\n      const component = searchComponentFromMap(componentsMap, node)\n      const { props } = component ?? {}\n      if (\n        props &&\n        Array.isArray(props.viewSortedKey) &&\n        Array.isArray(props.sectionViewConfigs)\n      ) {\n        props.sectionViewConfigs.forEach((config) => {\n          if (walkedConfig.get(config.path)) return\n          walkedConfig.set(config.path, config)\n          options.push({\n            label: config.path,\n            value: config.path,\n          })\n        })\n      }\n    })\n    return options\n  }, [componentsMap, pageComponent])\n\n  const finalValue = useMemo(() => {\n    const index = finalOptions.findIndex((option) => {\n      return option.value === value\n    })\n    if (index !== -1) return value\n    return undefined\n  }, [finalOptions, value])\n\n  return (\n    <SearchSelectSetter\n      {...props}\n      value={finalValue as string}\n      options={finalOptions}\n    />\n  )\n}\n\nEventTargetViewSelect.displayName = \"EventTargetViewSelect\"\n\nexport default EventTargetViewSelect\n"],"names":["EventTargetViewSelect","props","attrName","value","componentNode","widgetOrAction","panelConfig","parentAttrNameArray","toPath","parentAttr","get","convertPathToString","pagePath","componentsMap","useSelector","getComponentMap","pageComponent","searchComponentFromMap","finalOptions","useMemo","options","walkedConfig","node","component","config","finalValue","option","jsx","SearchSelectSetter"],"mappings":"0dAWM,MAAAA,EAAoDC,GAAU,CAClE,KAAM,CAAE,SAAAC,EAAU,MAAAC,EAAO,cAAAC,EAAe,eAAAC,EAAgB,YAAAC,CAAgB,EAAAL,EAEpE,IAAAM,EAAsBC,EAAON,CAAQ,EACrBK,EAAA,OAAO,GAAI,CAAC,EAEhC,MAAME,EACJJ,IAAmB,SACfK,EAAIN,EAAe,SAASO,EAAoBJ,CAAmB,CAAC,EAAE,EACtEG,EAAIJ,EAAaK,EAAoBJ,CAAmB,CAAC,EAEzDK,EAAWF,EAAID,EAAY,UAAU,EACrCI,EAAgBC,EAAYC,CAAe,EAC3CC,EAAgBC,EAAuBJ,EAAeD,CAAQ,EAE9DM,EAAeC,EAAAA,QAAQ,IAAM,CACjC,GAAI,CAACH,EAAe,MAAO,GAC3B,MAAMI,EAA8C,CAAA,EAC9CC,MAAmB,IACX,OAAAL,EAAA,aAAa,QAASM,GAAS,CACrC,MAAAC,EAAYN,EAAuBJ,EAAeS,CAAI,EACtD,CAAE,MAAArB,GAAUsB,GAAa,CAAA,EAE7BtB,GACA,MAAM,QAAQA,EAAM,aAAa,GACjC,MAAM,QAAQA,EAAM,kBAAkB,GAEtCA,EAAM,mBAAmB,QAASuB,GAAW,CACvCH,EAAa,IAAIG,EAAO,IAAI,IACnBH,EAAA,IAAIG,EAAO,KAAMA,CAAM,EACpCJ,EAAQ,KAAK,CACX,MAAOI,EAAO,KACd,MAAOA,EAAO,IAAA,CACf,EAAA,CACF,CACH,CACD,EACMJ,CAAA,EACN,CAACP,EAAeG,CAAa,CAAC,EAE3BS,EAAaN,EAAAA,QAAQ,IAAM,CAI/B,GAHcD,EAAa,UAAWQ,GAC7BA,EAAO,QAAUvB,CACzB,IACa,GAAW,OAAAA,CAClB,EACN,CAACe,EAAcf,CAAK,CAAC,EAGtB,OAAAwB,EAACC,EAAA,CACE,GAAG3B,EACJ,MAAOwB,EACP,QAASP,CAAA,CAAA,CAGf,EAEAlB,EAAsB,YAAc"}