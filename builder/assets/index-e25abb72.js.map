{"version":3,"file":"index-e25abb72.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/DataGridSetter/ColumnMappedInput/index.tsx"],"sourcesContent":["import { hasDynamicStringSnippet } from \"@illa-public/dynamic-string\"\nimport { ILLA_MIXPANEL_EVENT_TYPE } from \"@illa-public/mixpanel-utils\"\nimport { get, isString } from \"lodash-es\"\nimport { FC, useCallback, useMemo } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { CodeEditor } from \"@/components/CodeEditor\"\nimport {\n  CODE_LANG,\n  CODE_TYPE,\n} from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport {\n  getNeedComputedValueWithDataList,\n  realInputValueWithDataList,\n} from \"@/page/App/components/InspectPanel/PanelSetters/DataGridSetter/utils\"\nimport {\n  applyInputSetterWrapperStyle,\n  setterContainerStyle,\n} from \"@/page/App/components/InspectPanel/PanelSetters/InputSetter/BaseInput/style\"\nimport { PanelLabel } from \"@/page/App/components/InspectPanel/components/Label\"\nimport { getExecutionResult } from \"@/redux/currentApp/executionTree/executionSelector\"\nimport { RootState } from \"@/store\"\nimport { trackInEditor } from \"@/utils/mixpanelHelper\"\nimport { ColumnMappedInputProps } from \"./interface\"\n\nconst ColumnMappedInput: FC<ColumnMappedInputProps> = (props) => {\n  const {\n    isSetterSingleRow,\n    placeholder,\n    attrName,\n    handleUpdateDsl,\n    expectedType,\n    value,\n    widgetDisplayName,\n    labelName,\n    detailedDescription,\n    defaultValue,\n    labelDesc,\n    widgetType,\n    wrappedCodeFunc,\n    labelSize,\n    onlyHasSetter = false,\n  } = props\n\n  const targetComponentProps = useSelector<RootState, Record<string, any>>(\n    (rootState) => {\n      const executionTree = getExecutionResult(rootState)\n      return get(executionTree, widgetDisplayName, {})\n    },\n  )\n\n  const dataSourceMode = get(targetComponentProps, \"dataSourceMode\", \"dynamic\")\n\n  const finalWrapperCode = useMemo(() => {\n    if (\n      hasDynamicStringSnippet(value ?? \"\") &&\n      isString(value) &&\n      value?.includes(\"currentRow\")\n    ) {\n      return (value: string) => {\n        return getNeedComputedValueWithDataList(\n          value,\n          widgetDisplayName,\n          dataSourceMode,\n        )\n      }\n    }\n    return wrappedCodeFunc\n  }, [value, wrappedCodeFunc, widgetDisplayName, dataSourceMode])\n\n  const finalValue = useMemo(() => {\n    const v = value ?? defaultValue\n\n    if (widgetDisplayName && isString(v) && v.includes(\"currentRow\")) {\n      return realInputValueWithDataList(\n        value ?? defaultValue,\n        widgetDisplayName,\n      )\n    }\n\n    if (value === undefined && defaultValue === undefined) {\n      return undefined\n    }\n    if (!isString(value ?? defaultValue)) {\n      return `{{ ${value ?? defaultValue} }}`\n    }\n    return value ?? defaultValue\n  }, [widgetDisplayName, value, defaultValue])\n\n  const onChange = useCallback(\n    (value: string) => {\n      let output = value\n      if (\n        hasDynamicStringSnippet(value ?? \"\") &&\n        value.includes(\"currentRow\")\n      ) {\n        output = getNeedComputedValueWithDataList(\n          value,\n          widgetDisplayName,\n          dataSourceMode,\n        )\n        handleUpdateDsl(attrName, output)\n      } else {\n        if (output === \"\") {\n          handleUpdateDsl(attrName, undefined)\n        } else {\n          handleUpdateDsl(attrName, output)\n        }\n      }\n    },\n    [attrName, dataSourceMode, handleUpdateDsl, widgetDisplayName],\n  )\n\n  const onFocus = useCallback(() => {\n    trackInEditor(ILLA_MIXPANEL_EVENT_TYPE.FOCUS, {\n      element: \"component_inspect_code_mirror\",\n      parameter1: widgetType,\n      parameter2: attrName,\n    })\n  }, [attrName, widgetType])\n\n  const onBlur = useCallback(\n    (value: string) => {\n      trackInEditor(ILLA_MIXPANEL_EVENT_TYPE.BLUR, {\n        element: \"component_inspect_code_mirror\",\n        parameter1: widgetType,\n        parameter2: attrName,\n        parameter3: value.length,\n      })\n    },\n    [attrName, widgetType],\n  )\n\n  return (\n    <div css={setterContainerStyle(isSetterSingleRow, onlyHasSetter)}>\n      {!onlyHasSetter && labelName && (\n        <span>\n          <PanelLabel\n            labelName={labelName}\n            labelDesc={labelDesc}\n            labelSize={labelSize}\n          />\n        </span>\n      )}\n      <div css={applyInputSetterWrapperStyle(isSetterSingleRow)}>\n        <CodeEditor\n          scopeOfAutoComplete=\"page\"\n          value={finalValue}\n          onChange={onChange}\n          showLineNumbers={false}\n          placeholder={placeholder}\n          expectValueType={expectedType}\n          lang={CODE_LANG.JAVASCRIPT}\n          maxHeight=\"208px\"\n          maxWidth=\"100%\"\n          codeType={CODE_TYPE.EXPRESSION}\n          modalTitle={labelName}\n          modalDescription={detailedDescription ?? labelDesc}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          wrappedCodeFunc={finalWrapperCode}\n        />\n      </div>\n    </div>\n  )\n}\n\nColumnMappedInput.displayName = \"ColumnMappedInput\"\nexport default ColumnMappedInput\n"],"names":["ColumnMappedInput","props","isSetterSingleRow","placeholder","attrName","handleUpdateDsl","expectedType","value","widgetDisplayName","labelName","detailedDescription","defaultValue","labelDesc","widgetType","wrappedCodeFunc","labelSize","onlyHasSetter","targetComponentProps","useSelector","rootState","executionTree","getExecutionResult","get","dataSourceMode","finalWrapperCode","useMemo","hasDynamicStringSnippet","isString","getNeedComputedValueWithDataList","finalValue","v","realInputValueWithDataList","onChange","useCallback","output","onFocus","trackInEditor","ILLA_MIXPANEL_EVENT_TYPE","onBlur","setterContainerStyle","jsx","PanelLabel","applyInputSetterWrapperStyle","CodeEditor","CODE_LANG","CODE_TYPE"],"mappings":"onBAwBM,MAAAA,EAAiDC,GAAU,CACzD,KAAA,CACJ,kBAAAC,EACA,YAAAC,EACA,SAAAC,EACA,gBAAAC,EACA,aAAAC,EACA,MAAAC,EACA,kBAAAC,EACA,UAAAC,EACA,oBAAAC,EACA,aAAAC,EACA,UAAAC,EACA,WAAAC,EACA,gBAAAC,EACA,UAAAC,EACA,cAAAC,EAAgB,EACd,EAAAf,EAEEgB,EAAuBC,EAC1BC,GAAc,CACP,MAAAC,EAAgBC,EAAmBF,CAAS,EAClD,OAAOG,EAAIF,EAAeZ,EAAmB,CAAE,CAAA,CACjD,CAAA,EAGIe,EAAiBD,EAAIL,EAAsB,iBAAkB,SAAS,EAEtEO,EAAmBC,EAAAA,QAAQ,IAE7BC,EAAwBnB,GAAS,EAAE,GACnCoB,EAASpB,CAAK,IACdA,GAAA,MAAAA,EAAO,SAAS,eAERA,GACCqB,EACLrB,EACAC,EACAe,CAAA,EAICT,EACN,CAACP,EAAOO,EAAiBN,EAAmBe,CAAc,CAAC,EAExDM,EAAaJ,EAAAA,QAAQ,IAAM,CAC/B,MAAMK,EAAIvB,GAASI,EAEnB,GAAIH,GAAqBmB,EAASG,CAAC,GAAKA,EAAE,SAAS,YAAY,EACtD,OAAAC,EACLxB,GAASI,EACTH,CAAA,EAIA,GAAA,EAAAD,IAAU,QAAaI,IAAiB,QAG5C,OAAKgB,EAASpB,GAASI,CAAY,EAG5BJ,GAASI,EAFP,MAAMJ,GAASI,CAAY,KAGnC,EAAA,CAACH,EAAmBD,EAAOI,CAAY,CAAC,EAErCqB,EAAWC,EAAA,YACd1B,GAAkB,CACjB,IAAI2B,EAAS3B,EAEXmB,EAAwBnB,GAAS,EAAE,GACnCA,EAAM,SAAS,YAAY,GAElB2B,EAAAN,EACPrB,EACAC,EACAe,CAAA,EAEFlB,EAAgBD,EAAU8B,CAAM,GAE5BA,IAAW,GACb7B,EAAgBD,EAAU,MAAS,EAEnCC,EAAgBD,EAAU8B,CAAM,CAGtC,EACA,CAAC9B,EAAUmB,EAAgBlB,EAAiBG,CAAiB,CAAA,EAGzD2B,EAAUF,EAAAA,YAAY,IAAM,CAChCG,EAAcC,EAAyB,MAAO,CAC5C,QAAS,gCACT,WAAYxB,EACZ,WAAYT,CAAA,CACb,CAAA,EACA,CAACA,EAAUS,CAAU,CAAC,EAEnByB,EAASL,EAAA,YACZ1B,GAAkB,CACjB6B,EAAcC,EAAyB,KAAM,CAC3C,QAAS,gCACT,WAAYxB,EACZ,WAAYT,EACZ,WAAYG,EAAM,MAAA,CACnB,CACH,EACA,CAACH,EAAUS,CAAU,CAAA,EAGvB,SACG,MAAI,CAAA,IAAK0B,EAAqBrC,EAAmBc,CAAa,EAC5D,SAAA,CAAC,CAAAA,GAAiBP,GACjB+B,EAAC,OACC,CAAA,SAAAA,EAACC,EAAA,CACC,UAAAhC,EACA,UAAAG,EACA,UAAAG,CAAA,CAAA,EAEJ,EAEDyB,EAAA,MAAA,CAAI,IAAKE,EAA6BxC,CAAiB,EACtD,SAAAsC,EAACG,EAAA,CACC,oBAAoB,OACpB,MAAOd,EACP,SAAAG,EACA,gBAAiB,GACjB,YAAA7B,EACA,gBAAiBG,EACjB,KAAMsC,EAAU,WAChB,UAAU,QACV,SAAS,OACT,SAAUC,EAAU,WACpB,WAAYpC,EACZ,iBAAkBC,GAAuBE,EACzC,QAAAuB,EACA,OAAAG,EACA,gBAAiBd,CAAA,CAAA,EAErB,CACF,CAAA,CAAA,CAEJ,EAEAxB,EAAkB,YAAc"}