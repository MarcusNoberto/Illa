{"version":3,"file":"tableDataSourceSelectSetter-bb8c47c6.js","sources":["../../src/page/App/components/InspectPanel/PanelSetters/TableSetter/tableDataSourceSelectSetter.tsx"],"sourcesContent":["import { get, isEqual } from \"lodash-es\"\nimport { FC, useCallback, useEffect, useMemo } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport BaseDynamicSelect from \"@/page/App/components/InspectPanel/PanelSetters/SelectSetter/baseDynamicSelect\"\nimport { TableDataSourceSetterProps } from \"@/page/App/components/InspectPanel/PanelSetters/TableSetter/interface\"\nimport { publicPaddingStyle } from \"@/page/App/components/InspectPanel/style\"\nimport { getActionList } from \"@/redux/currentApp/action/actionSelector\"\nimport { searchDSLByDisplayName } from \"@/redux/currentApp/components/componentsSelector\"\nimport {\n  getExecutionError,\n  getExecutionResult,\n} from \"@/redux/currentApp/executionTree/executionSelector\"\nimport { RootState } from \"@/store\"\nimport { evaluateDynamicString } from \"@/utils/evaluateDynamicString\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport { ColumnItemShape } from \"@/widgetLibrary/TableWidget/interface\"\nimport {\n  tansDataFromOld,\n  tansTableDataToColumns,\n} from \"@/widgetLibrary/TableWidget/utils\"\n\nconst TableDataSourceSelectSetter: FC<TableDataSourceSetterProps> = (props) => {\n  const {\n    widgetDisplayName,\n    labelName,\n    labelDesc,\n    detailedDescription,\n    handleUpdateDsl,\n    handleUpdateMultiAttrDSL,\n  } = props\n\n  const actions = useSelector(getActionList)\n  const executionResult = useSelector(getExecutionResult)\n\n  const executionErrors = useSelector(getExecutionError)\n  const isError = useMemo(() => {\n    return (\n      (executionErrors[`${widgetDisplayName}.dataSource`] ?? [])?.length > 0\n    )\n  }, [executionErrors, widgetDisplayName])\n\n  const targetComponentProps = useSelector<RootState, Record<string, any>>(\n    (rootState) => {\n      return searchDSLByDisplayName(widgetDisplayName, rootState)?.props || {}\n    },\n  )\n\n  const columns = useMemo(() => {\n    return get(targetComponentProps, \"columns\", []) as ColumnItemShape[]\n  }, [targetComponentProps])\n\n  const customColumns = useMemo(() => {\n    return columns.filter((item) => item.custom)\n  }, [columns])\n\n  const isDynamic = useMemo(() => {\n    const dataSourceMode = get(targetComponentProps, \"dataSourceMode\", \"select\")\n    return dataSourceMode === \"dynamic\"\n  }, [targetComponentProps])\n\n  const finalValue = useMemo(() => {\n    if (isDynamic) {\n      return get(targetComponentProps, \"dataSourceJS\", [])\n    } else {\n      return get(targetComponentProps, \"dataSource\", [])\n    }\n  }, [isDynamic, targetComponentProps])\n\n  useEffect(() => {\n    const oldKeyOrder: string[] = []\n    const oldKeyMap: Record<string, ColumnItemShape> = {}\n    columns?.forEach((item) => {\n      oldKeyMap[item.accessorKey] = item\n      oldKeyOrder.push(item.accessorKey)\n    })\n    let data\n    try {\n      data = evaluateDynamicString(\"\", finalValue, executionResult)\n    } catch (e) {}\n    if (!Array.isArray(data)) return\n    const newColumns = tansDataFromOld(data, oldKeyMap, oldKeyOrder)\n    if (newColumns?.length && !isEqual(newColumns, columns)) {\n      handleUpdateMultiAttrDSL?.({ columns: newColumns })\n    }\n  }, [columns, executionResult, finalValue, handleUpdateMultiAttrDSL])\n\n  const selectedOptions = useMemo(() => {\n    return actions.map((action) => ({\n      label: action.displayName,\n      value: `{{${action.displayName}.data}}`,\n    }))\n  }, [actions])\n\n  const handleClickFxButton = useCallback(() => {\n    const isInOption = selectedOptions.some(\n      (option) => option.value === finalValue,\n    )\n    if (isDynamic) {\n      handleUpdateDsl(\"dataSourceMode\", \"select\")\n      if (!isInOption) {\n        handleUpdateDsl(\"dataSource\", \"\")\n      } else {\n        handleUpdateDsl(\"dataSource\", finalValue)\n      }\n    } else {\n      handleUpdateDsl(\"dataSourceMode\", \"dynamic\")\n      if (isInOption) {\n        handleUpdateDsl(\"dataSourceJS\", finalValue)\n      }\n    }\n  }, [handleUpdateDsl, isDynamic, selectedOptions, finalValue])\n\n  const getNewColumn = useCallback(\n    (value: string) => {\n      const data = evaluateDynamicString(\"\", value, executionResult)\n      if (Array.isArray(data)) {\n        let newColumns = tansTableDataToColumns(data)\n        if (newColumns?.length) {\n          return newColumns.concat(\n            customColumns.map((item: ColumnItemShape, index) => {\n              return { ...item, columnIndex: newColumns.length + index }\n            }),\n          )\n        }\n      }\n    },\n    [customColumns, executionResult],\n  )\n\n  const handleChangeInput = useCallback(\n    (value: string) => {\n      const newColumns = getNewColumn(value)\n      if (newColumns) {\n        handleUpdateMultiAttrDSL?.({\n          columns: newColumns,\n          dataSourceJS: value,\n        })\n        return\n      }\n      handleUpdateMultiAttrDSL?.({\n        dataSourceJS: value,\n      })\n    },\n    [getNewColumn, handleUpdateMultiAttrDSL],\n  )\n\n  const handleChangeSelect = useCallback(\n    (value: any) => {\n      const newColumns = getNewColumn(value)\n      if (newColumns) {\n        handleUpdateMultiAttrDSL?.({\n          columns: newColumns,\n          dataSource: value,\n        })\n        return\n      }\n      handleUpdateMultiAttrDSL?.({\n        dataSource: value,\n      })\n    },\n    [getNewColumn, handleUpdateMultiAttrDSL],\n  )\n\n  return (\n    <div css={publicPaddingStyle}>\n      <BaseDynamicSelect\n        {...props}\n        isDynamic={isDynamic}\n        onClickFxButton={handleClickFxButton}\n        selectPlaceholder=\"Select a query or transformer\"\n        inputPlaceholder=\"{{}}\"\n        onChangeInput={handleChangeInput}\n        path={`${widgetDisplayName}.dataSourceJS`}\n        options={selectedOptions}\n        expectedType={VALIDATION_TYPES.ARRAY}\n        onChangeSelect={handleChangeSelect}\n        value={finalValue}\n        labelName={labelName}\n        labelDesc={labelDesc}\n        detailedDescription={detailedDescription}\n        isError={isError}\n      />\n    </div>\n  )\n}\n\nTableDataSourceSelectSetter.displayName = \"TableDataSourceSelectSetter\"\nexport default TableDataSourceSelectSetter\n"],"names":["TableDataSourceSelectSetter","props","widgetDisplayName","labelName","labelDesc","detailedDescription","handleUpdateDsl","handleUpdateMultiAttrDSL","actions","useSelector","getActionList","executionResult","getExecutionResult","executionErrors","getExecutionError","isError","useMemo","_a","targetComponentProps","rootState","searchDSLByDisplayName","columns","get","customColumns","item","isDynamic","finalValue","useEffect","oldKeyOrder","oldKeyMap","data","evaluateDynamicString","newColumns","tansDataFromOld","isEqual","selectedOptions","action","handleClickFxButton","useCallback","isInOption","option","getNewColumn","value","tansTableDataToColumns","index","handleChangeInput","handleChangeSelect","jsx","publicPaddingStyle","BaseDynamicSelect","VALIDATION_TYPES"],"mappings":"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"}