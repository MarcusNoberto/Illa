{"version":3,"file":"tags-fa0af25c.js","sources":["../../src/widgetLibrary/TagsWidget/utils.ts","../../src/widgetLibrary/TagsWidget/components/TagContainer/index.tsx","../../src/widgetLibrary/TagsWidget/components/MorePanel/style.ts","../../src/widgetLibrary/TagsWidget/components/MorePanel/index.tsx","../../src/widgetLibrary/TagsWidget/constants.ts","../../src/widgetLibrary/TagsWidget/style.ts","../../src/widgetLibrary/TagsWidget/tags.tsx"],"sourcesContent":["import { isObject } from \"@illa-design/react\"\n\nexport const getSafeStringValue = (value: unknown) => {\n  if (isObject(value) || Array.isArray(value)) {\n    return JSON.stringify(value)\n  } else {\n    return `${value}`\n  }\n}\n","import { FC, useEffect, useRef } from \"react\"\nimport { Tag } from \"@illa-design/react\"\nimport { TagContainerProps } from \"./interface\"\n\nconst TagContainer: FC<TagContainerProps> = ({\n  v,\n  c,\n  allowWrap,\n  handleUpdateWith,\n  handleOnSelect,\n}) => {\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  useEffect(() => {\n    if (!allowWrap) {\n      handleUpdateWith?.(ref.current?.clientWidth || 0)\n    }\n  }, [allowWrap, handleUpdateWith])\n  return (\n    <Tag\n      ref={ref}\n      colorScheme={c}\n      clickable\n      onClick={() => handleOnSelect?.(v)}\n    >\n      {v}\n    </Tag>\n  )\n}\n\nexport default TagContainer\n","import { css } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/react\"\n\nexport const panelContainerStyle = css`\n  max-width: 240px;\n  padding: 8px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  border-radius: 8px;\n  border: 1px solid ${getColor(\"gray\", \"08\")};\n  background: ${getColor(\"white\", \"01\")};\n  box-shadow: 0px 2px 16px 0px rgba(0, 0, 0, 0.16);\n`\n","import { get } from \"lodash-es\"\nimport { FC } from \"react\"\nimport {\n  getHashCode,\n  getPreColor,\n} from \"@/page/App/components/InspectPanel/PanelSetters/DataGridSetter/utils\"\nimport { getSafeStringValue } from \"../../utils\"\nimport TagContainer from \"../TagContainer\"\nimport { MorePanelProps } from \"./interface\"\nimport { panelContainerStyle } from \"./style\"\n\nconst MorePanel: FC<MorePanelProps> = ({\n  values,\n  tagColorMap,\n  handleOnSelect,\n}) => {\n  return (\n    <div css={panelContainerStyle}>\n      {values.map((v, i) => {\n        const s = getSafeStringValue(v)\n        const c = get(tagColorMap, s) ?? getPreColor(getHashCode(s))\n        if (!s) return null\n        return (\n          <TagContainer\n            key={`${v}${i}`}\n            c={c}\n            v={s}\n            handleOnSelect={handleOnSelect}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default MorePanel\n","export const GAP = 8\nexport const OVERFLOW_GAP = 32\n","import { css } from \"@emotion/react\"\nimport { GAP } from \"./constants\"\nimport { Alignment } from \"./interface\"\n\nexport const wrapperContainerStyle = (\n  minW: number,\n  alignment: Alignment = \"flex-start\",\n  allowWrap?: boolean,\n) => css`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: ${alignment};\n  gap: ${GAP}px;\n  flex-wrap: ${allowWrap ? \"wrap\" : \"nowrap\"};\n  min-width: ${minW}px;\n`\n","import { get } from \"lodash-es\"\nimport { FC, useCallback, useEffect, useMemo, useRef, useState } from \"react\"\nimport useMeasure from \"react-use-measure\"\nimport { Trigger, isArray, isObject } from \"@illa-design/react\"\nimport {\n  getHashCode,\n  getPreColor,\n} from \"@/page/App/components/InspectPanel/PanelSetters/DataGridSetter/utils\"\nimport { AutoHeightContainer } from \"@/widgetLibrary/PublicSector/AutoHeightContainer\"\nimport { TooltipWrapper } from \"@/widgetLibrary/PublicSector/TooltipWrapper\"\nimport MorePanel from \"./components/MorePanel\"\nimport TagContainer from \"./components/TagContainer\"\nimport { GAP, OVERFLOW_GAP } from \"./constants\"\nimport { TagsWidgetProps, WrappedTagsProps } from \"./interface\"\nimport { wrapperContainerStyle } from \"./style\"\nimport { getSafeStringValue } from \"./utils\"\n\nexport const WrappedTags: FC<WrappedTagsProps> = (props) => {\n  const { value = [], tagColor, allowWrap, alignment, handleOnSelect } = props\n\n  const [sliceIndex, setSliceIndex] = useState(value.length)\n  const tagColorMap = isObject(tagColor) ? tagColor : {}\n  const widthArray = useRef<number[]>(new Array(value.length).fill(0))\n  const overflowWidth = useRef<number>(OVERFLOW_GAP)\n\n  const [container, containerBounds] = useMeasure()\n  const containerWidth = containerBounds.width - 6\n\n  const handleUpdateWithArray = useCallback(\n    (width: number, index: number) => {\n      if (width !== 0) {\n        const array = widthArray.current\n        const w =\n          index === 0\n            ? width\n            : width + array[index - 1] + (index === value.length - 1 ? 0 : GAP)\n        array[index] = w\n        widthArray.current = array\n      }\n    },\n    [value.length],\n  )\n\n  const realValue = useMemo(() => {\n    if (allowWrap || sliceIndex === widthArray.current.length) {\n      return value\n    }\n    return value.slice(0, sliceIndex + 1)\n  }, [sliceIndex, value, allowWrap])\n\n  useEffect(() => {\n    if (allowWrap) return\n    const dfs = (index: number) => {\n      if (index < 0) return\n      if (index === widthArray.current.length - 1) {\n        if (widthArray.current[index] > containerWidth) {\n          dfs(index - 1)\n        } else {\n          setSliceIndex(widthArray.current.length)\n        }\n      } else {\n        if (\n          widthArray.current[index] + GAP + overflowWidth.current >\n          containerWidth\n        ) {\n          dfs(index - 1)\n        } else {\n          setSliceIndex(index)\n        }\n      }\n    }\n    dfs(widthArray.current.length - 1)\n  }, [allowWrap, value.length, containerWidth])\n\n  useEffect(() => {\n    widthArray.current = new Array(value.length).fill(0)\n    setSliceIndex(value.length)\n  }, [value.length])\n\n  return (\n    <div\n      css={wrapperContainerStyle(\n        widthArray.current[0] + overflowWidth.current,\n        alignment,\n        allowWrap,\n      )}\n      ref={container}\n    >\n      {realValue.map((v, i) => {\n        const s = getSafeStringValue(v)\n        const c = get(tagColorMap, s) ?? getPreColor(getHashCode(s))\n        if (!s) return null\n        return (\n          <TagContainer\n            key={`${v}${i}`}\n            c={c}\n            v={s}\n            allowWrap={allowWrap}\n            handleUpdateWith={(w) => handleUpdateWithArray(w, i)}\n            handleOnSelect={handleOnSelect}\n          />\n        )\n      })}\n      {!allowWrap && !!value.length && sliceIndex !== value.length && (\n        <Trigger\n          position=\"bottom\"\n          withoutPadding\n          withoutShadow\n          colorScheme=\"white\"\n          content={\n            <MorePanel\n              values={value.slice(sliceIndex + 1)}\n              tagColorMap={tagColorMap}\n              handleOnSelect={handleOnSelect}\n            />\n          }\n        >\n          <div>\n            <TagContainer\n              c={getPreColor(getHashCode(`${value.length - sliceIndex - 1}`))}\n              v={`+${value.length - sliceIndex - 1}`}\n              handleUpdateWith={(w) => (overflowWidth.current = w)}\n            />\n          </div>\n        </Trigger>\n      )}\n    </div>\n  )\n}\n\nWrappedTags.displayName = \"WrappedTags\"\n\nexport const TagsWidget: FC<TagsWidgetProps> = (props) => {\n  const {\n    displayName,\n    tooltipText,\n    disabled,\n    updateComponentRuntimeProps,\n    deleteComponentRuntimeProps,\n    handleUpdateMultiExecutionResult,\n    triggerEventHandler,\n    updateComponentHeight,\n  } = props\n\n  useEffect(() => {\n    updateComponentRuntimeProps({\n      setValue: (value: unknown) => {\n        if (!isArray(value)) return\n        handleUpdateMultiExecutionResult([\n          {\n            displayName,\n            value: {\n              value: value || [],\n            },\n          },\n        ])\n      },\n      clearValue: () => {\n        handleUpdateMultiExecutionResult([\n          {\n            displayName,\n            value: {\n              value: undefined,\n            },\n          },\n        ])\n      },\n    })\n    return () => {\n      deleteComponentRuntimeProps()\n    }\n  }, [\n    deleteComponentRuntimeProps,\n    displayName,\n    handleUpdateMultiExecutionResult,\n    updateComponentRuntimeProps,\n  ])\n\n  const handleOnSelect = useCallback(\n    (value: string) => {\n      if (disabled) return\n      new Promise((resolve) => {\n        handleUpdateMultiExecutionResult([\n          {\n            displayName,\n            value: {\n              selectedTag: value,\n            },\n          },\n        ])\n        resolve(true)\n      }).then(() => {\n        triggerEventHandler(\"select\")\n      })\n    },\n    [\n      disabled,\n      displayName,\n      handleUpdateMultiExecutionResult,\n      triggerEventHandler,\n    ],\n  )\n\n  return (\n    <AutoHeightContainer updateComponentHeight={updateComponentHeight}>\n      <TooltipWrapper tooltipText={tooltipText} tooltipDisabled={!tooltipText}>\n        <div>\n          <WrappedTags {...props} handleOnSelect={handleOnSelect} />\n        </div>\n      </TooltipWrapper>\n    </AutoHeightContainer>\n  )\n}\nTagsWidget.displayName = \"TagsWidget\"\nexport default TagsWidget\n"],"names":["getSafeStringValue","value","isObject","TagContainer","v","c","allowWrap","handleUpdateWith","handleOnSelect","ref","useRef","useEffect","_a","jsx","Tag","panelContainerStyle","css","getColor","MorePanel","values","tagColorMap","i","s","get","getPreColor","getHashCode","GAP","OVERFLOW_GAP","wrapperContainerStyle","minW","alignment","WrappedTags","props","tagColor","sliceIndex","setSliceIndex","useState","widthArray","overflowWidth","container","containerBounds","useMeasure","containerWidth","handleUpdateWithArray","useCallback","width","index","array","w","realValue","useMemo","dfs","jsxs","Trigger","TagsWidget","displayName","tooltipText","disabled","updateComponentRuntimeProps","deleteComponentRuntimeProps","handleUpdateMultiExecutionResult","triggerEventHandler","updateComponentHeight","isArray","resolve","AutoHeightContainer","TooltipWrapper"],"mappings":"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"}