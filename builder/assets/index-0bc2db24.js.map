{"version":3,"file":"index-0bc2db24.js","sources":["../../src/page/App/components/Actions/ActionPanel/S3Panel/DeleteMultiplePart/index.tsx","../../src/page/App/components/Actions/ActionPanel/S3Panel/DeleteOnePart/index.tsx","../../src/page/App/components/Actions/ActionPanel/S3Panel/constants.ts","../../src/page/App/components/Actions/ActionPanel/S3Panel/DownloadOnePart/index.tsx","../../src/page/App/components/Actions/ActionPanel/S3Panel/ListAllPart/index.tsx","../../src/page/App/components/Actions/ActionPanel/S3Panel/ReadOnePart/index.tsx","../../src/page/App/components/Actions/ActionPanel/S3Panel/components/ContentTypeSelect/style.ts","../../src/page/App/components/Actions/ActionPanel/S3Panel/components/ContentTypeSelect/index.tsx","../../src/page/App/components/Actions/ActionPanel/S3Panel/UploadMultiplePart/index.tsx","../../src/page/App/components/Actions/ActionPanel/S3Panel/UploadPart/index.tsx","../../src/page/App/components/Actions/ActionPanel/S3Panel/style.ts","../../src/page/App/components/Actions/ActionPanel/S3Panel/index.tsx"],"sourcesContent":["import {\n  ActionItem,\n  S3Action,\n  S3ActionTypeContent,\n  S3DeleteMultipleContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { S3ActionPartProps } from \"@/page/App/components/Actions/ActionPanel/S3Panel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const DeleteMultiplePart: FC<S3ActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    S3Action<S3ActionTypeContent>\n  >\n  const commandArgs = props.commandArgs as S3DeleteMultipleContent\n\n  const handleValueChange = useCallback(\n    (name: string) => (value: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            commandArgs: {\n              ...commandArgs,\n              [name]: value,\n            } as S3DeleteMultipleContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, commandArgs, dispatch],\n  )\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.s3.bucket_name\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.bucketName}\n        onChange={handleValueChange(\"bucketName\")}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.s3.object_key_list\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        placeholder={t(\"editor.action.panel.s3.placeholder.object_key_list\")}\n        value={commandArgs.objectKeyList}\n        onChange={handleValueChange(\"objectKeyList\")}\n        expectedType={VALIDATION_TYPES.ARRAY}\n      />\n    </>\n  )\n}\n\nDeleteMultiplePart.displayName = \"DeleteMultiplePart\"\n","import {\n  ActionItem,\n  S3Action,\n  S3ActionTypeContent,\n  S3DeleteOneContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { S3ActionPartProps } from \"@/page/App/components/Actions/ActionPanel/S3Panel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\n\nexport const DeleteOnePart: FC<S3ActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    S3Action<S3ActionTypeContent>\n  >\n  const commandArgs = props.commandArgs as S3DeleteOneContent\n\n  const handleValueChange = useCallback(\n    (name: string) => (value: string) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            commandArgs: {\n              ...commandArgs,\n              [name]: value,\n            } as S3DeleteOneContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, commandArgs, dispatch],\n  )\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.s3.bucket_name\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.bucketName}\n        onChange={handleValueChange(\"bucketName\")}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.s3.object_key\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.objectKey}\n        onChange={handleValueChange(\"objectKey\")}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n    </>\n  )\n}\n\nDeleteOnePart.displayName = \"DeleteOnePart\"\n","import { S3ActionRequestType, S3_CONTENT_TYPE } from \"@illa-public/public-types\"\n\nenum S3ActionType {\n  LIST_ALL = \"List all objects in bucket\",\n  READ_ONE = \"Read an object\",\n  DOWNLOAD_ONE = \"Download an object\",\n  DELETE_ONE = \"Delete an object\",\n  DELETE_MULTIPLE = \"Delete multiple objects\",\n  UPLOAD = \"Upload data\",\n  UPLOAD_MULTIPLE = \"Upload multiple data\",\n}\n\nexport const S3ActionList = [\n  {\n    label: S3ActionType.LIST_ALL,\n    value: S3ActionRequestType.LIST_ALL,\n  },\n  {\n    label: S3ActionType.READ_ONE,\n    value: S3ActionRequestType.READ_ONE,\n  },\n  {\n    label: S3ActionType.DOWNLOAD_ONE,\n    value: S3ActionRequestType.DOWNLOAD_ONE,\n  },\n  {\n    label: S3ActionType.DELETE_ONE,\n    value: S3ActionRequestType.DELETE_ONE,\n  },\n  {\n    label: S3ActionType.DELETE_MULTIPLE,\n    value: S3ActionRequestType.DELETE_MULTIPLE,\n  },\n  {\n    label: S3ActionType.UPLOAD,\n    value: S3ActionRequestType.UPLOAD,\n  },\n  {\n    label: S3ActionType.UPLOAD_MULTIPLE,\n    value: S3ActionRequestType.UPLOAD_MULTIPLE,\n  },\n]\n\nexport const SelectOption = [\n  {\n    label: \"No\",\n    value: 0,\n  },\n  {\n    label: \"Yes\",\n    value: 1,\n  },\n]\n\nexport const ContentTypeOptions = [\n  {\n    label: \"Binary\",\n    value: S3_CONTENT_TYPE.BINARY,\n  },\n  {\n    label: \"CSV\",\n    value: S3_CONTENT_TYPE.CSV,\n  },\n  {\n    label: \"JSON\",\n    value: S3_CONTENT_TYPE.JSON,\n  },\n  {\n    label: \"String\",\n    value: S3_CONTENT_TYPE.STRING,\n  },\n]\n","import {\n  ActionItem,\n  S3Action,\n  S3ActionTypeContent,\n  S3DownloadOneContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { S3ActionPartProps } from \"@/page/App/components/Actions/ActionPanel/S3Panel/interface\"\nimport { SingleTypeComponent } from \"@/page/App/components/Actions/ActionPanel/SingleTypeComponent\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport { SelectOption } from \"../constants\"\n\nexport const DownloadOnePart: FC<S3ActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    S3Action<S3ActionTypeContent>\n  >\n  const commandArgs = props.commandArgs as S3DownloadOneContent\n  const isShowSignedURL = commandArgs.signedURL\n\n  const handleValueChange = useCallback(\n    (name: string) => (value: string | boolean) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            commandArgs: {\n              ...commandArgs,\n              [name]: value,\n            } as S3DownloadOneContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, commandArgs, dispatch],\n  )\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.s3.bucket_name\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.bucketName}\n        onChange={handleValueChange(\"bucketName\")}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.s3.object_key\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.objectKey}\n        onChange={handleValueChange(\"objectKey\")}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n      <SingleTypeComponent\n        componentType=\"select\"\n        value={+commandArgs.signedURL}\n        style={{\n          position: \"relative\",\n          zIndex: 0,\n        }}\n        title={t(\"editor.action.panel.s3.generate_signed_url\")}\n        showSearch\n        onSelectedValueChange={(value) =>\n          handleValueChange(\"signedURL\")(!!value)\n        }\n        options={SelectOption}\n      />\n      {isShowSignedURL && (\n        <InputEditor\n          title={t(\"editor.action.panel.s3.expiry_duration_of_signed_url\")}\n          mode={CODE_LANG.JAVASCRIPT}\n          value={String(commandArgs.expiry)}\n          onChange={handleValueChange(\"expiry\")}\n          expectedType={VALIDATION_TYPES.NUMBER}\n        />\n      )}\n    </>\n  )\n}\n\nDownloadOnePart.displayName = \"DownloadOnePart\"\n","import {\n  ActionItem,\n  S3Action,\n  S3ActionTypeContent,\n  S3ListAllContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { S3ActionPartProps } from \"@/page/App/components/Actions/ActionPanel/S3Panel/interface\"\nimport { SingleTypeComponent } from \"@/page/App/components/Actions/ActionPanel/SingleTypeComponent\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport { SelectOption } from \"../constants\"\n\nexport const ListAllPart: FC<S3ActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    S3Action<S3ActionTypeContent>\n  >\n  const commandArgs = props.commandArgs as S3ListAllContent\n  const isShowSignedURL = commandArgs.signedURL\n\n  const handleValueChange = useCallback(\n    (name: string) => (value: string | boolean) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            commandArgs: {\n              ...commandArgs,\n              [name]: value,\n            } as S3ListAllContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, commandArgs, dispatch],\n  )\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.s3.bucket_name\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.bucketName}\n        onChange={handleValueChange(\"bucketName\")}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.s3.prefix_to_filter_reseults\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.prefix}\n        onChange={handleValueChange(\"prefix\")}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.s3.delimiter\")}\n        popoverContent={t(\"editor.action.panel.s3.tips.delimiter\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.delimiter}\n        onChange={handleValueChange(\"delimiter\")}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n      <SingleTypeComponent\n        componentType=\"select\"\n        value={+commandArgs.signedURL}\n        title={t(\"editor.action.panel.s3.generate_signed_url\")}\n        showSearch\n        onSelectedValueChange={(value) =>\n          handleValueChange(\"signedURL\")(!!value)\n        }\n        options={SelectOption}\n        style={{\n          position: \"relative\",\n          zIndex: 0,\n        }}\n      />\n      {isShowSignedURL && (\n        <InputEditor\n          title={t(\"editor.action.panel.s3.expiry_duration_of_signed_url\")}\n          mode={CODE_LANG.JAVASCRIPT}\n          value={String(commandArgs.expiry)}\n          onChange={handleValueChange(\"expiry\")}\n          expectedType={VALIDATION_TYPES.NUMBER}\n        />\n      )}\n      <InputEditor\n        title={t(\"editor.action.panel.s3.max_keys\")}\n        popoverContent={t(\"editor.action.panel.s3.tips.max_keys\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.maxKeys}\n        onChange={handleValueChange(\"maxKeys\")}\n        expectedType={VALIDATION_TYPES.NUMBER}\n      />\n    </>\n  )\n}\n\nListAllPart.displayName = \"ListAllPart\"\n","import {\n  ActionItem,\n  S3Action,\n  S3ActionTypeContent,\n  S3ReadOneContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { S3ActionPartProps } from \"@/page/App/components/Actions/ActionPanel/S3Panel/interface\"\nimport { SingleTypeComponent } from \"@/page/App/components/Actions/ActionPanel/SingleTypeComponent\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport { SelectOption } from \"../constants\"\n\nexport const ReadOnePart: FC<S3ActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    S3Action<S3ActionTypeContent>\n  >\n  const commandArgs = props.commandArgs as S3ReadOneContent\n  const isShowSignedURL = commandArgs.signedURL\n\n  const handleValueChange = useCallback(\n    (name: string) => (value: string | boolean) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            commandArgs: {\n              ...commandArgs,\n              [name]: value,\n            } as S3ReadOneContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, commandArgs, dispatch],\n  )\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.s3.bucket_name\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.bucketName}\n        onChange={handleValueChange(\"bucketName\")}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.s3.object_key\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.objectKey}\n        onChange={handleValueChange(\"objectKey\")}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n      <SingleTypeComponent\n        showSearch={true}\n        componentType=\"select\"\n        onChange={(value) => handleValueChange(\"signedURL\")(!!value)}\n        options={SelectOption}\n        value={+commandArgs.signedURL}\n        title={t(\"editor.action.panel.s3.generate_signed_url\")}\n        style={{\n          position: \"relative\",\n          zIndex: 0,\n        }}\n      />\n      {isShowSignedURL && (\n        <InputEditor\n          title={t(\"editor.action.panel.s3.generate_signed_url\")}\n          key=\"read\"\n          mode={CODE_LANG.JAVASCRIPT}\n          value={String(commandArgs.expiry)}\n          onChange={handleValueChange(\"expiry\")}\n          expectedType={VALIDATION_TYPES.NUMBER}\n        />\n      )}\n    </>\n  )\n}\n\nReadOnePart.displayName = \"ReadOnePart\"\n","import { css } from \"@emotion/react\"\nimport { getColor } from \"@illa-design/react\"\n\nexport const containerStyle = css`\n  display: flex;\n  align-items: center;\n  flex: 1;\n`\n\nexport const getFxIconStyle = (selected?: boolean) => {\n  return css`\n    width: 16px;\n    height: 16px;\n    color: ${selected\n      ? getColor(\"techPurple\", \"03\")\n      : getColor(\"grayBlue\", \"04\")};\n    cursor: pointer;\n    z-index: 1;\n    margin-right: 16px;\n    :hover {\n      cursor: pointer;\n      color: ${getColor(\"techPurple\", \"03\")};\n    }\n  `\n}\n","import { FC } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { FxIcon } from \"@illa-design/react\"\nimport { SingleTypeComponent } from \"@/page/App/components/Actions/ActionPanel/SingleTypeComponent\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport { ContentTypeOptions } from \"../../constants\"\nimport { ContentTypeSelectProps } from \"./interface\"\nimport { containerStyle, getFxIconStyle } from \"./style\"\n\nexport const ContentTypeSelect: FC<ContentTypeSelectProps> = (props) => {\n  const { value, onChange, fx } = props\n  const { t } = useTranslation()\n\n  const handleOnClick = () => {\n    onChange(\"fx\")(!fx)\n  }\n\n  return (\n    <div css={containerStyle}>\n      {fx ? (\n        <InputEditor\n          title={t(\"editor.action.panel.s3.content_type\")}\n          value={value}\n          onChange={onChange(\"contentType\")}\n          expectedType={VALIDATION_TYPES.STRING}\n        />\n      ) : (\n        <SingleTypeComponent\n          title={t(\"editor.action.panel.s3.content_type\")}\n          componentType=\"select\"\n          value={value}\n          onChange={onChange(\"contentType\")}\n          options={ContentTypeOptions}\n        />\n      )}\n      <FxIcon onClick={handleOnClick} css={getFxIconStyle(fx)} />\n    </div>\n  )\n}\nContentTypeSelect.displayName = \"ContentTypeSelect\"\nexport default ContentTypeSelect\n","import {\n  ActionItem,\n  S3Action,\n  S3ActionTypeContent,\n  S3UploadMultipleContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { S3ActionPartProps } from \"@/page/App/components/Actions/ActionPanel/S3Panel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport ContentTypeSelect from \"../components/ContentTypeSelect\"\n\nexport const UploadMultiplePart: FC<S3ActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    S3Action<S3ActionTypeContent>\n  >\n  const commandArgs = props.commandArgs as S3UploadMultipleContent\n  const handleValueChange = useCallback(\n    (name: string) => (value: string | boolean) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            commandArgs: {\n              ...commandArgs,\n              [name]: value,\n            } as S3UploadMultipleContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, commandArgs, dispatch],\n  )\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.s3.bucket_name\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.bucketName}\n        onChange={handleValueChange(\"bucketName\")}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n      <ContentTypeSelect\n        value={commandArgs.contentType}\n        onChange={handleValueChange}\n        fx={commandArgs.fx}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.s3.upload_object_name_list\")}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        mode={CODE_LANG.JAVASCRIPT}\n        placeholder={t(\"editor.action.panel.s3.placeholder.object_name_list\")}\n        value={commandArgs.objectKeyList}\n        onChange={handleValueChange(\"objectKeyList\")}\n        expectedType={VALIDATION_TYPES.ARRAY}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.s3.upload_data_list\")}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        mode={CODE_LANG.JAVASCRIPT}\n        placeholder={t(\"editor.action.panel.s3.placeholder.data_list\")}\n        value={commandArgs.objectDataList}\n        onChange={handleValueChange(\"objectDataList\")}\n        expectedType={VALIDATION_TYPES.ARRAY}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.s3.timeout_upload_multiple\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.expiry}\n        onChange={handleValueChange(\"expiry\")}\n        expectedType={VALIDATION_TYPES.NUMBER}\n      />\n    </>\n  )\n}\n\nUploadMultiplePart.displayName = \"UploadMultiplePart\"\n","import {\n  ActionItem,\n  S3Action,\n  S3ActionTypeContent,\n  S3UploadContent,\n} from \"@illa-public/public-types\"\nimport { FC, useCallback } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { CODE_LANG } from \"@/components/CodeEditor/CodeMirror/extensions/interface\"\nimport { S3ActionPartProps } from \"@/page/App/components/Actions/ActionPanel/S3Panel/interface\"\nimport { InputEditor } from \"@/page/App/components/Actions/InputEditor\"\nimport { getCachedAction } from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { VALIDATION_TYPES } from \"@/utils/validationFactory\"\nimport ContentTypeSelect from \"../components/ContentTypeSelect\"\n\nexport const UploadPart: FC<S3ActionPartProps> = (props) => {\n  const { t } = useTranslation()\n  const dispatch = useDispatch()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    S3Action<S3ActionTypeContent>\n  >\n  const commandArgs = props.commandArgs as S3UploadContent\n  const handleValueChange = useCallback(\n    (name: string) => (value: string | boolean) => {\n      dispatch(\n        configActions.updateCachedAction({\n          ...cachedAction,\n          content: {\n            ...cachedAction.content,\n            commandArgs: {\n              ...commandArgs,\n              [name]: value,\n            } as S3UploadContent,\n          },\n        }),\n      )\n    },\n    [cachedAction, commandArgs, dispatch],\n  )\n\n  return (\n    <>\n      <InputEditor\n        title={t(\"editor.action.panel.s3.bucket_name\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.bucketName}\n        onChange={handleValueChange(\"bucketName\")}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n      <ContentTypeSelect\n        value={commandArgs.contentType}\n        onChange={handleValueChange}\n        fx={commandArgs.fx}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.s3.upload_object_name\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        placeholder={t(\"editor.action.panel.s3.placeholder.object_name\")}\n        value={commandArgs.objectKey}\n        onChange={handleValueChange(\"objectKey\")}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.s3.upload_data\")}\n        lineNumbers\n        style={{ height: \"88px\" }}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.objectData}\n        onChange={handleValueChange(\"objectData\")}\n        expectedType={VALIDATION_TYPES.STRING}\n      />\n      <InputEditor\n        title={t(\"editor.action.panel.s3.timeout_upload\")}\n        mode={CODE_LANG.JAVASCRIPT}\n        value={commandArgs.expiry}\n        onChange={handleValueChange(\"expiry\")}\n        expectedType={VALIDATION_TYPES.NUMBER}\n      />\n    </>\n  )\n}\n\nUploadPart.displayName = \"UploadPart\"\n","import { css } from \"@emotion/react\"\n\nexport const actionItemContainer = css`\n  padding: 8px 0;\n`\n","import {\n  S3DeleteMultipleContentInitial,\n  S3DeleteOneContentInitial,\n  S3DownloadOneContentInitial,\n  S3ListAllContentInitial,\n  S3ReadOneContentInitial,\n  S3UploadContentInitial,\n  S3UploadMultipleContentInitial,\n} from \"@illa-public/public-configs\"\nimport {\n  ActionItem,\n  S3Action,\n  S3ActionRequestType,\n  S3ActionTypeContent,\n} from \"@illa-public/public-types\"\nimport { FC, useMemo } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { SingleTypeComponent } from \"@/page/App/components/Actions/ActionPanel/SingleTypeComponent\"\nimport { TransformerComponent } from \"@/page/App/components/Actions/ActionPanel/TransformerComponent\"\nimport {\n  getCachedAction,\n  getSelectedAction,\n} from \"@/redux/config/configSelector\"\nimport { configActions } from \"@/redux/config/configSlice\"\nimport { DeleteMultiplePart } from \"./DeleteMultiplePart\"\nimport { DeleteOnePart } from \"./DeleteOnePart\"\nimport { DownloadOnePart } from \"./DownloadOnePart\"\nimport { ListAllPart } from \"./ListAllPart\"\nimport { ReadOnePart } from \"./ReadOnePart\"\nimport { UploadMultiplePart } from \"./UploadMultiplePart\"\nimport { UploadPart } from \"./UploadPart\"\nimport { S3ActionList } from \"./constants\"\nimport { actionItemContainer } from \"./style\"\n\nconst S3Panel: FC = () => {\n  const { t } = useTranslation()\n  const cachedAction = useSelector(getCachedAction) as ActionItem<\n    S3Action<S3ActionTypeContent>\n  >\n  const selectedAction = useSelector(getSelectedAction)!\n  const dispatch = useDispatch()\n  let content = cachedAction.content as S3Action<S3ActionTypeContent>\n\n  const renderInputBody = useMemo(() => {\n    switch (content.commands) {\n      case S3ActionRequestType.LIST_ALL:\n        return <ListAllPart commandArgs={content.commandArgs} />\n      case S3ActionRequestType.READ_ONE:\n        return <ReadOnePart commandArgs={content.commandArgs} />\n      case S3ActionRequestType.DOWNLOAD_ONE:\n        return <DownloadOnePart commandArgs={content.commandArgs} />\n      case S3ActionRequestType.DELETE_ONE:\n        return <DeleteOnePart commandArgs={content.commandArgs} />\n      case S3ActionRequestType.DELETE_MULTIPLE:\n        return <DeleteMultiplePart commandArgs={content.commandArgs} />\n      case S3ActionRequestType.UPLOAD:\n        return <UploadPart commandArgs={content.commandArgs} />\n      case S3ActionRequestType.UPLOAD_MULTIPLE:\n        return <UploadMultiplePart commandArgs={content.commandArgs} />\n      default:\n        return <></>\n    }\n  }, [content.commands, content.commandArgs])\n\n  const handleActionChange = (value: S3ActionRequestType) => {\n    let newCommandArgs: S3ActionTypeContent = S3ListAllContentInitial\n    if (\n      cachedAction.resourceID === selectedAction.resourceID &&\n      (selectedAction.content as S3Action<S3ActionTypeContent>).commands ===\n        value\n    ) {\n      newCommandArgs = (selectedAction.content as S3Action<S3ActionTypeContent>)\n        .commandArgs\n    } else {\n      switch (value) {\n        case S3ActionRequestType.LIST_ALL:\n          newCommandArgs = S3ListAllContentInitial\n          break\n        case S3ActionRequestType.READ_ONE:\n          newCommandArgs = S3ReadOneContentInitial\n          break\n        case S3ActionRequestType.DOWNLOAD_ONE:\n          newCommandArgs = S3DownloadOneContentInitial\n          break\n        case S3ActionRequestType.DELETE_ONE:\n          newCommandArgs = S3DeleteOneContentInitial\n          break\n        case S3ActionRequestType.DELETE_MULTIPLE:\n          newCommandArgs = S3DeleteMultipleContentInitial\n          break\n        case S3ActionRequestType.UPLOAD:\n          newCommandArgs = S3UploadContentInitial\n          break\n        case S3ActionRequestType.UPLOAD_MULTIPLE:\n          newCommandArgs = S3UploadMultipleContentInitial\n          break\n      }\n    }\n    dispatch(\n      configActions.updateCachedAction({\n        ...cachedAction,\n        content: {\n          ...cachedAction.content,\n          commands: value,\n          commandArgs: newCommandArgs,\n        },\n      }),\n    )\n  }\n\n  return (\n    <div css={actionItemContainer}>\n      <SingleTypeComponent\n        title={t(\"editor.action.panel.s3.action_type\")}\n        componentType=\"select\"\n        value={content.commands}\n        showSearch\n        onChange={handleActionChange}\n        options={S3ActionList}\n      />\n      {renderInputBody}\n      <TransformerComponent />\n    </div>\n  )\n}\n\nS3Panel.displayName = \"S3Panel\"\nexport default S3Panel\n"],"names":["DeleteMultiplePart","props","useTranslation","dispatch","useDispatch","cachedAction","useSelector","getCachedAction","commandArgs","handleValueChange","useCallback","name","value","configActions","jsxs","Fragment","jsx","InputEditor","CODE_LANG","VALIDATION_TYPES","DeleteOnePart","S3ActionList","S3ActionRequestType","SelectOption","ContentTypeOptions","S3_CONTENT_TYPE","DownloadOnePart","isShowSignedURL","SingleTypeComponent","ListAllPart","ReadOnePart","containerStyle","css","getFxIconStyle","selected","getColor","ContentTypeSelect","onChange","fx","t","handleOnClick","FxIcon","UploadMultiplePart","UploadPart","actionItemContainer","S3Panel","selectedAction","getSelectedAction","content","renderInputBody","useMemo","handleActionChange","newCommandArgs","S3ListAllContentInitial","S3ReadOneContentInitial","S3DownloadOneContentInitial","S3DeleteOneContentInitial","S3DeleteMultipleContentInitial","S3UploadContentInitial","S3UploadMultipleContentInitial","TransformerComponent"],"mappings":"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"}